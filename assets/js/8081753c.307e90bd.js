"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[69854],{72307:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var a=n(83117),r=(n(67294),n(3905)),i=n(1954);const o={title:"Class SqlMapper",sidebar_label:"SqlMapper",description:"Dapper, a light weight object mapper for ADO.NET"},l='<Icon icon="codicon:symbol-class" className="symbol-class" /> SqlMapper',c={unversionedId:"api/ServiceStack.OrmLite.Dapper/SqlMapper",id:"api/ServiceStack.OrmLite.Dapper/SqlMapper",title:"Class SqlMapper",description:"Dapper, a light weight object mapper for ADO.NET",source:"@site/docs/api/ServiceStack.OrmLite.Dapper/SqlMapper.md",sourceDirName:"api/ServiceStack.OrmLite.Dapper",slug:"/api/ServiceStack.OrmLite.Dapper/SqlMapper",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper",draft:!1,tags:[],version:"current",frontMatter:{title:"Class SqlMapper",sidebar_label:"SqlMapper",description:"Dapper, a light weight object mapper for ADO.NET"},sidebar:"apiSidebar",previous:{title:"SqlMapper.UdtTypeHandler",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.UdtTypeHandler"},next:{title:"ServiceStack.OrmLite.Legacy",permalink:"/api/ServiceStack.OrmLite.Legacy/"}},m={},p=[{value:"<strong>Assembly</strong>: ServiceStack.OrmLite.dll",id:"assembly-servicestackormlitedll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Properties",id:"properties",level:2},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> ConnectionStringComparer',id:"-connectionstringcomparer",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Fields",id:"fields",level:2},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> TypeMapProvider',id:"-typemapprovider",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync(IDbConnection, CommandDefinition)',id:"-queryasyncidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstAsync(IDbConnection, CommandDefinition)',id:"-queryfirstasyncidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefaultAsync(IDbConnection, CommandDefinition)',id:"-queryfirstordefaultasyncidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleAsync(IDbConnection, CommandDefinition)',id:"-querysingleasyncidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefaultAsync(IDbConnection, CommandDefinition)',id:"-querysingleordefaultasyncidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9",level:6},{value:"Returns",id:"returns-6",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:"Type Parameters",id:"type-parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstAsync&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10",level:6},{value:"Returns",id:"returns-7",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:"Type Parameters",id:"type-parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefaultAsync&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstordefaultasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11",level:6},{value:"Returns",id:"returns-8",level:5},{value:"Parameters",id:"parameters-8",level:5},{value:"Type Parameters",id:"type-parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleAsync&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12",level:6},{value:"Returns",id:"returns-9",level:5},{value:"Parameters",id:"parameters-9",level:5},{value:"Type Parameters",id:"type-parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefaultAsync&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleordefaultasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13",level:6},{value:"Returns",id:"returns-10",level:5},{value:"Parameters",id:"parameters-10",level:5},{value:"Type Parameters",id:"type-parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstAsync(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14",level:6},{value:"Returns",id:"returns-11",level:5},{value:"Parameters",id:"parameters-11",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefaultAsync(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstordefaultasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15",level:6},{value:"Returns",id:"returns-12",level:5},{value:"Parameters",id:"parameters-12",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleAsync(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16",level:6},{value:"Returns",id:"returns-13",level:5},{value:"Parameters",id:"parameters-13",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefaultAsync(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleordefaultasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17",level:6},{value:"Returns",id:"returns-14",level:5},{value:"Parameters",id:"parameters-14",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18",level:6},{value:"Returns",id:"returns-15",level:5},{value:"Parameters",id:"parameters-15",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19",level:6},{value:"Returns",id:"returns-16",level:5},{value:"Parameters",id:"parameters-16",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefaultAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstordefaultasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20",level:6},{value:"Returns",id:"returns-17",level:5},{value:"Parameters",id:"parameters-17",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21",level:6},{value:"Returns",id:"returns-18",level:5},{value:"Parameters",id:"parameters-18",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefaultAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleordefaultasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22",level:6},{value:"Returns",id:"returns-19",level:5},{value:"Parameters",id:"parameters-19",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-queryasynctidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23",level:6},{value:"Returns",id:"returns-20",level:5},{value:"Parameters",id:"parameters-20",level:5},{value:"Type Parameters",id:"type-parameters-5",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync(IDbConnection, Type, CommandDefinition)',id:"-queryasyncidbconnection-type-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24",level:6},{value:"Returns",id:"returns-21",level:5},{value:"Parameters",id:"parameters-21",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstAsync(IDbConnection, Type, CommandDefinition)',id:"-queryfirstasyncidbconnection-type-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25",level:6},{value:"Returns",id:"returns-22",level:5},{value:"Parameters",id:"parameters-22",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstAsync&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-queryfirstasynctidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26",level:6},{value:"Returns",id:"returns-23",level:5},{value:"Parameters",id:"parameters-23",level:5},{value:"Type Parameters",id:"type-parameters-6",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefaultAsync(IDbConnection, Type, CommandDefinition)',id:"-queryfirstordefaultasyncidbconnection-type-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27",level:6},{value:"Returns",id:"returns-24",level:5},{value:"Parameters",id:"parameters-24",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefaultAsync&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-queryfirstordefaultasynctidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28",level:6},{value:"Returns",id:"returns-25",level:5},{value:"Parameters",id:"parameters-25",level:5},{value:"Type Parameters",id:"type-parameters-7",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleAsync(IDbConnection, Type, CommandDefinition)',id:"-querysingleasyncidbconnection-type-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29",level:6},{value:"Returns",id:"returns-26",level:5},{value:"Parameters",id:"parameters-26",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleAsync&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-querysingleasynctidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30",level:6},{value:"Returns",id:"returns-27",level:5},{value:"Parameters",id:"parameters-27",level:5},{value:"Type Parameters",id:"type-parameters-8",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefaultAsync(IDbConnection, Type, CommandDefinition)',id:"-querysingleordefaultasyncidbconnection-type-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31",level:6},{value:"Returns",id:"returns-28",level:5},{value:"Parameters",id:"parameters-28",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefaultAsync&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-querysingleordefaultasynctidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32",level:6},{value:"Returns",id:"returns-29",level:5},{value:"Parameters",id:"parameters-29",level:5},{value:"Type Parameters",id:"type-parameters-9",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteAsync(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-executeasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-33",level:6},{value:"Returns",id:"returns-30",level:5},{value:"Parameters",id:"parameters-30",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteAsync(IDbConnection, CommandDefinition)',id:"-executeasyncidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-34",level:6},{value:"Returns",id:"returns-31",level:5},{value:"Parameters",id:"parameters-31",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasynctfirst-tsecond-treturnidbconnection-string-functfirst-tsecond-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-35",level:6},{value:"Returns",id:"returns-32",level:5},{value:"Parameters",id:"parameters-32",level:5},{value:"Type Parameters",id:"type-parameters-10",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TReturn&gt;(IDbConnection, CommandDefinition, Func&lt;TFirst, TSecond, TReturn&gt;, String)',id:"-queryasynctfirst-tsecond-treturnidbconnection-commanddefinition-functfirst-tsecond-treturn-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-36",level:6},{value:"Returns",id:"returns-33",level:5},{value:"Parameters",id:"parameters-33",level:5},{value:"Type Parameters",id:"type-parameters-11",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasynctfirst-tsecond-tthird-treturnidbconnection-string-functfirst-tsecond-tthird-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-37",level:6},{value:"Returns",id:"returns-34",level:5},{value:"Parameters",id:"parameters-34",level:5},{value:"Type Parameters",id:"type-parameters-12",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TReturn&gt;(IDbConnection, CommandDefinition, Func&lt;TFirst, TSecond, TThird, TReturn&gt;, String)',id:"-queryasynctfirst-tsecond-tthird-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-treturn-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-38",level:6},{value:"Returns",id:"returns-35",level:5},{value:"Parameters",id:"parameters-35",level:5},{value:"Type Parameters",id:"type-parameters-13",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TFourth, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TFourth, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasynctfirst-tsecond-tthird-tfourth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-39",level:6},{value:"Returns",id:"returns-36",level:5},{value:"Parameters",id:"parameters-36",level:5},{value:"Type Parameters",id:"type-parameters-14",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TFourth, TReturn&gt;(IDbConnection, CommandDefinition, Func&lt;TFirst, TSecond, TThird, TFourth, TReturn&gt;, String)',id:"-queryasynctfirst-tsecond-tthird-tfourth-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-tfourth-treturn-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-40",level:6},{value:"Returns",id:"returns-37",level:5},{value:"Parameters",id:"parameters-37",level:5},{value:"Type Parameters",id:"type-parameters-15",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TFourth, TFifth, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-41",level:6},{value:"Returns",id:"returns-38",level:5},{value:"Parameters",id:"parameters-38",level:5},{value:"Type Parameters",id:"type-parameters-16",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TFourth, TFifth, TReturn&gt;(IDbConnection, CommandDefinition, Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TReturn&gt;, String)',id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-tfourth-tfifth-treturn-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-42",level:6},{value:"Returns",id:"returns-39",level:5},{value:"Parameters",id:"parameters-39",level:5},{value:"Type Parameters",id:"type-parameters-17",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-43",level:6},{value:"Returns",id:"returns-40",level:5},{value:"Parameters",id:"parameters-40",level:5},{value:"Type Parameters",id:"type-parameters-18",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn&gt;(IDbConnection, CommandDefinition, Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn&gt;, String)',id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturn-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-44",level:6},{value:"Returns",id:"returns-41",level:5},{value:"Parameters",id:"parameters-41",level:5},{value:"Type Parameters",id:"type-parameters-19",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-45",level:6},{value:"Returns",id:"returns-42",level:5},{value:"Parameters",id:"parameters-42",level:5},{value:"Type Parameters",id:"type-parameters-20",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&gt;(IDbConnection, CommandDefinition, Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&gt;, String)',id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturn-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-46",level:6},{value:"Returns",id:"returns-43",level:5},{value:"Parameters",id:"parameters-43",level:5},{value:"Type Parameters",id:"type-parameters-21",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryAsync&lt;TReturn&gt;(IDbConnection, String, Type[], Func&lt;Object[], TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryasynctreturnidbconnection-string-type-funcobject-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-47",level:6},{value:"Returns",id:"returns-44",level:5},{value:"Parameters",id:"parameters-44",level:5},{value:"Type Parameters",id:"type-parameters-22",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryMultipleAsync(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querymultipleasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-48",level:6},{value:"Returns",id:"returns-45",level:5},{value:"Parameters",id:"parameters-45",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryMultipleAsync(IDbConnection, CommandDefinition)',id:"-querymultipleasyncidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-49",level:6},{value:"Returns",id:"returns-46",level:5},{value:"Parameters",id:"parameters-46",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteReaderAsync(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-executereaderasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-50",level:6},{value:"Returns",id:"returns-47",level:5},{value:"Parameters",id:"parameters-47",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteReaderAsync(DbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-executereaderasyncdbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-51",level:6},{value:"Returns",id:"returns-48",level:5},{value:"Parameters",id:"parameters-48",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteReaderAsync(IDbConnection, CommandDefinition)',id:"-executereaderasyncidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-52",level:6},{value:"Returns",id:"returns-49",level:5},{value:"Parameters",id:"parameters-49",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteReaderAsync(DbConnection, CommandDefinition)',id:"-executereaderasyncdbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-53",level:6},{value:"Returns",id:"returns-50",level:5},{value:"Parameters",id:"parameters-50",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteReaderAsync(IDbConnection, CommandDefinition, CommandBehavior)',id:"-executereaderasyncidbconnection-commanddefinition-commandbehavior",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-54",level:6},{value:"Returns",id:"returns-51",level:5},{value:"Parameters",id:"parameters-51",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteReaderAsync(DbConnection, CommandDefinition, CommandBehavior)',id:"-executereaderasyncdbconnection-commanddefinition-commandbehavior",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-55",level:6},{value:"Returns",id:"returns-52",level:5},{value:"Parameters",id:"parameters-52",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteScalarAsync(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-executescalarasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-56",level:6},{value:"Returns",id:"returns-53",level:5},{value:"Parameters",id:"parameters-53",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteScalarAsync&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-executescalarasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-57",level:6},{value:"Returns",id:"returns-54",level:5},{value:"Parameters",id:"parameters-54",level:5},{value:"Type Parameters",id:"type-parameters-23",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteScalarAsync(IDbConnection, CommandDefinition)',id:"-executescalarasyncidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-58",level:6},{value:"Returns",id:"returns-55",level:5},{value:"Parameters",id:"parameters-55",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteScalarAsync&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-executescalarasynctidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-59",level:6},{value:"Returns",id:"returns-56",level:5},{value:"Parameters",id:"parameters-56",level:5},{value:"Type Parameters",id:"type-parameters-24",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> PurgeQueryCache()',id:"-purgequerycache",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-60",level:6},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetCachedSQLCount()',id:"-getcachedsqlcount",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-61",level:6},{value:"Returns",id:"returns-57",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetCachedSQL(Int32)',id:"-getcachedsqlint32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-62",level:6},{value:"Returns",id:"returns-58",level:5},{value:"Parameters",id:"parameters-57",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetHashCollissions()',id:"-gethashcollissions",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-63",level:6},{value:"Returns",id:"returns-59",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ResetTypeHandlers()',id:"-resettypehandlers",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-64",level:6},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> AddTypeMap(Type, DbType)',id:"-addtypemaptype-dbtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-65",level:6},{value:"Parameters",id:"parameters-58",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> RemoveTypeMap(Type)',id:"-removetypemaptype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-66",level:6},{value:"Parameters",id:"parameters-59",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> AddTypeHandler(Type, SqlMapper.ITypeHandler)',id:"-addtypehandlertype-sqlmapperitypehandler",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-67",level:6},{value:"Parameters",id:"parameters-60",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> AddTypeHandlerImpl(Type, SqlMapper.ITypeHandler, Boolean)',id:"-addtypehandlerimpltype-sqlmapperitypehandler-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-68",level:6},{value:"Parameters",id:"parameters-61",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> AddTypeHandler&lt;T&gt;(SqlMapper.TypeHandler&lt;T&gt;)',id:"-addtypehandlertsqlmappertypehandlert",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-69",level:6},{value:"Parameters",id:"parameters-62",level:5},{value:"Type Parameters",id:"type-parameters-25",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetDbType(Object)',id:"-getdbtypeobject",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-70",level:6},{value:"Returns",id:"returns-60",level:5},{value:"Parameters",id:"parameters-63",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LookupDbType(Type, String, Boolean, out SqlMapper.ITypeHandler)',id:"-lookupdbtypetype-string-boolean-out-sqlmapperitypehandler",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-71",level:6},{value:"Returns",id:"returns-61",level:5},{value:"Parameters",id:"parameters-64",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> AsList&lt;T&gt;(IEnumerable&lt;T&gt;)',id:"-aslisttienumerablet",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-72",level:6},{value:"Returns",id:"returns-62",level:5},{value:"Parameters",id:"parameters-65",level:5},{value:"Type Parameters",id:"type-parameters-26",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Execute(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-executeidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-73",level:6},{value:"Returns",id:"returns-63",level:5},{value:"Parameters",id:"parameters-66",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Execute(IDbConnection, CommandDefinition)',id:"-executeidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-74",level:6},{value:"Returns",id:"returns-64",level:5},{value:"Parameters",id:"parameters-67",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteScalar(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-executescalaridbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-75",level:6},{value:"Returns",id:"returns-65",level:5},{value:"Parameters",id:"parameters-68",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteScalar&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-executescalartidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-76",level:6},{value:"Returns",id:"returns-66",level:5},{value:"Parameters",id:"parameters-69",level:5},{value:"Type Parameters",id:"type-parameters-27",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteScalar(IDbConnection, CommandDefinition)',id:"-executescalaridbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-77",level:6},{value:"Returns",id:"returns-67",level:5},{value:"Parameters",id:"parameters-70",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteScalar&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-executescalartidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-78",level:6},{value:"Returns",id:"returns-68",level:5},{value:"Parameters",id:"parameters-71",level:5},{value:"Type Parameters",id:"type-parameters-28",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteReader(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-executereaderidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-79",level:6},{value:"Returns",id:"returns-69",level:5},{value:"Parameters",id:"parameters-72",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteReader(IDbConnection, CommandDefinition)',id:"-executereaderidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-80",level:6},{value:"Returns",id:"returns-70",level:5},{value:"Parameters",id:"parameters-73",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExecuteReader(IDbConnection, CommandDefinition, CommandBehavior)',id:"-executereaderidbconnection-commanddefinition-commandbehavior",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-81",level:6},{value:"Returns",id:"returns-71",level:5},{value:"Parameters",id:"parameters-74",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query(IDbConnection, String, Object, IDbTransaction, Boolean, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryidbconnection-string-object-idbtransaction-boolean-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-82",level:6},{value:"Returns",id:"returns-72",level:5},{value:"Parameters",id:"parameters-75",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirst(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-83",level:6},{value:"Returns",id:"returns-73",level:5},{value:"Parameters",id:"parameters-76",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefault(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstordefaultidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-84",level:6},{value:"Returns",id:"returns-74",level:5},{value:"Parameters",id:"parameters-77",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingle(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-85",level:6},{value:"Returns",id:"returns-75",level:5},{value:"Parameters",id:"parameters-78",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefault(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleordefaultidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-86",level:6},{value:"Returns",id:"returns-76",level:5},{value:"Parameters",id:"parameters-79",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Boolean, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querytidbconnection-string-object-idbtransaction-boolean-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-87",level:6},{value:"Returns",id:"returns-77",level:5},{value:"Parameters",id:"parameters-80",level:5},{value:"Type Parameters",id:"type-parameters-29",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirst&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirsttidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-88",level:6},{value:"Returns",id:"returns-78",level:5},{value:"Parameters",id:"parameters-81",level:5},{value:"Type Parameters",id:"type-parameters-30",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefault&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstordefaulttidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-89",level:6},{value:"Returns",id:"returns-79",level:5},{value:"Parameters",id:"parameters-82",level:5},{value:"Type Parameters",id:"type-parameters-31",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingle&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingletidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-90",level:6},{value:"Returns",id:"returns-80",level:5},{value:"Parameters",id:"parameters-83",level:5},{value:"Type Parameters",id:"type-parameters-32",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefault&lt;T&gt;(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleordefaulttidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-91",level:6},{value:"Returns",id:"returns-81",level:5},{value:"Parameters",id:"parameters-84",level:5},{value:"Type Parameters",id:"type-parameters-33",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query(IDbConnection, Type, String, Object, IDbTransaction, Boolean, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryidbconnection-type-string-object-idbtransaction-boolean-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-92",level:6},{value:"Returns",id:"returns-82",level:5},{value:"Parameters",id:"parameters-85",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirst(IDbConnection, Type, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-93",level:6},{value:"Returns",id:"returns-83",level:5},{value:"Parameters",id:"parameters-86",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefault(IDbConnection, Type, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-queryfirstordefaultidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-94",level:6},{value:"Returns",id:"returns-84",level:5},{value:"Parameters",id:"parameters-87",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingle(IDbConnection, Type, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-95",level:6},{value:"Returns",id:"returns-85",level:5},{value:"Parameters",id:"parameters-88",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefault(IDbConnection, Type, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querysingleordefaultidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-96",level:6},{value:"Returns",id:"returns-86",level:5},{value:"Parameters",id:"parameters-89",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-querytidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-97",level:6},{value:"Returns",id:"returns-87",level:5},{value:"Parameters",id:"parameters-90",level:5},{value:"Type Parameters",id:"type-parameters-34",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirst&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-queryfirsttidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-98",level:6},{value:"Returns",id:"returns-88",level:5},{value:"Parameters",id:"parameters-91",level:5},{value:"Type Parameters",id:"type-parameters-35",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryFirstOrDefault&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-queryfirstordefaulttidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-99",level:6},{value:"Returns",id:"returns-89",level:5},{value:"Parameters",id:"parameters-92",level:5},{value:"Type Parameters",id:"type-parameters-36",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingle&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-querysingletidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-100",level:6},{value:"Returns",id:"returns-90",level:5},{value:"Parameters",id:"parameters-93",level:5},{value:"Type Parameters",id:"type-parameters-37",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QuerySingleOrDefault&lt;T&gt;(IDbConnection, CommandDefinition)',id:"-querysingleordefaulttidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-101",level:6},{value:"Returns",id:"returns-91",level:5},{value:"Parameters",id:"parameters-94",level:5},{value:"Type Parameters",id:"type-parameters-38",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryMultiple(IDbConnection, String, Object, IDbTransaction, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querymultipleidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-102",level:6},{value:"Returns",id:"returns-92",level:5},{value:"Parameters",id:"parameters-95",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QueryMultiple(IDbConnection, CommandDefinition)',id:"-querymultipleidbconnection-commanddefinition",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-103",level:6},{value:"Returns",id:"returns-93",level:5},{value:"Parameters",id:"parameters-96",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query&lt;TFirst, TSecond, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querytfirst-tsecond-treturnidbconnection-string-functfirst-tsecond-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-104",level:6},{value:"Returns",id:"returns-94",level:5},{value:"Parameters",id:"parameters-97",level:5},{value:"Type Parameters",id:"type-parameters-39",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query&lt;TFirst, TSecond, TThird, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querytfirst-tsecond-tthird-treturnidbconnection-string-functfirst-tsecond-tthird-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-105",level:6},{value:"Returns",id:"returns-95",level:5},{value:"Parameters",id:"parameters-98",level:5},{value:"Type Parameters",id:"type-parameters-40",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query&lt;TFirst, TSecond, TThird, TFourth, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TFourth, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querytfirst-tsecond-tthird-tfourth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-106",level:6},{value:"Returns",id:"returns-96",level:5},{value:"Parameters",id:"parameters-99",level:5},{value:"Type Parameters",id:"type-parameters-41",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query&lt;TFirst, TSecond, TThird, TFourth, TFifth, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querytfirst-tsecond-tthird-tfourth-tfifth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-107",level:6},{value:"Returns",id:"returns-97",level:5},{value:"Parameters",id:"parameters-100",level:5},{value:"Type Parameters",id:"type-parameters-42",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querytfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-108",level:6},{value:"Returns",id:"returns-98",level:5},{value:"Parameters",id:"parameters-101",level:5},{value:"Type Parameters",id:"type-parameters-43",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&gt;(IDbConnection, String, Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querytfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-109",level:6},{value:"Returns",id:"returns-99",level:5},{value:"Parameters",id:"parameters-102",level:5},{value:"Type Parameters",id:"type-parameters-44",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Query&lt;TReturn&gt;(IDbConnection, String, Type[], Func&lt;Object[], TReturn&gt;, Object, IDbTransaction, Boolean, String, Nullable&lt;Int32&gt;, Nullable&lt;CommandType&gt;)',id:"-querytreturnidbconnection-string-type-funcobject-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-110",level:6},{value:"Returns",id:"returns-100",level:5},{value:"Parameters",id:"parameters-103",level:5},{value:"Type Parameters",id:"type-parameters-45",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ReadChar(Object)',id:"-readcharobject",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-111",level:6},{value:"Returns",id:"returns-101",level:5},{value:"Parameters",id:"parameters-104",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ReadNullableChar(Object)',id:"-readnullablecharobject",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-112",level:6},{value:"Returns",id:"returns-102",level:5},{value:"Parameters",id:"parameters-105",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> FindOrAddParameter(IDataParameterCollection, IDbCommand, String)',id:"-findoraddparameteridataparametercollection-idbcommand-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-113",level:6},{value:"Returns",id:"returns-103",level:5},{value:"Parameters",id:"parameters-106",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> PackListParameters(IDbCommand, String, Object)',id:"-packlistparametersidbcommand-string-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-114",level:6},{value:"Parameters",id:"parameters-107",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> SanitizeParameterValue(Object)',id:"-sanitizeparametervalueobject",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-115",level:6},{value:"Returns",id:"returns-104",level:5},{value:"Parameters",id:"parameters-108",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ReplaceLiterals(SqlMapper.IParameterLookup, IDbCommand)',id:"-replaceliteralssqlmapperiparameterlookup-idbcommand",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-116",level:6},{value:"Parameters",id:"parameters-109",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Format(Object)',id:"-formatobject",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-117",level:6},{value:"Returns",id:"returns-105",level:5},{value:"Parameters",id:"parameters-110",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> CreateParamInfoGenerator(SqlMapper.Identity, Boolean, Boolean)',id:"-createparaminfogeneratorsqlmapperidentity-boolean-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-118",level:6},{value:"Returns",id:"returns-106",level:5},{value:"Parameters",id:"parameters-111",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetTypeMap(Type)',id:"-gettypemaptype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-119",level:6},{value:"Returns",id:"returns-107",level:5},{value:"Parameters",id:"parameters-112",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> SetTypeMap(Type, SqlMapper.ITypeMap)',id:"-settypemaptype-sqlmapperitypemap",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-120",level:6},{value:"Parameters",id:"parameters-113",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetTypeDeserializer(Type, IDataReader, Int32, Int32, Boolean)',id:"-gettypedeserializertype-idatareader-int32-int32-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-121",level:6},{value:"Returns",id:"returns-108",level:5},{value:"Parameters",id:"parameters-114",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ThrowDataException(Exception, Int32, IDataReader, Object)',id:"-throwdataexceptionexception-int32-idatareader-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-122",level:6},{value:"Parameters",id:"parameters-115",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> AsTableValuedParameter(DataTable, String)',id:"-astablevaluedparameterdatatable-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-123",level:6},{value:"Returns",id:"returns-109",level:5},{value:"Parameters",id:"parameters-116",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> SetTypeName(DataTable, String)',id:"-settypenamedatatable-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-124",level:6},{value:"Parameters",id:"parameters-117",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetTypeName(DataTable)',id:"-gettypenamedatatable",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-125",level:6},{value:"Returns",id:"returns-110",level:5},{value:"Parameters",id:"parameters-118",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> AsTableValuedParameter&lt;T&gt;(IEnumerable&lt;T&gt;, String)',id:"-astablevaluedparametertienumerablet-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-126",level:6},{value:"Returns",id:"returns-111",level:5},{value:"Parameters",id:"parameters-119",level:5},{value:"Type Parameters",id:"type-parameters-46",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Parse&lt;T&gt;(IDataReader)',id:"-parsetidatareader",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-127",level:6},{value:"Returns",id:"returns-112",level:5},{value:"Parameters",id:"parameters-120",level:5},{value:"Type Parameters",id:"type-parameters-47",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Parse(IDataReader, Type)',id:"-parseidatareader-type",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-128",level:6},{value:"Returns",id:"returns-113",level:5},{value:"Parameters",id:"parameters-121",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Parse(IDataReader)',id:"-parseidatareader",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-129",level:6},{value:"Returns",id:"returns-114",level:5},{value:"Parameters",id:"parameters-122",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetRowParser(IDataReader, Type, Int32, Int32, Boolean)',id:"-getrowparseridatareader-type-int32-int32-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-130",level:6},{value:"Returns",id:"returns-115",level:5},{value:"Parameters",id:"parameters-123",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetRowParser&lt;T&gt;(IDataReader, Type, Int32, Int32, Boolean)',id:"-getrowparsertidatareader-type-int32-int32-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-131",level:6},{value:"Returns",id:"returns-116",level:5},{value:"Parameters",id:"parameters-124",level:5},{value:"Type Parameters",id:"type-parameters-48",level:5},{value:"Events",id:"events",level:2},{value:"QueryCachePurged",id:"querycachepurged",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-132",level:6},{value:"Event Type",id:"event-type",level:5}],s={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-sqlmapper"},(0,r.kt)(i.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," SqlMapper"),(0,r.kt)("p",null,"Dapper, a light weight object mapper for ADO.NET"),(0,r.kt)("h6",{id:"assembly-servicestackormlitedll"},(0,r.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.OrmLite.dll"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/UdtTypeHandler.cs#L6"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static class SqlMapper : object\n")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"-connectionstringcomparer"},(0,r.kt)(i.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," ConnectionStringComparer"),(0,r.kt)("p",null,"How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.\nProviding a custom implementation can be useful for allowing multi-tenancy databases with identical\nschema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings\n","<","strong",">","MUST","<","/strong",">"," yield the same hash-code."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L3670"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEqualityComparer<string> ConnectionStringComparer { get; set; }\n")),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("h3",{id:"-typemapprovider"},(0,r.kt)(i.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," TypeMapProvider"),(0,r.kt)("p",null,"Gets type-map for the given type"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L2954"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Func<Type, SqlMapper.ITypeMap> TypeMapProvider\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"-queryasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a query asynchronously using Task."),(0,r.kt)("p",null,"Note: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L25"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<IEnumerable<dynamic>> QueryAsync(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<System.Object>>")),(0,r.kt)("h5",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds).\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-queryasyncidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a query asynchronously using Task."),(0,r.kt)("p",null,"Note: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L34"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<IEnumerable<dynamic>> QueryAsync(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<System.Object>>")),(0,r.kt)("h5",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-queryfirstasyncidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstAsync(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L43"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<dynamic> QueryFirstAsync(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-queryfirstordefaultasyncidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefaultAsync(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L52"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<dynamic> QueryFirstOrDefaultAsync(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-querysingleasyncidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleAsync(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L61"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<dynamic> QuerySingleAsync(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-querysingleordefaultasyncidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefaultAsync(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L70"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<dynamic> QuerySingleOrDefaultAsync(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-queryasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L87"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<IEnumerable<T>> QueryAsync<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<T>>>"),":\nA sequence of data of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of results to return.")))),(0,r.kt)("h3",{id:"-queryfirstasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstAsync","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L100"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> QueryFirstAsync<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>")),(0,r.kt)("h5",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of result to return.")))),(0,r.kt)("h3",{id:"-queryfirstordefaultasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefaultAsync","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L113"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> QueryFirstOrDefaultAsync<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>")),(0,r.kt)("h5",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of result to return.")))),(0,r.kt)("h3",{id:"-querysingleasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleAsync","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L126"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> QuerySingleAsync<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>")),(0,r.kt)("h5",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-3"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of result to return.")))),(0,r.kt)("h3",{id:"-querysingleordefaultasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefaultAsync","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L139"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> QuerySingleOrDefaultAsync<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>")),(0,r.kt)("h5",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-4"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-queryfirstasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstAsync(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L151"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<dynamic> QueryFirstAsync(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryfirstordefaultasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefaultAsync(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L163"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<dynamic> QueryFirstOrDefaultAsync(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querysingleasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleAsync(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L175"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<dynamic> QuerySingleAsync(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querysingleordefaultasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefaultAsync(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L187"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<dynamic> QuerySingleOrDefaultAsync(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-14"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L201"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<IEnumerable<object>> QueryAsync(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<System.Object>>")),(0,r.kt)("h5",{id:"parameters-15"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryfirstasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L218"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> QueryFirstAsync(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-16"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryfirstordefaultasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefaultAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L234"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> QueryFirstOrDefaultAsync(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-17"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querysingleasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L250"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> QuerySingleAsync(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-18"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querysingleordefaultasyncidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefaultAsync(IDbConnection, Type, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L266"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> QuerySingleOrDefaultAsync(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-19"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryasynctidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L282"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<IEnumerable<T>> QueryAsync<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<T>>>"),":\nA sequence of data of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-20"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-5"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-queryasyncidbconnection-type-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync(IDbConnection, Type, CommandDefinition)"),(0,r.kt)("p",null,"Execute a query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L291"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<IEnumerable<object>> QueryAsync(this IDbConnection cnn, Type type, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-21"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<System.Object>>")),(0,r.kt)("h5",{id:"parameters-21"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryfirstasyncidbconnection-type-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstAsync(IDbConnection, Type, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L300"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> QueryFirstAsync(this IDbConnection cnn, Type type, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-22"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-22"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryfirstasynctidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstAsync","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L309"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> QueryFirstAsync<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-23"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>")),(0,r.kt)("h5",{id:"parameters-23"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-6"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-queryfirstordefaultasyncidbconnection-type-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefaultAsync(IDbConnection, Type, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L318"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> QueryFirstOrDefaultAsync(this IDbConnection cnn, Type type, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-24"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-24"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryfirstordefaultasynctidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefaultAsync","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L327"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> QueryFirstOrDefaultAsync<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-25"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>")),(0,r.kt)("h5",{id:"parameters-25"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-7"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-querysingleasyncidbconnection-type-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleAsync(IDbConnection, Type, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L336"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> QuerySingleAsync(this IDbConnection cnn, Type type, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-26"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-26"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querysingleasynctidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleAsync","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L345"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> QuerySingleAsync<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-27"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>")),(0,r.kt)("h5",{id:"parameters-27"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-8"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-querysingleordefaultasyncidbconnection-type-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefaultAsync(IDbConnection, Type, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L354"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> QuerySingleOrDefaultAsync(this IDbConnection cnn, Type type, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-28"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>")),(0,r.kt)("h5",{id:"parameters-28"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querysingleordefaultasynctidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefaultAsync","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a single-row query asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L363"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> QuerySingleOrDefaultAsync<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-29"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>")),(0,r.kt)("h5",{id:"parameters-29"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-9"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-executeasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteAsync(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a command asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-33"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L538"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<int> ExecuteAsync(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-30"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Int32>"),": The number of rows affected."),(0,r.kt)("h5",{id:"parameters-30"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executeasyncidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteAsync(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a command asynchronously using Task."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-34"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L547"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<int> ExecuteAsync(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-31"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Int32>"),": The number of rows affected."),(0,r.kt)("h5",{id:"parameters-31"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-treturnidbconnection-string-functfirst-tsecond-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 2 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-35"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L706"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-32"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-32"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-10"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-treturnidbconnection-commanddefinition-functfirst-tsecond-treturn-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TReturn",">","(IDbConnection, CommandDefinition, Func","<","TFirst, TSecond, TReturn",">",", String)"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 2 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-36"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L722"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TReturn>(this IDbConnection cnn, CommandDefinition command, Func<TFirst, TSecond, TReturn> map, string splitOn = "Id")\n')),(0,r.kt)("h5",{id:"returns-33"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-33"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-11"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-treturnidbconnection-string-functfirst-tsecond-tthird-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 3 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-37"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L743"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-34"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-34"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-12"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-treturn-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TReturn",">","(IDbConnection, CommandDefinition, Func","<","TFirst, TSecond, TThird, TReturn",">",", String)"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 3 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-38"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L760"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TReturn>(this IDbConnection cnn, CommandDefinition command, Func<TFirst, TSecond, TThird, TReturn> map, string splitOn = "Id")\n')),(0,r.kt)("h5",{id:"returns-35"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-35"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-13"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-tfourth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TFourth, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TFourth, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 4 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-39"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L782"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TFourth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-36"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-36"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-14"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-tfourth-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-tfourth-treturn-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TFourth, TReturn",">","(IDbConnection, CommandDefinition, Func","<","TFirst, TSecond, TThird, TFourth, TReturn",">",", String)"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 4 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-40"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L800"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TReturn>(this IDbConnection cnn, CommandDefinition command, Func<TFirst, TSecond, TThird, TFourth, TReturn> map, string splitOn = "Id")\n')),(0,r.kt)("h5",{id:"returns-37"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-37"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-15"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TFourth, TFifth, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 5 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-41"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L823"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-38"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-38"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-16"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-tfourth-tfifth-treturn-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TFourth, TFifth, TReturn",">","(IDbConnection, CommandDefinition, Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TReturn",">",", String)"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 5 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-42"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L842"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(this IDbConnection cnn, CommandDefinition command, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, string splitOn = "Id")\n')),(0,r.kt)("h5",{id:"returns-39"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-39"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-17"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 6 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-43"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L866"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-40"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-40"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TSixth>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-18"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSixth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The sixth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturn-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn",">","(IDbConnection, CommandDefinition, Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn",">",", String)"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 6 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-44"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L886"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(this IDbConnection cnn, CommandDefinition command, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, string splitOn = "Id")\n')),(0,r.kt)("h5",{id:"returns-41"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-41"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TSixth>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-19"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSixth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The sixth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with 7 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-45"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L911"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-42"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-42"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TSixth>,<TSeventh>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-20"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSixth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The sixth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSeventh")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The seventh type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturnidbconnection-commanddefinition-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturn-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn",">","(IDbConnection, CommandDefinition, Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn",">",", String)"),(0,r.kt)("p",null,"Perform an asynchronous multi-mapping query with 7 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-46"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L932"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(this IDbConnection cnn, CommandDefinition command, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, string splitOn = "Id")\n')),(0,r.kt)("h5",{id:"returns-43"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-43"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TSixth>,<TSeventh>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-21"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSixth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The sixth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSeventh")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The seventh type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-queryasynctreturnidbconnection-string-type-funcobject-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryAsync","<","TReturn",">","(IDbConnection, String, Type[], Func","<","Object[], TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a asynchronous multi-mapping query with an arbitrary number of input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-47"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L974"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static Task<IEnumerable<TReturn>> QueryAsync<TReturn>(this IDbConnection cnn, string sql, Type[] types, Func<object[], TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-44"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IEnumerable<<TReturn>>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-44"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type[]")," | ",(0,r.kt)("em",{parentName:"p"},"types")," | Array of types in the recordset."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<System.Object[],<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-22"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-querymultipleasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryMultipleAsync(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a command that returns multiple result sets, and access each in turn."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-48"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1029"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<SqlMapper.GridReader> QueryMultipleAsync(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-45"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<ServiceStack.OrmLite.Dapper.SqlMapper.GridReader>")),(0,r.kt)("h5",{id:"parameters-45"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querymultipleasyncidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryMultipleAsync(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a command that returns multiple result sets, and access each in turn."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-49"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1037"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static async Task<SqlMapper.GridReader> QueryMultipleAsync(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-46"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<ServiceStack.OrmLite.Dapper.SqlMapper.GridReader>")),(0,r.kt)("h5",{id:"parameters-46"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute for this query."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executereaderasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteReaderAsync(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute parameterized SQL and return an ","<",'see cref="!:IDataReader"',">","<","/see",">","."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-50"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1103"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<IDataReader> ExecuteReaderAsync(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-47"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IDataReader>"),": An ","<",'see cref="!:IDataReader"',">","<","/see",">"," that can be used to iterate over the results of the SQL query."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h5",{id:"parameters-47"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this command."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this command."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executereaderasyncdbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteReaderAsync(DbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute parameterized SQL and return a ","<",'see cref="!:DbDataReader"',">","<","/see",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-51"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1115"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<DbDataReader> ExecuteReaderAsync(this DbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-48"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<DbDataReader>")),(0,r.kt)("h5",{id:"parameters-48"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"DbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executereaderasyncidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteReaderAsync(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute parameterized SQL and return an ","<",'see cref="!:IDataReader"',">","<","/see",">","."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-52"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1128"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<IDataReader> ExecuteReaderAsync(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-49"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IDataReader>"),": An ","<",'see cref="!:IDataReader"',">","<","/see",">"," that can be used to iterate over the results of the SQL query."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h5",{id:"parameters-49"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executereaderasyncdbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteReaderAsync(DbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute parameterized SQL and return a ","<",'see cref="!:DbDataReader"',">","<","/see",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-53"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1136"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<DbDataReader> ExecuteReaderAsync(this DbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-50"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<DbDataReader>")),(0,r.kt)("h5",{id:"parameters-50"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"DbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executereaderasyncidbconnection-commanddefinition-commandbehavior"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteReaderAsync(IDbConnection, CommandDefinition, CommandBehavior)"),(0,r.kt)("p",null,"Execute parameterized SQL and return an ","<",'see cref="!:IDataReader"',">","<","/see",">","."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-54"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1150"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<IDataReader> ExecuteReaderAsync(this IDbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior)\n")),(0,r.kt)("h5",{id:"returns-51"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<IDataReader>"),": An ","<",'see cref="!:IDataReader"',">","<","/see",">"," that can be used to iterate over the results of the SQL query."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h5",{id:"parameters-51"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandBehavior")," | ",(0,r.kt)("em",{parentName:"p"},"commandBehavior")," | The ","<",'see cref="!:CommandBehavior"',">","<","/see",">"," flags for this reader."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executereaderasyncdbconnection-commanddefinition-commandbehavior"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteReaderAsync(DbConnection, CommandDefinition, CommandBehavior)"),(0,r.kt)("p",null,"Execute parameterized SQL and return a ","<",'see cref="!:DbDataReader"',">","<","/see",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-55"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1159"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<DbDataReader> ExecuteReaderAsync(this DbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior)\n")),(0,r.kt)("h5",{id:"returns-52"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<DbDataReader>")),(0,r.kt)("h5",{id:"parameters-52"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"DbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandBehavior")," | ",(0,r.kt)("em",{parentName:"p"},"commandBehavior")," | The ","<",'see cref="!:CommandBehavior"',">","<","/see",">"," flags for this reader."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executescalarasyncidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteScalarAsync(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute parameterized SQL that selects a single value."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-56"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1194"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> ExecuteScalarAsync(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-53"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>"),": The first cell returned, as ","<",'see cref="!:System.Object"',">","<","/see",">","."),(0,r.kt)("h5",{id:"parameters-53"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executescalarasynctidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteScalarAsync","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute parameterized SQL that selects a single value."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-57"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1208"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> ExecuteScalarAsync<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-54"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>"),": The first cell returned, as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-54"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-23"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-executescalarasyncidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteScalarAsync(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute parameterized SQL that selects a single value."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-58"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1217"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<object> ExecuteScalarAsync(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-55"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<System.Object>"),": The first cell selected as ","<",'see cref="!:System.Object"',">","<","/see",">","."),(0,r.kt)("h5",{id:"parameters-55"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executescalarasynctidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteScalarAsync","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute parameterized SQL that selects a single value."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-59"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.Async.cs#L1227"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<T> ExecuteScalarAsync<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-56"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Task<<T>>"),": The first cell selected as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-56"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-24"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-purgequerycache"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," PurgeQueryCache()"),(0,r.kt)("p",null,"Purge the query cache"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-60"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L102"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void PurgeQueryCache()\n")),(0,r.kt)("h3",{id:"-getcachedsqlcount"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetCachedSQLCount()"),(0,r.kt)("p",null,"Return a count of all the cached queries by Dapper"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-61"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L123"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int GetCachedSQLCount()\n")),(0,r.kt)("h5",{id:"returns-57"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h3",{id:"-getcachedsqlint32"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetCachedSQL(Int32)"),(0,r.kt)("p",null,"Return a list of all the queries cached by Dapper"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-62"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L133"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEnumerable<Tuple<string, string, int>> GetCachedSQL(int ignoreHitCountAbove = null)\n")),(0,r.kt)("h5",{id:"returns-58"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<Tuple<System.String,System.String,System.Int32>>")),(0,r.kt)("h5",{id:"parameters-57"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Int32")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"ignoreHitCountAbove"))))),(0,r.kt)("h3",{id:"-gethashcollissions"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetHashCollissions()"),(0,r.kt)("p",null,"Deep diagnostics only: find any hash collisions in the cache"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-63"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L145"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEnumerable<Tuple<int, int>> GetHashCollissions()\n")),(0,r.kt)("h5",{id:"returns-59"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<Tuple<System.Int32,System.Int32>>")),(0,r.kt)("h3",{id:"-resettypehandlers"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ResetTypeHandlers()"),(0,r.kt)("p",null,"Clear the registered type handlers."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-64"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L214"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void ResetTypeHandlers()\n")),(0,r.kt)("h3",{id:"-addtypemaptype-dbtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," AddTypeMap(Type, DbType)"),(0,r.kt)("p",null,"Configure the specified type to be mapped to a given db-type."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-65"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L230"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void AddTypeMap(Type type, DbType dbType)\n")),(0,r.kt)("h5",{id:"parameters-58"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to map from.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"DbType")," | ",(0,r.kt)("em",{parentName:"p"},"dbType")," | The database type to map to."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-removetypemaptype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," RemoveTypeMap(Type)"),(0,r.kt)("p",null,"Removes the specified type from the Type/DbType mapping table."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-66"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L244"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void RemoveTypeMap(Type type)\n")),(0,r.kt)("h5",{id:"parameters-59"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to remove from the current map.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-addtypehandlertype-sqlmapperitypehandler"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," AddTypeHandler(Type, SqlMapper.ITypeHandler)"),(0,r.kt)("p",null,"Configure the specified type to be processed by a custom handler."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-67"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L262"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void AddTypeHandler(Type type, SqlMapper.ITypeHandler handler)\n")),(0,r.kt)("h5",{id:"parameters-60"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to handle.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler"},"ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler")," | ",(0,r.kt)("em",{parentName:"p"},"handler")," | The handler to process the ","<",'code data-dev-comment-type="paramref" class="paramref"',">","type","<","/code",">","."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-addtypehandlerimpltype-sqlmapperitypehandler-boolean"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," AddTypeHandlerImpl(Type, SqlMapper.ITypeHandler, Boolean)"),(0,r.kt)("p",null,"Configure the specified type to be processed by a custom handler."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-68"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L272"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void AddTypeHandlerImpl(Type type, SqlMapper.ITypeHandler handler, bool clone)\n")),(0,r.kt)("h5",{id:"parameters-61"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to handle.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler"},"ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler")," | ",(0,r.kt)("em",{parentName:"p"},"handler")," | The handler to process the ","<",'code data-dev-comment-type="paramref" class="paramref"',">","type","<","/code",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"clone")," | Whether to clone the current type handler map."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-addtypehandlertsqlmappertypehandlert"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," AddTypeHandler","<","T",">","(SqlMapper.TypeHandler","<","T",">",")"),(0,r.kt)("p",null,"Configure the specified type to be processed by a custom handler."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-69"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L322"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void AddTypeHandler<T>(SqlMapper.TypeHandler<T> handler)\n")),(0,r.kt)("h5",{id:"parameters-62"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.TypeHandler%60T%60"},"ServiceStack.OrmLite.Dapper.SqlMapper.TypeHandler","<","T",">")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"handler")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The handler for the type ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">",".")))),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-25"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to handle.")))),(0,r.kt)("h3",{id:"-getdbtypeobject"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetDbType(Object)"),(0,r.kt)("p",null,"Get the DbType that maps to a given value."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-70"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L334"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static DbType GetDbType(object value)\n")),(0,r.kt)("h5",{id:"returns-60"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DbType")),(0,r.kt)("h5",{id:"parameters-63"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object to get a corresponding database type for.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-lookupdbtypetype-string-boolean-out-sqlmapperitypehandler"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LookupDbType(Type, String, Boolean, out SqlMapper.ITypeHandler)"),(0,r.kt)("p",null,"OBSOLETE: For internal usage only. Lookup the DbType and handler for a given Type and member"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-71"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L351"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static DbType LookupDbType(Type type, string name, bool demand, out SqlMapper.ITypeHandler handler)\n")),(0,r.kt)("h5",{id:"returns-61"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DbType")),(0,r.kt)("h5",{id:"parameters-64"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to lookup.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"name")," | The name (for error messages)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"demand")," | Whether to demand a value (throw if missing)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler"},"ServiceStack.OrmLite.Dapper.SqlMapper.ITypeHandler")," | ",(0,r.kt)("em",{parentName:"p"},"handler")," | The handler for ","<",'code data-dev-comment-type="paramref" class="paramref"',">","type","<","/code",">","."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-aslisttienumerablet"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," AsList","<","T",">","(IEnumerable","<","T",">",")"),(0,r.kt)("p",null,"Obtains the data as a list; if it is ",(0,r.kt)("em",{parentName:"p"},"already")," a list, the original object is returned without\nany duplication; otherwise, ToList() is invoked."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-72"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L425"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static List<T> AsList<T>(this IEnumerable<T> source)\n")),(0,r.kt)("h5",{id:"returns-62"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"List<<T>>")),(0,r.kt)("h5",{id:"parameters-65"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IEnumerable<<T>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"source")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The enumerable to return as a list.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-26"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of element in the list.")))),(0,r.kt)("h3",{id:"-executeidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Execute(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute parameterized SQL."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-73"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L438"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int Execute(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-63"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32"),": The number of rows affected."),(0,r.kt)("h5",{id:"parameters-66"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executeidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Execute(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute parameterized SQL."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-74"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L450"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int Execute(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-64"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32"),": The number of rows affected."),(0,r.kt)("h5",{id:"parameters-67"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executescalaridbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteScalar(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute parameterized SQL that selects a single value."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-75"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L462"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static object ExecuteScalar(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-65"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object"),": The first cell selected as ","<",'see cref="!:System.Object"',">","<","/see",">","."),(0,r.kt)("h5",{id:"parameters-68"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executescalartidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteScalar","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute parameterized SQL that selects a single value."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-76"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L479"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T ExecuteScalar<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-66"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),": The first cell returned, as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-69"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this command."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-27"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-executescalaridbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteScalar(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute parameterized SQL that selects a single value."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-77"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L491"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static object ExecuteScalar(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-67"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object"),": The first cell selected as ","<",'see cref="!:System.Object"',">","<","/see",">","."),(0,r.kt)("h5",{id:"parameters-70"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executescalartidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteScalar","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute parameterized SQL that selects a single value."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-78"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L501"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T ExecuteScalar<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-68"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),": The first cell selected as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-71"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-28"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to return.")))),(0,r.kt)("h3",{id:"-executereaderidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteReader(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute parameterized SQL and return an ","<",'see cref="!:IDataReader"',">","<","/see",">","."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-79"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L596"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IDataReader ExecuteReader(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-69"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IDataReader"),": An ","<",'see cref="!:IDataReader"',">","<","/see",">"," that can be used to iterate over the results of the SQL query."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h5",{id:"parameters-72"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this command."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this command."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executereaderidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteReader(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute parameterized SQL and return an ","<",'see cref="!:IDataReader"',">","<","/see",">","."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-80"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L613"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IDataReader ExecuteReader(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-70"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IDataReader"),": An ","<",'see cref="!:IDataReader"',">","<","/see",">"," that can be used to iterate over the results of the SQL query."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h5",{id:"parameters-73"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-executereaderidbconnection-commanddefinition-commandbehavior"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExecuteReader(IDbConnection, CommandDefinition, CommandBehavior)"),(0,r.kt)("p",null,"Execute parameterized SQL and return an ","<",'see cref="!:IDataReader"',">","<","/see",">","."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-81"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L630"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IDataReader ExecuteReader(this IDbConnection cnn, CommandDefinition command, CommandBehavior commandBehavior)\n")),(0,r.kt)("h5",{id:"returns-71"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IDataReader"),": An ","<",'see cref="!:IDataReader"',">","<","/see",">"," that can be used to iterate over the results of the SQL query."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("h5",{id:"parameters-74"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to execute on.")))),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandBehavior")," | ",(0,r.kt)("em",{parentName:"p"},"commandBehavior")," | The ","<",'see cref="!:CommandBehavior"',">","<","/see",">"," flags for this reader."),(0,r.kt)("p",null,"This is typically used when the results of a query are not processed by Dapper, for example, used to fill a ","<",'see cref="!:DataTable"',">","<","/see",">","\nor ","<",'xref href="DataSet" data-throw-if-not-resolved="false"',">","<","/xref",">","."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryidbconnection-string-object-idbtransaction-boolean-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query(IDbConnection, String, Object, IDbTransaction, Boolean, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Return a sequence of dynamic objects with properties matching the columns."),(0,r.kt)("p",null,"Note: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-82"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L647"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEnumerable<dynamic> Query(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, bool buffered = true, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-72"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<System.Object>")),(0,r.kt)("h5",{id:"parameters-75"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds).\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute.\nNote: each row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-queryfirstidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirst(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Return a dynamic object with properties matching the columns."),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-83"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L660"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static dynamic QueryFirst(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-73"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,r.kt)("h5",{id:"parameters-76"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds).\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-queryfirstordefaultidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefault(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Return a dynamic object with properties matching the columns."),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-84"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L673"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static dynamic QueryFirstOrDefault(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-74"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,r.kt)("h5",{id:"parameters-77"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds).\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-querysingleidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingle(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Return a dynamic object with properties matching the columns."),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-85"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L686"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static dynamic QuerySingle(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-75"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,r.kt)("h5",{id:"parameters-78"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds).\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-querysingleordefaultidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefault(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Return a dynamic object with properties matching the columns."),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-86"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L699"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static dynamic QuerySingleOrDefault(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-76"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,r.kt)("h5",{id:"parameters-79"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null,"Note: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds).\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute.\nNote: the row can be accessed via ",'"',"dynamic",'"',", or by casting to an IDictionary","<","string,object",">","\n|"),(0,r.kt)("h3",{id:"-querytidbconnection-string-object-idbtransaction-boolean-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query","<","T",">","(IDbConnection, String, Object, IDbTransaction, Boolean, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-87"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L717"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEnumerable<T> Query<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, bool buffered = true, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-77"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<T>>"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-80"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-29"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of results to return.")))),(0,r.kt)("h3",{id:"-queryfirsttidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirst","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a single-row query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-88"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L738"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T QueryFirst<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-78"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-81"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-30"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of result to return.")))),(0,r.kt)("h3",{id:"-queryfirstordefaulttidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefault","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a single-row query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-89"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L758"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T QueryFirstOrDefault<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-79"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-82"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-31"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of result to return.")))),(0,r.kt)("h3",{id:"-querysingletidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingle","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a single-row query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-90"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L778"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T QuerySingle<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-80"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-83"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-32"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of result to return.")))),(0,r.kt)("h3",{id:"-querysingleordefaulttidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefault","<","T",">","(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a single-row query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-91"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L798"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T QuerySingleOrDefault<T>(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-81"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-84"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-33"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of result to return.")))),(0,r.kt)("h3",{id:"-queryidbconnection-type-string-object-idbtransaction-boolean-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query(IDbConnection, Type, String, Object, IDbTransaction, Boolean, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a single-row query, returning the data typed as ","<",'code data-dev-comment-type="paramref" class="paramref"',">","type","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-92"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L820"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEnumerable<object> Query(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, bool buffered = true, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-82"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<System.Object>"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-85"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryfirstidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirst(IDbConnection, Type, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a single-row query, returning the data typed as ","<",'code data-dev-comment-type="paramref" class="paramref"',">","type","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-93"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L843"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static object QueryFirst(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-83"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-86"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-queryfirstordefaultidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefault(IDbConnection, Type, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a single-row query, returning the data typed as ","<",'code data-dev-comment-type="paramref" class="paramref"',">","type","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-94"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L865"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static object QueryFirstOrDefault(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-84"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-87"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querysingleidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingle(IDbConnection, Type, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a single-row query, returning the data typed as ","<",'code data-dev-comment-type="paramref" class="paramref"',">","type","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-95"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L887"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static object QuerySingle(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-85"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-88"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querysingleordefaultidbconnection-type-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefault(IDbConnection, Type, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Executes a single-row query, returning the data typed as ","<",'code data-dev-comment-type="paramref" class="paramref"',">","type","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-96"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L909"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static object QuerySingleOrDefault(this IDbConnection cnn, Type type, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-86"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object"),":\nA sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-89"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to return."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for the query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to pass, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use, if any."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | The command timeout (in seconds)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | The type of command to execute."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querytidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Executes a query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-97"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L926"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEnumerable<T> Query<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-87"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<T>>"),":\nA sequence of data of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-90"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-34"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of results to return.")))),(0,r.kt)("h3",{id:"-queryfirsttidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirst","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Executes a query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-98"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L942"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T QueryFirst<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-88"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),":\nA single instance or null of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-91"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-35"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of results to return.")))),(0,r.kt)("h3",{id:"-queryfirstordefaulttidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryFirstOrDefault","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Executes a query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-99"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L955"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T QueryFirstOrDefault<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-89"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),":\nA single or null instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-92"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-36"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of results to return.")))),(0,r.kt)("h3",{id:"-querysingletidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingle","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Executes a query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-100"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L968"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T QuerySingle<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-90"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),":\nA single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-93"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-37"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of results to return.")))),(0,r.kt)("h3",{id:"-querysingleordefaulttidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QuerySingleOrDefault","<","T",">","(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Executes a query, returning the data typed as ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","T","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-101"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L981"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static T QuerySingleOrDefault<T>(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-91"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<T>"),":\nA single instance of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is\ncreated per row, and a direct column-name===member-name mapping is assumed (case insensitive)."),(0,r.kt)("h5",{id:"parameters-94"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command used to query on this connection."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-38"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of results to return.")))),(0,r.kt)("h3",{id:"-querymultipleidbconnection-string-object-idbtransaction-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryMultiple(IDbConnection, String, Object, IDbTransaction, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Execute a command that returns multiple result sets, and access each in turn."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-102"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L993"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static SqlMapper.GridReader QueryMultiple(this IDbConnection cnn, string sql, object param = null, IDbTransaction transaction = null, int? commandTimeout = null, CommandType? commandType = null)\n")),(0,r.kt)("h5",{id:"returns-92"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.GridReader"},"ServiceStack.OrmLite.Dapper.SqlMapper.GridReader")),(0,r.kt)("h5",{id:"parameters-95"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querymultipleidbconnection-commanddefinition"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QueryMultiple(IDbConnection, CommandDefinition)"),(0,r.kt)("p",null,"Execute a command that returns multiple result sets, and access each in turn."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-103"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1004"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static SqlMapper.GridReader QueryMultiple(this IDbConnection cnn, CommandDefinition command)\n")),(0,r.kt)("h5",{id:"returns-93"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.GridReader"},"ServiceStack.OrmLite.Dapper.SqlMapper.GridReader")),(0,r.kt)("h5",{id:"parameters-96"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"ServiceStack.OrmLite.Dapper.CommandDefinition")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to execute for this query."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-querytfirst-tsecond-treturnidbconnection-string-functfirst-tsecond-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query","<","TFirst, TSecond, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a multi-mapping query with 2 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-104"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1256"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static IEnumerable<TReturn> Query<TFirst, TSecond, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-94"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<TReturn>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-97"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-39"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-querytfirst-tsecond-tthird-treturnidbconnection-string-functfirst-tsecond-tthird-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query","<","TFirst, TSecond, TThird, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a multi-mapping query with 3 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-105"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1277"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static IEnumerable<TReturn> Query<TFirst, TSecond, TThird, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-95"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<TReturn>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-98"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-40"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-querytfirst-tsecond-tthird-tfourth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query","<","TFirst, TSecond, TThird, TFourth, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TFourth, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a multi-mapping query with 4 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-106"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1299"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static IEnumerable<TReturn> Query<TFirst, TSecond, TThird, TFourth, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TFourth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-96"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<TReturn>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-99"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-41"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-querytfirst-tsecond-tthird-tfourth-tfifth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query","<","TFirst, TSecond, TThird, TFourth, TFifth, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a multi-mapping query with 5 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-107"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1322"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static IEnumerable<TReturn> Query<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-97"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<TReturn>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-100"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-42"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-querytfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a multi-mapping query with 6 input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-108"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1346"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static IEnumerable<TReturn> Query<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-98"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<TReturn>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-101"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TSixth>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-43"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSixth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The sixth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-querytfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturnidbconnection-string-functfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn",">","(IDbConnection, String, Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a multi-mapping query with 7 input types. If you need more types -",">"," use Query with Type[] parameter.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-109"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1371"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static IEnumerable<TReturn> Query<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(this IDbConnection cnn, string sql, Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-99"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<TReturn>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-102"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TSixth>,<TSeventh>,<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-44"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TThird")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The third type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSixth")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The sixth type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TSeventh")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The seventh type in the recordset.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-querytreturnidbconnection-string-type-funcobject-treturn-object-idbtransaction-boolean-string-nullableint32-nullablecommandtype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Query","<","TReturn",">","(IDbConnection, String, Type[], Func","<","Object[], TReturn",">",", Object, IDbTransaction, Boolean, String, Nullable","<","Int32",">",", Nullable","<","CommandType",">",")"),(0,r.kt)("p",null,"Perform a multi-mapping query with an arbitrary number of input types.\nThis returns a single type, combined from the raw types via ","<",'code data-dev-comment-type="paramref" class="paramref"',">","map","<","/code",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-110"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1390"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public static IEnumerable<TReturn> Query<TReturn>(this IDbConnection cnn, string sql, Type[] types, Func<object[], TReturn> map, object param = null, IDbTransaction transaction = null, bool buffered = true, string splitOn = "Id", int? commandTimeout = null, CommandType? commandType = null)\n')),(0,r.kt)("h5",{id:"returns-100"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<TReturn>>"),": An enumerable of ","<",'code data-dev-comment-type="typeparamref" class="typeparamref"',">","TReturn","<","/code",">","."),(0,r.kt)("h5",{id:"parameters-103"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cnn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The connection to query on.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"sql")," | The SQL to execute for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type[]")," | ",(0,r.kt)("em",{parentName:"p"},"types")," | Array of types in the recordset."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Func<System.Object[],<TReturn>>")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | The function to map row types to the return type."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"param")," | The parameters to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbTransaction")," | ",(0,r.kt)("em",{parentName:"p"},"transaction")," | The transaction to use for this query."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"buffered")," | Whether to buffer the results in memory."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"splitOn")," | The field we should split and read the second object from (default: ",'"',"Id",'"',")."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Int32>")," | ",(0,r.kt)("em",{parentName:"p"},"commandTimeout")," | Number of seconds before command execution timeout."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<CommandType>")," | ",(0,r.kt)("em",{parentName:"p"},"commandType")," | Is it a stored proc or a batch?"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-45"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The combined type to return.")))),(0,r.kt)("h3",{id:"-readcharobject"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ReadChar(Object)"),(0,r.kt)("p",null,"Internal use only."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-111"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1873"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static char ReadChar(object value)\n")),(0,r.kt)("h5",{id:"returns-101"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Char")),(0,r.kt)("h5",{id:"parameters-104"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object to convert to a character.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-readnullablecharobject"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ReadNullableChar(Object)"),(0,r.kt)("p",null,"Internal use only."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-112"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1888"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static char? ReadNullableChar(object value)\n")),(0,r.kt)("h5",{id:"returns-102"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Nullable<System.Char>")),(0,r.kt)("h5",{id:"parameters-105"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The object to convert to a character.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-findoraddparameteridataparametercollection-idbcommand-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," FindOrAddParameter(IDataParameterCollection, IDbCommand, String)"),(0,r.kt)("p",null,"Internal use only."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-113"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1905"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IDbDataParameter FindOrAddParameter(IDataParameterCollection parameters, IDbCommand command, string name)\n")),(0,r.kt)("h5",{id:"returns-103"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IDbDataParameter")),(0,r.kt)("h5",{id:"parameters-106"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDataParameterCollection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"parameters")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The parameter collection to search in.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbCommand")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command for this fetch."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"name")," | The name of the parameter to get."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-packlistparametersidbcommand-string-object"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," PackListParameters(IDbCommand, String, Object)"),(0,r.kt)("p",null,"Internal use only."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-114"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L1961"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void PackListParameters(IDbCommand command, string namePrefix, object value)\n")),(0,r.kt)("h5",{id:"parameters-107"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDbCommand")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"command")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The command to pack parameters for.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"namePrefix")," | The name prefix for these parameters."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"value")," | The parameter value can be an ","<",'see cref="!:IEnumerable',"<","T",">",'"',">","<","/see",">"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-sanitizeparametervalueobject"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," SanitizeParameterValue(Object)"),(0,r.kt)("p",null,"OBSOLETE: For internal usage only. Sanitizes the paramter value with proper type casting."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-115"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L2190"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static object SanitizeParameterValue(object value)\n")),(0,r.kt)("h5",{id:"returns-104"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,r.kt)("h5",{id:"parameters-108"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The value to sanitize.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-replaceliteralssqlmapperiparameterlookup-idbcommand"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ReplaceLiterals(SqlMapper.IParameterLookup, IDbCommand)"),(0,r.kt)("p",null,"Replace all literal tokens with their text form."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-116"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L2241"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void ReplaceLiterals(this SqlMapper.IParameterLookup parameters, IDbCommand command)\n")),(0,r.kt)("h5",{id:"parameters-109"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.IParameterLookup"},"ServiceStack.OrmLite.Dapper.SqlMapper.IParameterLookup")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"parameters")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The parameter lookup to do replacements with.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDbCommand")," | ",(0,r.kt)("em",{parentName:"p"},"command")," | The command to repalce parameters in."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-formatobject"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Format(Object)"),(0,r.kt)("p",null,"Convert numeric values to their string form for SQL literal purposes."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-117"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L2253"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static string Format(object value)\n")),(0,r.kt)("h5",{id:"returns-105"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.String")),(0,r.kt)("h5",{id:"parameters-110"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The value to get a string for.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-createparaminfogeneratorsqlmapperidentity-boolean-boolean"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," CreateParamInfoGenerator(SqlMapper.Identity, Boolean, Boolean)"),(0,r.kt)("p",null,"Internal use only."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-118"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L2362"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Action<IDbCommand, object> CreateParamInfoGenerator(SqlMapper.Identity identity, bool checkForDuplicates, bool removeUnused)\n")),(0,r.kt)("h5",{id:"returns-106"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Action<IDbCommand,System.Object>")),(0,r.kt)("h5",{id:"parameters-111"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.Identity"},"ServiceStack.OrmLite.Dapper.SqlMapper.Identity")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"identity")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The identity of the generator.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"checkForDuplicates")," | Whether to check for duplicates."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"removeUnused")," | Whether to remove unused parameters."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-gettypemaptype"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetTypeMap(Type)"),(0,r.kt)("p",null,"Gets type-map for the given ","<",'see cref="!:Type"',">","<","/see",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-119"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L2961"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static SqlMapper.ITypeMap GetTypeMap(Type type)\n")),(0,r.kt)("h5",{id:"returns-107"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ITypeMap"},"ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap"),": Type map implementation, DefaultTypeMap instance if no override present"),(0,r.kt)("h5",{id:"parameters-112"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to get a map for.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-settypemaptype-sqlmapperitypemap"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," SetTypeMap(Type, SqlMapper.ITypeMap)"),(0,r.kt)("p",null,"Set custom mapping for type deserializers"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-120"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L2990"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void SetTypeMap(Type type, SqlMapper.ITypeMap map)\n")),(0,r.kt)("h5",{id:"parameters-113"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Entity type to override")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ITypeMap"},"ServiceStack.OrmLite.Dapper.SqlMapper.ITypeMap")," | ",(0,r.kt)("em",{parentName:"p"},"map")," | Mapping rules impementation, null to remove custom map"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-gettypedeserializertype-idatareader-int32-int32-boolean"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetTypeDeserializer(Type, IDataReader, Int32, Int32, Boolean)"),(0,r.kt)("p",null,"Internal use only"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-121"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L3022"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Func<IDataReader, object> GetTypeDeserializer(Type type, IDataReader reader, int startBound = 0, int length = null, bool returnNullIfFirstMissing = false)\n")),(0,r.kt)("h5",{id:"returns-108"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Func<IDataReader,System.Object>")),(0,r.kt)("h5",{id:"parameters-114"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"type"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDataReader")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"reader"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Int32")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"startBound"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Int32")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"length"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"returnNullIfFirstMissing"))))),(0,r.kt)("h3",{id:"-throwdataexceptionexception-int32-idatareader-object"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ThrowDataException(Exception, Int32, IDataReader, Object)"),(0,r.kt)("p",null,"Throws a data exception, only used internally"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-122"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L3602"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void ThrowDataException(Exception ex, int index, IDataReader reader, object value)\n")),(0,r.kt)("h5",{id:"parameters-115"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Exception")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"ex")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The exception to throw.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"index")," | The index the exception occured at."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"IDataReader")," | ",(0,r.kt)("em",{parentName:"p"},"reader")," | The reader the exception occured in."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Object")," | ",(0,r.kt)("em",{parentName:"p"},"value")," | The value that caused the exception."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-astablevaluedparameterdatatable-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," AsTableValuedParameter(DataTable, String)"),(0,r.kt)("p",null,"Used to pass a DataTable as a ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.OrmLite.Dapper.TableValuedParameter"),"."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-123"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L3688"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static SqlMapper.ICustomQueryParameter AsTableValuedParameter(this DataTable table, string typeName = null)\n")),(0,r.kt)("h5",{id:"returns-109"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ICustomQueryParameter"},"ServiceStack.OrmLite.Dapper.SqlMapper.ICustomQueryParameter")),(0,r.kt)("h5",{id:"parameters-116"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"DataTable")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"table")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ","<",'see cref="!:DataTable"',">","<","/see",">"," to create this parameter for.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"typeName")," | The name of the type this parameter is for."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-settypenamedatatable-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," SetTypeName(DataTable, String)"),(0,r.kt)("p",null,"Associate a DataTable with a type name."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-124"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L3696"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void SetTypeName(this DataTable table, string typeName)\n")),(0,r.kt)("h5",{id:"parameters-117"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"DataTable")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"table")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ","<",'see cref="!:DataTable"',">","<","/see",">"," that does with the ","<",'code data-dev-comment-type="paramref" class="paramref"',">","typeName","<","/code",">",".")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"typeName")," | The name of the type this table is for."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-gettypenamedatatable"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetTypeName(DataTable)"),(0,r.kt)("p",null,"Fetch the type name associated with a ","<",'see cref="!:DataTable"',">","<","/see",">","."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-125"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L3711"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static string GetTypeName(this DataTable table)\n")),(0,r.kt)("h5",{id:"returns-110"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.String")),(0,r.kt)("h5",{id:"parameters-118"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"DataTable")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"table")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The ","<",'see cref="!:DataTable"',">","<","/see",">"," that has a type name associated with it.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-astablevaluedparametertienumerablet-string"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," AsTableValuedParameter","<","T",">","(IEnumerable","<","T",">",", String)"),(0,r.kt)("p",null,"Used to pass a IEnumerable","<","SqlDataRecord",">"," as a TableValuedParameter."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-126"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L3719"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static SqlMapper.ICustomQueryParameter AsTableValuedParameter<T>(this IEnumerable<T> list, string typeName = null)\n    where T : IDataRecord\n")),(0,r.kt)("h5",{id:"returns-111"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ICustomQueryParameter"},"ServiceStack.OrmLite.Dapper.SqlMapper.ICustomQueryParameter")),(0,r.kt)("h5",{id:"parameters-119"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IEnumerable<<T>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"list")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The list of records to convert to TVPs.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"typeName")," | The sql parameter type name."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-46"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"-parsetidatareader"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Parse","<","T",">","(IDataReader)"),(0,r.kt)("p",null,"Parses a data reader to a sequence of data of the supplied type. Used for deserializing a reader without a connection, etc."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-127"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.IDataReader.cs#L14"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEnumerable<T> Parse<T>(this IDataReader reader)\n")),(0,r.kt)("h5",{id:"returns-112"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<<T>>")),(0,r.kt)("h5",{id:"parameters-120"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDataReader")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"reader")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The data reader to parse results from.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-47"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type to parse from the ",(0,r.kt)("code",{"data-dev-comment-type":"paramref",class:"paramref"},"reader"),".")))),(0,r.kt)("h3",{id:"-parseidatareader-type"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Parse(IDataReader, Type)"),(0,r.kt)("p",null,"Parses a data reader to a sequence of data of the supplied type (as object). Used for deserializing a reader without a connection, etc."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-128"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.IDataReader.cs#L41"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEnumerable<object> Parse(this IDataReader reader, Type type)\n")),(0,r.kt)("h5",{id:"returns-113"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<System.Object>")),(0,r.kt)("h5",{id:"parameters-121"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDataReader")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"reader")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The data reader to parse results from.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to parse from the ","<",'code data-dev-comment-type="paramref" class="paramref"',">","reader","<","/code",">","."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-parseidatareader"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Parse(IDataReader)"),(0,r.kt)("p",null,"Parses a data reader to a sequence of dynamic. Used for deserializing a reader without a connection, etc."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-129"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.IDataReader.cs#L57"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IEnumerable<dynamic> Parse(this IDataReader reader)\n")),(0,r.kt)("h5",{id:"returns-114"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<System.Object>")),(0,r.kt)("h5",{id:"parameters-122"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDataReader")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"reader")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The data reader to parse results from.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-getrowparseridatareader-type-int32-int32-boolean"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetRowParser(IDataReader, Type, Int32, Int32, Boolean)"),(0,r.kt)("p",null,"Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.\nYou could return a collection of the base type but have each more specific."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-130"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.IDataReader.cs#L79"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Func<IDataReader, object> GetRowParser(this IDataReader reader, Type type, int startIndex = 0, int length = null, bool returnNullIfFirstMissing = false)\n")),(0,r.kt)("h5",{id:"returns-115"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Func<IDataReader,System.Object>"),": A parser for this specific object from this row."),(0,r.kt)("h5",{id:"parameters-123"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDataReader")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"reader")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The data reader to get the parser for the current row from")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"type")," | The type to get the parser for"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"startIndex")," | The start column index of the object (default 0)"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"length")," | The length of columns to read (default -1 = all fields following startIndex)"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"returnNullIfFirstMissing")," | Return null if we can","'","t find the first column? (default false)"),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-getrowparsertidatareader-type-int32-int32-boolean"},(0,r.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetRowParser","<","T",">","(IDataReader, Type, Int32, Int32, Boolean)"),(0,r.kt)("p",null,"Gets the row parser for a specific row on a data reader. This allows for type switching every row based on, for example, a TypeId column.\nYou could return a collection of the base type but have each more specific."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-131"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.IDataReader.cs#L138"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Func<IDataReader, T> GetRowParser<T>(this IDataReader reader, Type concreteType = null, int startIndex = 0, int length = null, bool returnNullIfFirstMissing = false)\n")),(0,r.kt)("h5",{id:"returns-116"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Func<IDataReader,<T>>"),": A parser for this specific object from this row."),(0,r.kt)("h5",{id:"parameters-124"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"IDataReader")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"reader")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The data reader to get the parser for the current row from.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"Type")," | ",(0,r.kt)("em",{parentName:"p"},"concreteType")," | The type to get the parser for."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"startIndex")," | The start column index of the object (default: 0)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"length")," | The length of columns to read (default: -1 = all fields following startIndex)."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"returnNullIfFirstMissing")," | Return null if we can","'","t find the first column? (default: false)."),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-48"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The type of results to return.")))),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"querycachepurged"},"QueryCachePurged"),(0,r.kt)("p",null,"Called if the query cache is purged via PurgeQueryCache"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-132"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.cs#L50"}," ",(0,r.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static event EventHandler QueryCachePurged\n")),(0,r.kt)("h5",{id:"event-type"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"EventHandler")))}d.isMDXComponent=!0}}]);