"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[1860],{2377:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return n},metadata:function(){return p},toc:function(){return c}});var r=a(83117),i=(a(67294),a(3905)),l=a(1954);const n={title:"Class DefaultValidatorExtensions",sidebar_label:"DefaultValidatorExtensions",description:"Extension methods that provide the default set of validators."},o='<Icon icon="codicon:symbol-class" className="symbol-class" /> DefaultValidatorExtensions',p={unversionedId:"api/ServiceStack.FluentValidation/DefaultValidatorExtensions",id:"api/ServiceStack.FluentValidation/DefaultValidatorExtensions",title:"Class DefaultValidatorExtensions",description:"Extension methods that provide the default set of validators.",source:"@site/docs/api/ServiceStack.FluentValidation/DefaultValidatorExtensions.md",sourceDirName:"api/ServiceStack.FluentValidation",slug:"/api/ServiceStack.FluentValidation/DefaultValidatorExtensions",permalink:"/api/ServiceStack.FluentValidation/DefaultValidatorExtensions",draft:!1,tags:[],version:"current",frontMatter:{title:"Class DefaultValidatorExtensions",sidebar_label:"DefaultValidatorExtensions",description:"Extension methods that provide the default set of validators."},sidebar:"apiSidebar",previous:{title:"CascadeMode",permalink:"/api/ServiceStack.FluentValidation/CascadeMode"},next:{title:"DefaultValidatorExtensionsServiceStack",permalink:"/api/ServiceStack.FluentValidation/DefaultValidatorExtensionsServiceStack"}},d={},c=[{value:"<strong>Assembly</strong>: ServiceStack.dll",id:"assembly-servicestackdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> NotNull&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;)',id:"-notnullt-tpropertyirulebuildert-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:"Type Parameters",id:"type-parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Null&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;)',id:"-nullt-tpropertyirulebuildert-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"Type Parameters",id:"type-parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> NotEmpty&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;)',id:"-notemptyt-tpropertyirulebuildert-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:"Type Parameters",id:"type-parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Empty&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;)',id:"-emptyt-tpropertyirulebuildert-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:"Type Parameters",id:"type-parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Length&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Int32, Int32)',id:"-lengthtirulebuildert-string-int32-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:"Type Parameters",id:"type-parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Length&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Func&lt;T, Int32&gt;, Func&lt;T, Int32&gt;)',id:"-lengthtirulebuildert-string-funct-int32-funct-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:"Type Parameters",id:"type-parameters-5",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Length&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Int32)',id:"-lengthtirulebuildert-string-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7",level:6},{value:"Returns",id:"returns-6",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:"Type Parameters",id:"type-parameters-6",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Length&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Func&lt;T, Int32&gt;)',id:"-lengthtirulebuildert-string-funct-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8",level:6},{value:"Returns",id:"returns-7",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:"Type Parameters",id:"type-parameters-7",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Matches&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, String)',id:"-matchestirulebuildert-string-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9",level:6},{value:"Returns",id:"returns-8",level:5},{value:"Parameters",id:"parameters-8",level:5},{value:"Type Parameters",id:"type-parameters-8",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> MaximumLength&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Int32)',id:"-maximumlengthtirulebuildert-string-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10",level:6},{value:"Returns",id:"returns-9",level:5},{value:"Parameters",id:"parameters-9",level:5},{value:"Type Parameters",id:"type-parameters-9",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> MinimumLength&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Int32)',id:"-minimumlengthtirulebuildert-string-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11",level:6},{value:"Returns",id:"returns-10",level:5},{value:"Parameters",id:"parameters-10",level:5},{value:"Type Parameters",id:"type-parameters-10",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Matches&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Func&lt;T, String&gt;)',id:"-matchestirulebuildert-string-funct-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12",level:6},{value:"Returns",id:"returns-11",level:5},{value:"Parameters",id:"parameters-11",level:5},{value:"Type Parameters",id:"type-parameters-11",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Matches&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Regex)',id:"-matchestirulebuildert-string-regex",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13",level:6},{value:"Returns",id:"returns-12",level:5},{value:"Parameters",id:"parameters-12",level:5},{value:"Type Parameters",id:"type-parameters-12",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Matches&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Func&lt;T, Regex&gt;)',id:"-matchestirulebuildert-string-funct-regex",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14",level:6},{value:"Returns",id:"returns-13",level:5},{value:"Parameters",id:"parameters-13",level:5},{value:"Type Parameters",id:"type-parameters-13",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Matches&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, String, RegexOptions)',id:"-matchestirulebuildert-string-string-regexoptions",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15",level:6},{value:"Returns",id:"returns-14",level:5},{value:"Parameters",id:"parameters-14",level:5},{value:"Type Parameters",id:"type-parameters-14",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Matches&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Func&lt;T, String&gt;, RegexOptions)',id:"-matchestirulebuildert-string-funct-string-regexoptions",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16",level:6},{value:"Returns",id:"returns-15",level:5},{value:"Parameters",id:"parameters-15",level:5},{value:"Type Parameters",id:"type-parameters-15",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> EmailAddress&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, EmailValidationMode)',id:"-emailaddresstirulebuildert-string-emailvalidationmode",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17",level:6},{value:"Returns",id:"returns-16",level:5},{value:"Parameters",id:"parameters-16",level:5},{value:"Type Parameters",id:"type-parameters-16",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> NotEqual&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, TProperty, IEqualityComparer)',id:"-notequalt-tpropertyirulebuildert-tproperty-tproperty-iequalitycomparer",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18",level:6},{value:"Returns",id:"returns-17",level:5},{value:"Parameters",id:"parameters-17",level:5},{value:"Type Parameters",id:"type-parameters-17",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> NotEqual&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;, IEqualityComparer)',id:"-notequalt-tpropertyirulebuildert-tproperty-expressionfunct-tproperty-iequalitycomparer",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19",level:6},{value:"Returns",id:"returns-18",level:5},{value:"Parameters",id:"parameters-18",level:5},{value:"Type Parameters",id:"type-parameters-18",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Equal&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, TProperty, IEqualityComparer)',id:"-equalt-tpropertyirulebuildert-tproperty-tproperty-iequalitycomparer",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20",level:6},{value:"Returns",id:"returns-19",level:5},{value:"Parameters",id:"parameters-19",level:5},{value:"Type Parameters",id:"type-parameters-19",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Equal&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;, IEqualityComparer)',id:"-equalt-tpropertyirulebuildert-tproperty-expressionfunct-tproperty-iequalitycomparer",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21",level:6},{value:"Returns",id:"returns-20",level:5},{value:"Parameters",id:"parameters-20",level:5},{value:"Type Parameters",id:"type-parameters-20",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Must&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Func&lt;TProperty, Boolean&gt;)',id:"-mustt-tpropertyirulebuildert-tproperty-functproperty-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22",level:6},{value:"Returns",id:"returns-21",level:5},{value:"Parameters",id:"parameters-21",level:5},{value:"Type Parameters",id:"type-parameters-21",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Must&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Func&lt;T, TProperty, Boolean&gt;)',id:"-mustt-tpropertyirulebuildert-tproperty-funct-tproperty-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23",level:6},{value:"Returns",id:"returns-22",level:5},{value:"Parameters",id:"parameters-22",level:5},{value:"Type Parameters",id:"type-parameters-22",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Must&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Func&lt;T, TProperty, PropertyValidatorContext, Boolean&gt;)',id:"-mustt-tpropertyirulebuildert-tproperty-funct-tproperty-propertyvalidatorcontext-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24",level:6},{value:"Returns",id:"returns-23",level:5},{value:"Parameters",id:"parameters-23",level:5},{value:"Type Parameters",id:"type-parameters-23",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> MustAsync&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Func&lt;TProperty, CancellationToken, Task&lt;Boolean&gt;&gt;)',id:"-mustasynct-tpropertyirulebuildert-tproperty-functproperty-cancellationtoken-taskboolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25",level:6},{value:"Returns",id:"returns-24",level:5},{value:"Parameters",id:"parameters-24",level:5},{value:"Type Parameters",id:"type-parameters-24",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> MustAsync&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Func&lt;T, TProperty, CancellationToken, Task&lt;Boolean&gt;&gt;)',id:"-mustasynct-tpropertyirulebuildert-tproperty-funct-tproperty-cancellationtoken-taskboolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26",level:6},{value:"Returns",id:"returns-25",level:5},{value:"Parameters",id:"parameters-25",level:5},{value:"Type Parameters",id:"type-parameters-25",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> MustAsync&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Func&lt;T, TProperty, PropertyValidatorContext, CancellationToken, Task&lt;Boolean&gt;&gt;)',id:"-mustasynct-tpropertyirulebuildert-tproperty-funct-tproperty-propertyvalidatorcontext-cancellationtoken-taskboolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27",level:6},{value:"Returns",id:"returns-26",level:5},{value:"Parameters",id:"parameters-26",level:5},{value:"Type Parameters",id:"type-parameters-26",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, TProperty)',id:"-lessthant-tpropertyirulebuildert-tproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28",level:6},{value:"Returns",id:"returns-27",level:5},{value:"Parameters",id:"parameters-27",level:5},{value:"Type Parameters",id:"type-parameters-27",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, TProperty)',id:"-lessthant-tpropertyirulebuildert-nullabletproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29",level:6},{value:"Returns",id:"returns-28",level:5},{value:"Parameters",id:"parameters-28",level:5},{value:"Type Parameters",id:"type-parameters-28",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, TProperty)',id:"-lessthanorequaltot-tpropertyirulebuildert-tproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30",level:6},{value:"Returns",id:"returns-29",level:5},{value:"Parameters",id:"parameters-29",level:5},{value:"Type Parameters",id:"type-parameters-29",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, TProperty)',id:"-lessthanorequaltot-tpropertyirulebuildert-nullabletproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31",level:6},{value:"Returns",id:"returns-30",level:5},{value:"Parameters",id:"parameters-30",level:5},{value:"Type Parameters",id:"type-parameters-30",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, TProperty)',id:"-greaterthant-tpropertyirulebuildert-tproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32",level:6},{value:"Returns",id:"returns-31",level:5},{value:"Parameters",id:"parameters-31",level:5},{value:"Type Parameters",id:"type-parameters-31",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, TProperty)',id:"-greaterthant-tpropertyirulebuildert-nullabletproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-33",level:6},{value:"Returns",id:"returns-32",level:5},{value:"Parameters",id:"parameters-32",level:5},{value:"Type Parameters",id:"type-parameters-32",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, TProperty)',id:"-greaterthanorequaltot-tpropertyirulebuildert-tproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-34",level:6},{value:"Returns",id:"returns-33",level:5},{value:"Parameters",id:"parameters-33",level:5},{value:"Type Parameters",id:"type-parameters-33",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, TProperty)',id:"-greaterthanorequaltot-tpropertyirulebuildert-nullabletproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-35",level:6},{value:"Returns",id:"returns-34",level:5},{value:"Parameters",id:"parameters-34",level:5},{value:"Type Parameters",id:"type-parameters-34",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;)',id:"-lessthant-tpropertyirulebuildert-tproperty-expressionfunct-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-36",level:6},{value:"Returns",id:"returns-35",level:5},{value:"Parameters",id:"parameters-35",level:5},{value:"Type Parameters",id:"type-parameters-35",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, Nullable&lt;TProperty&gt;&gt;&gt;)',id:"-lessthant-tpropertyirulebuildert-tproperty-expressionfunct-nullabletproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-37",level:6},{value:"Returns",id:"returns-36",level:5},{value:"Parameters",id:"parameters-36",level:5},{value:"Type Parameters",id:"type-parameters-36",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;)',id:"-lessthant-tpropertyirulebuildert-nullabletproperty-expressionfunct-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-38",level:6},{value:"Returns",id:"returns-37",level:5},{value:"Parameters",id:"parameters-37",level:5},{value:"Type Parameters",id:"type-parameters-37",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, Expression&lt;Func&lt;T, Nullable&lt;TProperty&gt;&gt;&gt;)',id:"-lessthant-tpropertyirulebuildert-nullabletproperty-expressionfunct-nullabletproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-39",level:6},{value:"Returns",id:"returns-38",level:5},{value:"Parameters",id:"parameters-38",level:5},{value:"Type Parameters",id:"type-parameters-38",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;)',id:"-lessthanorequaltot-tpropertyirulebuildert-tproperty-expressionfunct-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-40",level:6},{value:"Returns",id:"returns-39",level:5},{value:"Parameters",id:"parameters-39",level:5},{value:"Type Parameters",id:"type-parameters-39",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, Nullable&lt;TProperty&gt;&gt;&gt;)',id:"-lessthanorequaltot-tpropertyirulebuildert-tproperty-expressionfunct-nullabletproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-41",level:6},{value:"Returns",id:"returns-40",level:5},{value:"Parameters",id:"parameters-40",level:5},{value:"Type Parameters",id:"type-parameters-40",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;)',id:"-lessthanorequaltot-tpropertyirulebuildert-nullabletproperty-expressionfunct-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-42",level:6},{value:"Returns",id:"returns-41",level:5},{value:"Parameters",id:"parameters-41",level:5},{value:"Type Parameters",id:"type-parameters-41",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> LessThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, Expression&lt;Func&lt;T, Nullable&lt;TProperty&gt;&gt;&gt;)',id:"-lessthanorequaltot-tpropertyirulebuildert-nullabletproperty-expressionfunct-nullabletproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-43",level:6},{value:"Returns",id:"returns-42",level:5},{value:"Parameters",id:"parameters-42",level:5},{value:"Type Parameters",id:"type-parameters-42",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;)',id:"-greaterthant-tpropertyirulebuildert-tproperty-expressionfunct-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-44",level:6},{value:"Returns",id:"returns-43",level:5},{value:"Parameters",id:"parameters-43",level:5},{value:"Type Parameters",id:"type-parameters-43",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, Nullable&lt;TProperty&gt;&gt;&gt;)',id:"-greaterthant-tpropertyirulebuildert-tproperty-expressionfunct-nullabletproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-45",level:6},{value:"Returns",id:"returns-44",level:5},{value:"Parameters",id:"parameters-44",level:5},{value:"Type Parameters",id:"type-parameters-44",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;)',id:"-greaterthant-tpropertyirulebuildert-nullabletproperty-expressionfunct-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-46",level:6},{value:"Returns",id:"returns-45",level:5},{value:"Parameters",id:"parameters-45",level:5},{value:"Type Parameters",id:"type-parameters-45",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThan&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, Expression&lt;Func&lt;T, Nullable&lt;TProperty&gt;&gt;&gt;)',id:"-greaterthant-tpropertyirulebuildert-nullabletproperty-expressionfunct-nullabletproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-47",level:6},{value:"Returns",id:"returns-46",level:5},{value:"Parameters",id:"parameters-46",level:5},{value:"Type Parameters",id:"type-parameters-46",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;)',id:"-greaterthanorequaltot-tpropertyirulebuildert-tproperty-expressionfunct-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-48",level:6},{value:"Returns",id:"returns-47",level:5},{value:"Parameters",id:"parameters-47",level:5},{value:"Type Parameters",id:"type-parameters-47",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, Nullable&lt;TProperty&gt;&gt;&gt;)',id:"-greaterthanorequaltot-tpropertyirulebuildert-tproperty-expressionfunct-nullabletproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-49",level:6},{value:"Returns",id:"returns-48",level:5},{value:"Parameters",id:"parameters-48",level:5},{value:"Type Parameters",id:"type-parameters-48",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, Expression&lt;Func&lt;T, Nullable&lt;TProperty&gt;&gt;&gt;)',id:"-greaterthanorequaltot-tpropertyirulebuildert-nullabletproperty-expressionfunct-nullabletproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-50",level:6},{value:"Returns",id:"returns-49",level:5},{value:"Parameters",id:"parameters-49",level:5},{value:"Type Parameters",id:"type-parameters-49",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GreaterThanOrEqualTo&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, Expression&lt;Func&lt;T, TProperty&gt;&gt;)',id:"-greaterthanorequaltot-tpropertyirulebuildert-nullabletproperty-expressionfunct-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-51",level:6},{value:"Returns",id:"returns-50",level:5},{value:"Parameters",id:"parameters-50",level:5},{value:"Type Parameters",id:"type-parameters-50",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> InclusiveBetween&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, TProperty, TProperty)',id:"-inclusivebetweent-tpropertyirulebuildert-tproperty-tproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-52",level:6},{value:"Returns",id:"returns-51",level:5},{value:"Parameters",id:"parameters-51",level:5},{value:"Type Parameters",id:"type-parameters-51",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> InclusiveBetween&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, TProperty, TProperty)',id:"-inclusivebetweent-tpropertyirulebuildert-nullabletproperty-tproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-53",level:6},{value:"Returns",id:"returns-52",level:5},{value:"Parameters",id:"parameters-52",level:5},{value:"Type Parameters",id:"type-parameters-52",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExclusiveBetween&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, TProperty, TProperty)',id:"-exclusivebetweent-tpropertyirulebuildert-tproperty-tproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-54",level:6},{value:"Returns",id:"returns-53",level:5},{value:"Parameters",id:"parameters-53",level:5},{value:"Type Parameters",id:"type-parameters-53",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ExclusiveBetween&lt;T, TProperty&gt;(IRuleBuilder&lt;T, Nullable&lt;TProperty&gt;&gt;, TProperty, TProperty)',id:"-exclusivebetweent-tpropertyirulebuildert-nullabletproperty-tproperty-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-55",level:6},{value:"Returns",id:"returns-54",level:5},{value:"Parameters",id:"parameters-54",level:5},{value:"Type Parameters",id:"type-parameters-54",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> CreditCard&lt;T&gt;(IRuleBuilder&lt;T, String&gt;)',id:"-creditcardtirulebuildert-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-56",level:6},{value:"Returns",id:"returns-55",level:5},{value:"Parameters",id:"parameters-55",level:5},{value:"Type Parameters",id:"type-parameters-55",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> IsInEnum&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;)',id:"-isinenumt-tpropertyirulebuildert-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-57",level:6},{value:"Returns",id:"returns-56",level:5},{value:"Parameters",id:"parameters-56",level:5},{value:"Type Parameters",id:"type-parameters-56",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ScalePrecision&lt;T&gt;(IRuleBuilder&lt;T, Decimal&gt;, Int32, Int32, Boolean)',id:"-scaleprecisiontirulebuildert-decimal-int32-int32-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-58",level:6},{value:"Returns",id:"returns-57",level:5},{value:"Parameters",id:"parameters-57",level:5},{value:"Type Parameters",id:"type-parameters-57",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ScalePrecision&lt;T&gt;(IRuleBuilder&lt;T, Nullable&lt;Decimal&gt;&gt;, Int32, Int32, Boolean)',id:"-scaleprecisiontirulebuildert-nullabledecimal-int32-int32-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-59",level:6},{value:"Returns",id:"returns-58",level:5},{value:"Parameters",id:"parameters-58",level:5},{value:"Type Parameters",id:"type-parameters-58",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Custom&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Action&lt;TProperty, CustomContext&gt;)',id:"-customt-tpropertyirulebuildert-tproperty-actiontproperty-customcontext",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-60",level:6},{value:"Returns",id:"returns-59",level:5},{value:"Parameters",id:"parameters-59",level:5},{value:"Type Parameters",id:"type-parameters-59",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> CustomAsync&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Func&lt;TProperty, CustomContext, CancellationToken, Task&gt;)',id:"-customasynct-tpropertyirulebuildert-tproperty-functproperty-customcontext-cancellationtoken-task",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-61",level:6},{value:"Returns",id:"returns-60",level:5},{value:"Parameters",id:"parameters-60",level:5},{value:"Type Parameters",id:"type-parameters-60",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ForEach&lt;T, TElement&gt;(IRuleBuilder&lt;T, IEnumerable&lt;TElement&gt;&gt;, Action&lt;IRuleBuilderInitialCollection&lt;IEnumerable&lt;TElement&gt;, TElement&gt;&gt;)',id:"-foreacht-telementirulebuildert-ienumerabletelement-actionirulebuilderinitialcollectionienumerabletelement-telement",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-62",level:6},{value:"Returns",id:"returns-61",level:5},{value:"Parameters",id:"parameters-61",level:5},{value:"Type Parameters",id:"type-parameters-61",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> IsEnumName&lt;T&gt;(IRuleBuilder&lt;T, String&gt;, Type, Boolean)',id:"-isenumnametirulebuildert-string-type-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-63",level:6},{value:"Returns",id:"returns-62",level:5},{value:"Parameters",id:"parameters-62",level:5},{value:"Type Parameters",id:"type-parameters-62",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ChildRules&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Action&lt;InlineValidator&lt;TProperty&gt;&gt;)',id:"-childrulest-tpropertyirulebuildert-tproperty-actioninlinevalidatortproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-64",level:6},{value:"Returns",id:"returns-63",level:5},{value:"Parameters",id:"parameters-63",level:5},{value:"Type Parameters",id:"type-parameters-63",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> SetInheritanceValidator&lt;T, TProperty&gt;(IRuleBuilder&lt;T, TProperty&gt;, Action&lt;PolymorphicValidator&lt;T, TProperty&gt;&gt;)',id:"-setinheritancevalidatort-tpropertyirulebuildert-tproperty-actionpolymorphicvalidatort-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-65",level:6},{value:"Returns",id:"returns-64",level:5},{value:"Parameters",id:"parameters-64",level:5},{value:"Type Parameters",id:"type-parameters-64",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Validate&lt;T&gt;(IValidator&lt;T&gt;, T, Action&lt;ValidationStrategy&lt;T&gt;&gt;)',id:"-validatetivalidatort-t-actionvalidationstrategyt",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-66",level:6},{value:"Returns",id:"returns-65",level:5},{value:"Parameters",id:"parameters-65",level:5},{value:"Type Parameters",id:"type-parameters-65",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAsync&lt;T&gt;(IValidator&lt;T&gt;, T, Action&lt;ValidationStrategy&lt;T&gt;&gt;, CancellationToken)',id:"-validateasynctivalidatort-t-actionvalidationstrategyt-cancellationtoken",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-67",level:6},{value:"Returns",id:"returns-66",level:5},{value:"Parameters",id:"parameters-66",level:5},{value:"Type Parameters",id:"type-parameters-66",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAndThrow&lt;T&gt;(IValidator&lt;T&gt;, T)',id:"-validateandthrowtivalidatort-t",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-68",level:6},{value:"Parameters",id:"parameters-67",level:5},{value:"Type Parameters",id:"type-parameters-67",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAndThrowAsync&lt;T&gt;(IValidator&lt;T&gt;, T, CancellationToken)',id:"-validateandthrowasynctivalidatort-t-cancellationtoken",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-69",level:6},{value:"Returns",id:"returns-67",level:5},{value:"Parameters",id:"parameters-68",level:5},{value:"Type Parameters",id:"type-parameters-68",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Validate&lt;T&gt;(IValidator&lt;T&gt;, T, Expression&lt;Func&lt;T, Object&gt;&gt;[])',id:"-validatetivalidatort-t-expressionfunct-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-70",level:6},{value:"Returns",id:"returns-68",level:5},{value:"Parameters",id:"parameters-69",level:5},{value:"Type Parameters",id:"type-parameters-69",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Validate&lt;T&gt;(IValidator&lt;T&gt;, T, String[])',id:"-validatetivalidatort-t-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-71",level:6},{value:"Returns",id:"returns-69",level:5},{value:"Parameters",id:"parameters-70",level:5},{value:"Type Parameters",id:"type-parameters-70",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Validate&lt;T&gt;(IValidator&lt;T&gt;, T, IValidatorSelector, String)',id:"-validatetivalidatort-t-ivalidatorselector-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-72",level:6},{value:"Returns",id:"returns-70",level:5},{value:"Parameters",id:"parameters-71",level:5},{value:"Type Parameters",id:"type-parameters-71",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAsync&lt;T&gt;(IValidator&lt;T&gt;, T, CancellationToken, Expression&lt;Func&lt;T, Object&gt;&gt;[])',id:"-validateasynctivalidatort-t-cancellationtoken-expressionfunct-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-73",level:6},{value:"Returns",id:"returns-71",level:5},{value:"Parameters",id:"parameters-72",level:5},{value:"Type Parameters",id:"type-parameters-72",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAsync&lt;T&gt;(IValidator&lt;T&gt;, T, CancellationToken, String[])',id:"-validateasynctivalidatort-t-cancellationtoken-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-74",level:6},{value:"Returns",id:"returns-72",level:5},{value:"Parameters",id:"parameters-73",level:5},{value:"Type Parameters",id:"type-parameters-73",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAsync&lt;T&gt;(IValidator&lt;T&gt;, T, CancellationToken, IValidatorSelector, String)',id:"-validateasynctivalidatort-t-cancellationtoken-ivalidatorselector-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-75",level:6},{value:"Returns",id:"returns-73",level:5},{value:"Parameters",id:"parameters-74",level:5},{value:"Type Parameters",id:"type-parameters-74",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAndThrow&lt;T&gt;(IValidator&lt;T&gt;, T, String)',id:"-validateandthrowtivalidatort-t-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-76",level:6},{value:"Parameters",id:"parameters-75",level:5},{value:"Type Parameters",id:"type-parameters-75",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAndThrowAsync&lt;T&gt;(IValidator&lt;T&gt;, T, String, CancellationToken)',id:"-validateandthrowasynctivalidatort-t-string-cancellationtoken",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-77",level:6},{value:"Returns",id:"returns-74",level:5},{value:"Parameters",id:"parameters-76",level:5},{value:"Type Parameters",id:"type-parameters-76",level:5}],s={toc:c};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"-defaultvalidatorextensions"},(0,i.kt)(l.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," DefaultValidatorExtensions"),(0,i.kt)("p",null,"Extension methods that provide the default set of validators."),(0,i.kt)("h6",{id:"assembly-servicestackdll"},(0,i.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.dll"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L28"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static class DefaultValidatorExtensions\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"-notnullt-tpropertyirulebuildert-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," NotNull","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",")"),(0,i.kt)("p",null,"Defines a ","'","not null","'"," validator on the current rule builder.\nValidation will fail if the property is null."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L45"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> NotNull<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder)\n")),(0,i.kt)("h5",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-nullt-tpropertyirulebuildert-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Null","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",")"),(0,i.kt)("p",null,"Defines a ","'","null","'"," validator on the current rule builder.\nValidation will fail if the property is not null."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L57"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> Null<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder)\n")),(0,i.kt)("h5",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-notemptyt-tpropertyirulebuildert-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," NotEmpty","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",")"),(0,i.kt)("p",null,"Defines a ","'","not empty","'"," validator on the current rule builder.\nValidation will fail if the property is null, an empty string, whitespace, an empty collection or the default value for the type (for example, 0 for integers but null for nullable integers)"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L69"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> NotEmpty<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder)\n")),(0,i.kt)("h5",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-emptyt-tpropertyirulebuildert-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Empty","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",")"),(0,i.kt)("p",null,"Defines a ","'","empty","'"," validator on the current rule builder.\nValidation will fail if the property is not null, an empty or the default value for the type (for example, 0 for integers)"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L81"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> Empty<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder)\n")),(0,i.kt)("h5",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-3"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lengthtirulebuildert-string-int32-int32"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Length","<","T",">","(IRuleBuilder","<","T, String",">",", Int32, Int32)"),(0,i.kt)("p",null,"Defines a length validator on the current rule builder, but only for string properties.\nValidation will fail if the length of the string is outside of the specified range. The range is inclusive."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L94"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Length<T>(this IRuleBuilder<T, string> ruleBuilder, int min, int max)\n")),(0,i.kt)("h5",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,i.kt)("em",{parentName:"p"},"min")," | "),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,i.kt)("em",{parentName:"p"},"max")," | "),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-4"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-lengthtirulebuildert-string-funct-int32-funct-int32"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Length","<","T",">","(IRuleBuilder","<","T, String",">",", Func","<","T, Int32",">",", Func","<","T, Int32",">",")"),(0,i.kt)("p",null,"Defines a length validator on the current rule builder, but only for string properties.\nValidation will fail if the length of the string is outside of the specified range. The range is inclusive."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L107"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Length<T>(this IRuleBuilder<T, string> ruleBuilder, Func<T, int> min, Func<T, int> max)\n")),(0,i.kt)("h5",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.Int32>")," | ",(0,i.kt)("em",{parentName:"p"},"min")," | "),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.Int32>")," | ",(0,i.kt)("em",{parentName:"p"},"max")," | "),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-5"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-lengthtirulebuildert-string-int32"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Length","<","T",">","(IRuleBuilder","<","T, String",">",", Int32)"),(0,i.kt)("p",null,"Defines a length validator on the current rule builder, but only for string properties.\nValidation will fail if the length of the string is not equal to the length specified."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L119"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Length<T>(this IRuleBuilder<T, string> ruleBuilder, int exactLength)\n")),(0,i.kt)("h5",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-6"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,i.kt)("em",{parentName:"p"},"exactLength")," | "),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-6"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-lengthtirulebuildert-string-funct-int32"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Length","<","T",">","(IRuleBuilder","<","T, String",">",", Func","<","T, Int32",">",")"),(0,i.kt)("p",null,"Defines a length validator on the current rule builder, but only for string properties.\nValidation will fail if the length of the string is not equal to the length specified."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L131"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Length<T>(this IRuleBuilder<T, string> ruleBuilder, Func<T, int> exactLength)\n")),(0,i.kt)("h5",{id:"returns-7"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-7"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.Int32>")," | ",(0,i.kt)("em",{parentName:"p"},"exactLength")," | "),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-7"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-matchestirulebuildert-string-string"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Matches","<","T",">","(IRuleBuilder","<","T, String",">",", String)"),(0,i.kt)("p",null,"Defines a regular expression validator on the current rule builder, but only for string properties.\nValidation will fail if the value returned by the lambda does not match the regular expression."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L143"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Matches<T>(this IRuleBuilder<T, string> ruleBuilder, string expression)\n")),(0,i.kt)("h5",{id:"returns-8"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-8"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The regular expression to check the value against."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-8"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-maximumlengthtirulebuildert-string-int32"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," MaximumLength","<","T",">","(IRuleBuilder","<","T, String",">",", Int32)"),(0,i.kt)("p",null,"Defines a length validator on the current rule builder, but only for string properties.\nValidation will fail if the length of the string is larger than the length specified."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L155"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> MaximumLength<T>(this IRuleBuilder<T, string> ruleBuilder, int maximumLength)\n")),(0,i.kt)("h5",{id:"returns-9"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-9"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,i.kt)("em",{parentName:"p"},"maximumLength")," | "),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-9"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-minimumlengthtirulebuildert-string-int32"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," MinimumLength","<","T",">","(IRuleBuilder","<","T, String",">",", Int32)"),(0,i.kt)("p",null,"Defines a length validator on the current rule builder, but only for string properties.\nValidation will fail if the length of the string is less than the length specified."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L167"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> MinimumLength<T>(this IRuleBuilder<T, string> ruleBuilder, int minimumLength)\n")),(0,i.kt)("h5",{id:"returns-10"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-10"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,i.kt)("em",{parentName:"p"},"minimumLength")," | "),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-10"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-matchestirulebuildert-string-funct-string"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Matches","<","T",">","(IRuleBuilder","<","T, String",">",", Func","<","T, String",">",")"),(0,i.kt)("p",null,"Defines a regular expression validator on the current rule builder, but only for string properties.\nValidation will fail if the value returned by the lambda does not match the regular expression."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L179"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Matches<T>(this IRuleBuilder<T, string> ruleBuilder, Func<T, string> expression)\n")),(0,i.kt)("h5",{id:"returns-11"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-11"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.String>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The regular expression to check the value against."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-11"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-matchestirulebuildert-string-regex"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Matches","<","T",">","(IRuleBuilder","<","T, String",">",", Regex)"),(0,i.kt)("p",null,"Defines a regular expression validator on the current rule builder, but only for string properties.\nValidation will fail if the value returned by the lambda does not match the regular expression."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L191"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Matches<T>(this IRuleBuilder<T, string> ruleBuilder, Regex regex)\n")),(0,i.kt)("h5",{id:"returns-12"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-12"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Text.RegularExpressions.Regex")," | ",(0,i.kt)("em",{parentName:"p"},"regex")," | The regular expression to use"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-12"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-matchestirulebuildert-string-funct-regex"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Matches","<","T",">","(IRuleBuilder","<","T, String",">",", Func","<","T, Regex",">",")"),(0,i.kt)("p",null,"Defines a regular expression validator on the current rule builder, but only for string properties.\nValidation will fail if the value returned by the lambda does not match the regular expression."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L203"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Matches<T>(this IRuleBuilder<T, string> ruleBuilder, Func<T, Regex> regex)\n")),(0,i.kt)("h5",{id:"returns-13"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-13"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.Text.RegularExpressions.Regex>")," | ",(0,i.kt)("em",{parentName:"p"},"regex")," | The regular expression to use"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-13"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-matchestirulebuildert-string-string-regexoptions"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Matches","<","T",">","(IRuleBuilder","<","T, String",">",", String, RegexOptions)"),(0,i.kt)("p",null,"Defines a regular expression validator on the current rule builder, but only for string properties.\nValidation will fail if the value returned by the lambda does not match the regular expression."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L217"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Matches<T>(this IRuleBuilder<T, string> ruleBuilder, string expression, RegexOptions options)\n")),(0,i.kt)("h5",{id:"returns-14"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-14"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The regular expression to check the value against."),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Text.RegularExpressions.RegexOptions")," | ",(0,i.kt)("em",{parentName:"p"},"options")," | Regex options"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-14"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-matchestirulebuildert-string-funct-string-regexoptions"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Matches","<","T",">","(IRuleBuilder","<","T, String",">",", Func","<","T, String",">",", RegexOptions)"),(0,i.kt)("p",null,"Defines a regular expression validator on the current rule builder, but only for string properties.\nValidation will fail if the value returned by the lambda does not match the regular expression."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L230"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> Matches<T>(this IRuleBuilder<T, string> ruleBuilder, Func<T, string> expression, RegexOptions options)\n")),(0,i.kt)("h5",{id:"returns-15"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-15"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.String>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The regular expression to check the value against."),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Text.RegularExpressions.RegexOptions")," | ",(0,i.kt)("em",{parentName:"p"},"options")," | Regex options"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-15"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-emailaddresstirulebuildert-string-emailvalidationmode"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," EmailAddress","<","T",">","(IRuleBuilder","<","T, String",">",", EmailValidationMode)"),(0,i.kt)("p",null,"Defines an email validator on the current rule builder for string properties.\nValidation will fail if the value returned by the lambda is not a valid email address."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L242"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> EmailAddress<T>(this IRuleBuilder<T, string> ruleBuilder, EmailValidationMode mode = EmailValidationMode.AspNetCoreCompatible)\n")),(0,i.kt)("h5",{id:"returns-16"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-16"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Validators/EmailValidationMode"},"ServiceStack.FluentValidation.Validators.EmailValidationMode")," | ",(0,i.kt)("em",{parentName:"p"},"mode")," | The mode to use for email validation. If set to ",(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Validators/EmailValidationMode#net4xregex"},"ServiceStack.FluentValidation.Validators.EmailValidationMode.Net4xRegex"),", then a regular expression will be used. This is the same regex used by the EmailAddressAttribute in .NET 4.x. If set to ",(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Validators/EmailValidationMode#aspnetcorecompatible"},"ServiceStack.FluentValidation.Validators.EmailValidationMode.AspNetCoreCompatible")," then this uses the simplified ASP.NET Core logic for checking an email address, which just checks for the presence of an @ sign."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-16"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-notequalt-tpropertyirulebuildert-tproperty-tproperty-iequalitycomparer"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," NotEqual","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", TProperty, IEqualityComparer)"),(0,i.kt)("p",null,"Defines a ","'","not equal","'"," validator on the current rule builder.\nValidation will fail if the specified value is equal to the value of the property.\nFor strings, this performs an ordinal comparison unless you specify a different comparer."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L260"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> NotEqual<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, TProperty toCompare, IEqualityComparer comparer = null)\n")),(0,i.kt)("h5",{id:"returns-17"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-17"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"toCompare")," | The value to compare"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.IEqualityComparer")," | ",(0,i.kt)("em",{parentName:"p"},"comparer")," | Equality comparer to use"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-17"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-notequalt-tpropertyirulebuildert-tproperty-expressionfunct-tproperty-iequalitycomparer"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," NotEqual","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, TProperty",">",">",", IEqualityComparer)"),(0,i.kt)("p",null,"Defines a ","'","not equal","'"," validator on the current rule builder using a lambda to specify the value.\nValidation will fail if the value returned by the lambda is equal to the value of the property.\nFor strings, this performs an ordinal comparison unless you specify a different comparer."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L279"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> NotEqual<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty>> expression, IEqualityComparer comparer = null)\n")),(0,i.kt)("h5",{id:"returns-18"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-18"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | A lambda expression to provide the comparison value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.IEqualityComparer")," | ",(0,i.kt)("em",{parentName:"p"},"comparer")," | Equality Comparer to use"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-18"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-equalt-tpropertyirulebuildert-tproperty-tproperty-iequalitycomparer"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Equal","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", TProperty, IEqualityComparer)"),(0,i.kt)("p",null,"Defines an ","'","equals","'"," validator on the current rule builder.\nValidation will fail if the specified value is not equal to the value of the property.\nFor strings, this performs an ordinal comparison unless you specify a different comparer."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L302"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> Equal<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, TProperty toCompare, IEqualityComparer comparer = null)\n")),(0,i.kt)("h5",{id:"returns-19"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-19"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"toCompare")," | The value to compare"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.IEqualityComparer")," | ",(0,i.kt)("em",{parentName:"p"},"comparer")," | Equality Comparer to use"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-19"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-equalt-tpropertyirulebuildert-tproperty-expressionfunct-tproperty-iequalitycomparer"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Equal","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, TProperty",">",">",", IEqualityComparer)"),(0,i.kt)("p",null,"Defines an ","'","equals","'"," validator on the current rule builder using a lambda to specify the comparison value.\nValidation will fail if the value returned by the lambda is not equal to the value of the property.\nFor strings, this performs an ordinal comparison unless you specify a different comparer."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L320"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> Equal<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty>> expression, IEqualityComparer comparer = null)\n")),(0,i.kt)("h5",{id:"returns-20"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-20"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | A lambda expression to provide the comparison value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.IEqualityComparer")," | ",(0,i.kt)("em",{parentName:"p"},"comparer")," | Equality comparer to use"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-20"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-mustt-tpropertyirulebuildert-tproperty-functproperty-boolean"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Must","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Func","<","TProperty, Boolean",">",")"),(0,i.kt)("p",null,"Defines a predicate validator on the current rule builder using a lambda expression to specify the predicate.\nValidation will fail if the specified lambda returns false.\nValidation will succeed if the specified lambda returns true."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L341"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> Must<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Func<TProperty, bool> predicate)\n")),(0,i.kt)("h5",{id:"returns-21"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-21"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<TProperty>,System.Boolean>")," | ",(0,i.kt)("em",{parentName:"p"},"predicate")," | A lambda expression specifying the predicate"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-21"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-mustt-tpropertyirulebuildert-tproperty-funct-tproperty-boolean"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Must","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Func","<","T, TProperty, Boolean",">",")"),(0,i.kt)("p",null,"Defines a predicate validator on the current rule builder using a lambda expression to specify the predicate.\nValidation will fail if the specified lambda returns false.\nValidation will succeed if the specified lambda returns true.\nThis overload accepts the object being validated in addition to the property being validated."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L357"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> Must<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Func<T, TProperty, bool> predicate)\n")),(0,i.kt)("h5",{id:"returns-22"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-22"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,<TProperty>,System.Boolean>")," | ",(0,i.kt)("em",{parentName:"p"},"predicate")," | A lambda expression specifying the predicate"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-22"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-mustt-tpropertyirulebuildert-tproperty-funct-tproperty-propertyvalidatorcontext-boolean"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Must","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Func","<","T, TProperty, PropertyValidatorContext, Boolean",">",")"),(0,i.kt)("p",null,"Defines a predicate validator on the current rule builder using a lambda expression to specify the predicate.\nValidation will fail if the specified lambda returns false.\nValidation will succeed if the specified lambda returns true.\nThis overload accepts the object being validated in addition to the property being validated."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L373"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> Must<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Func<T, TProperty, PropertyValidatorContext, bool> predicate)\n")),(0,i.kt)("h5",{id:"returns-23"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-23"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,<TProperty>,ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.Boolean>")," | ",(0,i.kt)("em",{parentName:"p"},"predicate")," | A lambda expression specifying the predicate"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-23"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-mustasynct-tpropertyirulebuildert-tproperty-functproperty-cancellationtoken-taskboolean"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," MustAsync","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Func","<","TProperty, CancellationToken, Task","<","Boolean",">",">",")"),(0,i.kt)("p",null,"Defines an asynchronous predicate validator on the current rule builder using a lambda expression to specify the predicate.\nValidation will fail if the specified lambda returns false.\nValidation will succeed if the specified lambda returns true."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L388"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> MustAsync<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Func<TProperty, CancellationToken, Task<bool>> predicate)\n")),(0,i.kt)("h5",{id:"returns-24"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-24"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<TProperty>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")," | ",(0,i.kt)("em",{parentName:"p"},"predicate")," | A lambda expression specifying the predicate"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-24"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-mustasynct-tpropertyirulebuildert-tproperty-funct-tproperty-cancellationtoken-taskboolean"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," MustAsync","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Func","<","T, TProperty, CancellationToken, Task","<","Boolean",">",">",")"),(0,i.kt)("p",null,"Defines an asynchronous predicate validator on the current rule builder using a lambda expression to specify the predicate.\nValidation will fail if the specified lambda returns false.\nValidation will succeed if the specified lambda returns true.\nThis overload accepts the object being validated in addition to the property being validated."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L405"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> MustAsync<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Func<T, TProperty, CancellationToken, Task<bool>> predicate)\n")),(0,i.kt)("h5",{id:"returns-25"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-25"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,<TProperty>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")," | ",(0,i.kt)("em",{parentName:"p"},"predicate")," | A lambda expression specifying the predicate"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-25"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-mustasynct-tpropertyirulebuildert-tproperty-funct-tproperty-propertyvalidatorcontext-cancellationtoken-taskboolean"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," MustAsync","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Func","<","T, TProperty, PropertyValidatorContext, CancellationToken, Task","<","Boolean",">",">",")"),(0,i.kt)("p",null,"Defines an asynchronous predicate validator on the current rule builder using a lambda expression to specify the predicate.\nValidation will fail if the specified lambda returns false.\nValidation will succeed if the specified lambda returns true.\nThis overload accepts the object being validated in addition to the property being validated."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L421"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> MustAsync<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Func<T, TProperty, PropertyValidatorContext, CancellationToken, Task<bool>> predicate)\n")),(0,i.kt)("h5",{id:"returns-26"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-26"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,<TProperty>,ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")," | ",(0,i.kt)("em",{parentName:"p"},"predicate")," | A lambda expression specifying the predicate"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-26"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthant-tpropertyirulebuildert-tproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThan","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", TProperty)"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder.\nThe validation will succeed if the property value is less than the specified value.\nThe validation will fail if the property value is greater than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L436"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> LessThan<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, TProperty valueToCompare)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-27"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-27"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-27"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthant-tpropertyirulebuildert-nullabletproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThan","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", TProperty)"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder.\nThe validation will succeed if the property value is less than the specified value.\nThe validation will fail if the property value is greater than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L452"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> LessThan<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, TProperty valueToCompare)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-28"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-28"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-28"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthanorequaltot-tpropertyirulebuildert-tproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", TProperty)"),(0,i.kt)("p",null,"Defines a ","'","less than or equal","'"," validator on the current rule builder.\nThe validation will succeed if the property value is less than or equal to the specified value.\nThe validation will fail if the property value is greater than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L468"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> LessThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, TProperty valueToCompare)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-29"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-29"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-29"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthanorequaltot-tpropertyirulebuildert-nullabletproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", TProperty)"),(0,i.kt)("p",null,"Defines a ","'","less than or equal","'"," validator on the current rule builder.\nThe validation will succeed if the property value is less than or equal to the specified value.\nThe validation will fail if the property value is greater than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L483"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> LessThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, TProperty valueToCompare)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-30"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-30"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-30"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthant-tpropertyirulebuildert-tproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThan","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", TProperty)"),(0,i.kt)("p",null,"Defines a ","'","greater than","'"," validator on the current rule builder.\nThe validation will succeed if the property value is greater than the specified value.\nThe validation will fail if the property value is less than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L498"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> GreaterThan<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, TProperty valueToCompare)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-31"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-31"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-31"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthant-tpropertyirulebuildert-nullabletproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThan","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", TProperty)"),(0,i.kt)("p",null,"Defines a ","'","greater than","'"," validator on the current rule builder.\nThe validation will succeed if the property value is greater than the specified value.\nThe validation will fail if the property value is less than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-33"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L513"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> GreaterThan<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, TProperty valueToCompare)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-32"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-32"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-32"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthanorequaltot-tpropertyirulebuildert-tproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", TProperty)"),(0,i.kt)("p",null,"Defines a ","'","greater than or equal","'"," validator on the current rule builder.\nThe validation will succeed if the property value is greater than or equal the specified value.\nThe validation will fail if the property value is less than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-34"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L528"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> GreaterThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, TProperty valueToCompare)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-33"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-33"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-33"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthanorequaltot-tpropertyirulebuildert-nullabletproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", TProperty)"),(0,i.kt)("p",null,"Defines a ","'","greater than or equal","'"," validator on the current rule builder.\nThe validation will succeed if the property value is greater than or equal the specified value.\nThe validation will fail if the property value is less than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-35"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L543"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> GreaterThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, TProperty valueToCompare)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-34"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-34"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-34"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthant-tpropertyirulebuildert-tproperty-expressionfunct-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThan","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is less than the specified value.\nThe validation will fail if the property value is greater than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-36"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L559"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> LessThan<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty>> expression)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-35"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-35"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | A lambda that should return the value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-35"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthant-tpropertyirulebuildert-tproperty-expressionfunct-nullabletproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThan","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, Nullable","<","TProperty",">",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is less than the specified value.\nThe validation will fail if the property value is greater than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-37"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L580"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> LessThan<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty?>> expression)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-36"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-36"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Nullable<<TProperty>>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | A lambda that should return the value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-36"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthant-tpropertyirulebuildert-nullabletproperty-expressionfunct-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThan","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", Expression","<","Func","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is less than the specified value.\nThe validation will fail if the property value is greater than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-38"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L602"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> LessThan<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, Expression<Func<T, TProperty>> expression)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-37"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-37"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | A lambda that should return the value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-37"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthant-tpropertyirulebuildert-nullabletproperty-expressionfunct-nullabletproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThan","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", Expression","<","Func","<","T, Nullable","<","TProperty",">",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is less than the specified value.\nThe validation will fail if the property value is greater than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-39"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L624"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> LessThan<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, Expression<Func<T, TProperty?>> expression)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-38"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-38"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Nullable<<TProperty>>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | A lambda that should return the value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-38"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthanorequaltot-tpropertyirulebuildert-tproperty-expressionfunct-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than or equal","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is less than or equal to the specified value.\nThe validation will fail if the property value is greater than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-40"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L646"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> LessThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty>> expression)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-39"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-39"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-39"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthanorequaltot-tpropertyirulebuildert-tproperty-expressionfunct-nullabletproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, Nullable","<","TProperty",">",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than or equal","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is less than or equal to the specified value.\nThe validation will fail if the property value is greater than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-41"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L666"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> LessThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty?>> expression)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-40"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-40"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Nullable<<TProperty>>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-40"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthanorequaltot-tpropertyirulebuildert-nullabletproperty-expressionfunct-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", Expression","<","Func","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than or equal","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is less than or equal to the specified value.\nThe validation will fail if the property value is greater than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-42"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L686"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> LessThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, Expression<Func<T, TProperty>> expression)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-41"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-41"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-41"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-lessthanorequaltot-tpropertyirulebuildert-nullabletproperty-expressionfunct-nullabletproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," LessThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", Expression","<","Func","<","T, Nullable","<","TProperty",">",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than or equal","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is less than or equal to the specified value.\nThe validation will fail if the property value is greater than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-43"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L706"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> LessThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, Expression<Func<T, TProperty?>> expression)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-42"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-42"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Nullable<<TProperty>>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-42"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthant-tpropertyirulebuildert-tproperty-expressionfunct-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThan","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is greater than the specified value.\nThe validation will fail if the property value is less than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-44"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L726"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> GreaterThan<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty>> expression)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-43"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-43"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-43"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthant-tpropertyirulebuildert-tproperty-expressionfunct-nullabletproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThan","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, Nullable","<","TProperty",">",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is greater than the specified value.\nThe validation will fail if the property value is less than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-45"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L746"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> GreaterThan<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty?>> expression)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-44"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-44"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Nullable<<TProperty>>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-44"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthant-tpropertyirulebuildert-nullabletproperty-expressionfunct-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThan","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", Expression","<","Func","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is greater than the specified value.\nThe validation will fail if the property value is less than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-46"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L766"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> GreaterThan<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, Expression<Func<T, TProperty>> expression)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-45"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-45"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-45"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthant-tpropertyirulebuildert-nullabletproperty-expressionfunct-nullabletproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThan","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", Expression","<","Func","<","T, Nullable","<","TProperty",">",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","less than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is greater than the specified value.\nThe validation will fail if the property value is less than or equal to the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-47"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L786"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> GreaterThan<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, Expression<Func<T, TProperty?>> expression)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-46"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-46"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Nullable<<TProperty>>>>")," | ",(0,i.kt)("em",{parentName:"p"},"expression")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-46"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthanorequaltot-tpropertyirulebuildert-tproperty-expressionfunct-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","greater than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is greater than or equal the specified value.\nThe validation will fail if the property value is less than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-48"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L806"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> GreaterThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty>> valueToCompare)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-47"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-47"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-47"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthanorequaltot-tpropertyirulebuildert-tproperty-expressionfunct-nullabletproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Expression","<","Func","<","T, Nullable","<","TProperty",">",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","greater than","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is greater than or equal the specified value.\nThe validation will fail if the property value is less than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-49"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L826"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> GreaterThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Expression<Func<T, TProperty?>> valueToCompare)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-48"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-48"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Nullable<<TProperty>>>>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-48"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthanorequaltot-tpropertyirulebuildert-nullabletproperty-expressionfunct-nullabletproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", Expression","<","Func","<","T, Nullable","<","TProperty",">",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","greater than or equal to","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is greater than or equal the specified value.\nThe validation will fail if the property value is less than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-50"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L846"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> GreaterThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, Expression<Func<T, TProperty?>> valueToCompare)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-49"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-49"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Nullable<<TProperty>>>>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-49"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-greaterthanorequaltot-tpropertyirulebuildert-nullabletproperty-expressionfunct-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GreaterThanOrEqualTo","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", Expression","<","Func","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines a ","'","greater than or equal to","'"," validator on the current rule builder using a lambda expression.\nThe validation will succeed if the property value is greater than or equal the specified value.\nThe validation will fail if the property value is less than the specified value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-51"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L865"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> GreaterThanOrEqualTo<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, Expression<Func<T, TProperty>> valueToCompare)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-50"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-50"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"valueToCompare")," | The value being compared"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-50"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-inclusivebetweent-tpropertyirulebuildert-tproperty-tproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," InclusiveBetween","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", TProperty, TProperty)"),(0,i.kt)("p",null,"Defines an ","'","inclusive between","'"," validator on the current rule builder, but only for properties of types that implement IComparable.\nValidation will fail if the value of the property is outside of the specified range. The range is inclusive."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-52"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L885"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> InclusiveBetween<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, TProperty from, TProperty to)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-51"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-51"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"from")," | The lowest allowed value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"to")," | The highest allowed value"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-51"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-inclusivebetweent-tpropertyirulebuildert-nullabletproperty-tproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," InclusiveBetween","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", TProperty, TProperty)"),(0,i.kt)("p",null,"Defines an ","'","inclusive between","'"," validator on the current rule builder, but only for properties of types that implement IComparable.\nValidation will fail if the value of the property is outside of the specified range. The range is inclusive."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-53"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L899"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> InclusiveBetween<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, TProperty from, TProperty to)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-52"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-52"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"from")," | The lowest allowed value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"to")," | The highest allowed value"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-52"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-exclusivebetweent-tpropertyirulebuildert-tproperty-tproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExclusiveBetween","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", TProperty, TProperty)"),(0,i.kt)("p",null,"Defines an ","'","exclusive between","'"," validator on the current rule builder, but only for properties of types that implement IComparable.\nValidation will fail if the value of the property is outside of the specified range. The range is exclusive."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-54"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L913"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> ExclusiveBetween<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, TProperty from, TProperty to)\n    where TProperty : IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-53"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-53"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"from")," | The lowest allowed value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"to")," | The highest allowed value"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-53"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-exclusivebetweent-tpropertyirulebuildert-nullabletproperty-tproperty-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ExclusiveBetween","<","T, TProperty",">","(IRuleBuilder","<","T, Nullable","<","TProperty",">",">",", TProperty, TProperty)"),(0,i.kt)("p",null,"Defines an ","'","exclusive between","'"," validator on the current rule builder, but only for properties of types that implement IComparable.\nValidation will fail if the value of the property is outside of the specified range. The range is exclusive."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-55"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L927"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty?> ExclusiveBetween<T, TProperty>(this IRuleBuilder<T, TProperty?> ruleBuilder, TProperty from, TProperty to)\n    where TProperty : struct, IComparable<TProperty>, IComparable\n")),(0,i.kt)("h5",{id:"returns-54"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("h5",{id:"parameters-54"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"from")," | The lowest allowed value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<TProperty>")," | ",(0,i.kt)("em",{parentName:"p"},"to")," | The highest allowed value"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-54"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-creditcardtirulebuildert-string"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," CreditCard","<","T",">","(IRuleBuilder","<","T, String",">",")"),(0,i.kt)("p",null,"Defines a credit card validator for the current rule builder that ensures that the specified string is a valid credit card number."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-56"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L934"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> CreditCard<T>(this IRuleBuilder<T, string> ruleBuilder)\n")),(0,i.kt)("h5",{id:"returns-55"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-55"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder"))))),(0,i.kt)("h5",{id:"type-parameters-55"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-isinenumt-tpropertyirulebuildert-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," IsInEnum","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",")"),(0,i.kt)("p",null,"Defines a enum value validator on the current rule builder that ensures that the specific value is a valid enum value."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-57"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L945"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> IsInEnum<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder)\n")),(0,i.kt)("h5",{id:"returns-56"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-56"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-56"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of Enum being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property being validated")))),(0,i.kt)("h3",{id:"-scaleprecisiontirulebuildert-decimal-int32-int32-boolean"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ScalePrecision","<","T",">","(IRuleBuilder","<","T, Decimal",">",", Int32, Int32, Boolean)"),(0,i.kt)("p",null,"Defines a scale precision validator on the current rule builder that ensures that the specific value has a certain scale and precision"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-58"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L958"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, decimal> ScalePrecision<T>(this IRuleBuilder<T, decimal> ruleBuilder, int scale, int precision, bool ignoreTrailingZeros = false)\n")),(0,i.kt)("h5",{id:"returns-57"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Decimal>")),(0,i.kt)("h5",{id:"parameters-57"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Decimal>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,i.kt)("em",{parentName:"p"},"scale")," | Allowed scale of the value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,i.kt)("em",{parentName:"p"},"precision")," | Allowed precision of the value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,i.kt)("em",{parentName:"p"},"ignoreTrailingZeros")," | Whether the validator will ignore trailing zeros."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-57"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-scaleprecisiontirulebuildert-nullabledecimal-int32-int32-boolean"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ScalePrecision","<","T",">","(IRuleBuilder","<","T, Nullable","<","Decimal",">",">",", Int32, Int32, Boolean)"),(0,i.kt)("p",null,"Defines a scale precision validator on the current rule builder that ensures that the specific value has a certain scale and precision"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-59"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L971"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, decimal?> ScalePrecision<T>(this IRuleBuilder<T, decimal?> ruleBuilder, int scale, int precision, bool ignoreTrailingZeros = false)\n")),(0,i.kt)("h5",{id:"returns-58"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Nullable<System.Decimal>>")),(0,i.kt)("h5",{id:"parameters-58"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Nullable<System.Decimal>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,i.kt)("em",{parentName:"p"},"scale")," | Allowed scale of the value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,i.kt)("em",{parentName:"p"},"precision")," | Allowed precision of the value"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,i.kt)("em",{parentName:"p"},"ignoreTrailingZeros")," | Whether the validator will ignore trailing zeros."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-58"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of object being validated")))),(0,i.kt)("h3",{id:"-customt-tpropertyirulebuildert-tproperty-actiontproperty-customcontext"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Custom","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Action","<","TProperty, CustomContext",">",")"),(0,i.kt)("p",null,"Defines a custom validation rule"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-60"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L983"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderInitial<T, TProperty> Custom<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Action<TProperty, CustomContext> action)\n")),(0,i.kt)("h5",{id:"returns-59"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitial<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-59"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action<<TProperty>,ServiceStack.FluentValidation.Validators.CustomContext>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action"))))),(0,i.kt)("h5",{id:"type-parameters-59"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,i.kt)("h3",{id:"-customasynct-tpropertyirulebuildert-tproperty-functproperty-customcontext-cancellationtoken-task"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," CustomAsync","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Func","<","TProperty, CustomContext, CancellationToken, Task",">",")"),(0,i.kt)("p",null,"Defines a custom validation rule"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-61"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L995"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderInitial<T, TProperty> CustomAsync<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Func<TProperty, CustomContext, CancellationToken, Task> action)\n")),(0,i.kt)("h5",{id:"returns-60"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitial<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-60"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<TProperty>,ServiceStack.FluentValidation.Validators.CustomContext,System.Threading.CancellationToken,System.Threading.Tasks.Task>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action"))))),(0,i.kt)("h5",{id:"type-parameters-60"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,i.kt)("h3",{id:"-foreacht-telementirulebuildert-ienumerabletelement-actionirulebuilderinitialcollectionienumerabletelement-telement"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ForEach","<","T, TElement",">","(IRuleBuilder","<","T, IEnumerable","<","TElement",">",">",", Action","<","IRuleBuilderInitialCollection","<","IEnumerable","<","TElement",">",", TElement",">",">",")"),(0,i.kt)("p",null,"Allows rules to be built against individual elements in the collection."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-62"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L1007"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, IEnumerable<TElement>> ForEach<T, TElement>(this IRuleBuilder<T, IEnumerable<TElement>> ruleBuilder, Action<IRuleBuilderInitialCollection<IEnumerable<TElement>, TElement>> action)\n")),(0,i.kt)("h5",{id:"returns-61"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.Collections.Generic.IEnumerable<<TElement>>>")),(0,i.kt)("h5",{id:"parameters-61"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.Collections.Generic.IEnumerable<<TElement>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action<ServiceStack.FluentValidation.IRuleBuilderInitialCollection<System.Collections.Generic.IEnumerable<<TElement>>,<TElement>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action"))))),(0,i.kt)("h5",{id:"type-parameters-61"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TElement"))),(0,i.kt)("h3",{id:"-isenumnametirulebuildert-string-type-boolean"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," IsEnumName","<","T",">","(IRuleBuilder","<","T, String",">",", Type, Boolean)"),(0,i.kt)("p",null,"Defines a enum value validator on the current rule builder that ensures that the specific value is a valid enum name."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-63"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L1022"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, string> IsEnumName<T>(this IRuleBuilder<T, string> ruleBuilder, Type enumType, bool caseSensitive = true)\n")),(0,i.kt)("h5",{id:"returns-62"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,System.String>")),(0,i.kt)("h5",{id:"parameters-62"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,System.String>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder on which the validator should be defined")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Type")," | ",(0,i.kt)("em",{parentName:"p"},"enumType")," | The enum whose the string should match any name"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,i.kt)("em",{parentName:"p"},"caseSensitive")," | If the comparison between the string and the enum names should be case sensitive"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-62"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of Enum being validated")))),(0,i.kt)("h3",{id:"-childrulest-tpropertyirulebuildert-tproperty-actioninlinevalidatortproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ChildRules","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Action","<","InlineValidator","<","TProperty",">",">",")"),(0,i.kt)("p",null,"Defines child rules for a nested property."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-64"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L1035"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> ChildRules<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Action<InlineValidator<TProperty>> action)\n")),(0,i.kt)("h5",{id:"returns-63"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-63"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The rule builder.")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Action<ServiceStack.FluentValidation.InlineValidator<<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"action")," | Callback that will be invoked to build the rules."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-63"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,i.kt)("h3",{id:"-setinheritancevalidatort-tpropertyirulebuildert-tproperty-actionpolymorphicvalidatort-tproperty"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," SetInheritanceValidator","<","T, TProperty",">","(IRuleBuilder","<","T, TProperty",">",", Action","<","PolymorphicValidator","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines one or more validators that can be used to validate sub-classes or implementors\nin an inheritance hierarchy. This is useful when the property being validated is an interface\nor base-class, but you want to define rules for properties of a specific subclass."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-65"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions.cs#L1050"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> SetInheritanceValidator<T, TProperty>(this IRuleBuilder<T, TProperty> ruleBuilder, Action<PolymorphicValidator<T, TProperty>> validatorConfiguration)\n")),(0,i.kt)("h5",{id:"returns-64"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,i.kt)("h5",{id:"parameters-64"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilder<<T>,<TProperty>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleBuilder")),(0,i.kt)("td",{parentName:"tr",align:"left"})))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Action<ServiceStack.FluentValidation.Validators.PolymorphicValidator<<T>,<TProperty>>>")," | ",(0,i.kt)("em",{parentName:"p"},"validatorConfiguration")," | Callback for setting up the inheritance validators."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-64"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,i.kt)("h3",{id:"-validatetivalidatort-t-actionvalidationstrategyt"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Validate","<","T",">","(IValidator","<","T",">",", T, Action","<","ValidationStrategy","<","T",">",">",")"),(0,i.kt)("p",null,"Validates the specified instance using a combination of extra options"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-66"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L38"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static ValidationResult Validate<T>(this IValidator<T> validator, T instance, Action<ValidationStrategy<T>> options)\n")),(0,i.kt)("h5",{id:"returns-65"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Results/ValidationResult"},"ServiceStack.FluentValidation.Results.ValidationResult")),(0,i.kt)("h5",{id:"parameters-65"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The validator")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The instance to validate"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Action<ServiceStack.FluentValidation.Internal.ValidationStrategy<<T>>>")," | ",(0,i.kt)("em",{parentName:"p"},"options")," | Callback to configure additional options"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-65"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validateasynctivalidatort-t-actionvalidationstrategyt-cancellationtoken"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAsync","<","T",">","(IValidator","<","T",">",", T, Action","<","ValidationStrategy","<","T",">",">",", CancellationToken)"),(0,i.kt)("p",null,"Validates the specified instance using a combination of extra options"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-67"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L51"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<ValidationResult> ValidateAsync<T>(this IValidator<T> validator, T instance, Action<ValidationStrategy<T>> options, CancellationToken cancellation = default(CancellationToken))\n")),(0,i.kt)("h5",{id:"returns-66"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult>")),(0,i.kt)("h5",{id:"parameters-66"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The validator")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The instance to validate"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Action<ServiceStack.FluentValidation.Internal.ValidationStrategy<<T>>>")," | ",(0,i.kt)("em",{parentName:"p"},"options")," | Callback to configure additional options"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.CancellationToken")," | ",(0,i.kt)("em",{parentName:"p"},"cancellation")," | Cancellation token"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-66"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validateandthrowtivalidatort-t"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAndThrow","<","T",">","(IValidator","<","T",">",", T)"),(0,i.kt)("p",null,"Performs validation and then throws an exception if validation fails.\nThis method is a shortcut for: Validate(instance, options =",">"," options.ThrowOnFailures());"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-68"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L61"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void ValidateAndThrow<T>(this IValidator<T> validator, T instance)\n")),(0,i.kt)("h5",{id:"parameters-67"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The validator this method is extending.")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The instance of the type we are validating."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-67"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validateandthrowasynctivalidatort-t-cancellationtoken"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAndThrowAsync","<","T",">","(IValidator","<","T",">",", T, CancellationToken)"),(0,i.kt)("p",null,"Performs validation asynchronously and then throws an exception if validation fails.\nThis method is a shortcut for: ValidateAsync(instance, options =",">"," options.ThrowOnFailures());"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-69"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L74"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static async Task ValidateAndThrowAsync<T>(this IValidator<T> validator, T instance, CancellationToken cancellationToken = default(CancellationToken))\n")),(0,i.kt)("h5",{id:"returns-67"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task")),(0,i.kt)("h5",{id:"parameters-68"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The validator this method is extending.")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The instance of the type we are validating."),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.CancellationToken")," | ",(0,i.kt)("em",{parentName:"p"},"cancellationToken")," | "),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-68"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validatetivalidatort-t-expressionfunct-object"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Validate","<","T",">","(IValidator","<","T",">",", T, Expression","<","Func","<","T, Object",">",">","[])"),(0,i.kt)("p",null,"Validates certain properties of the specified instance."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-70"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L87"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("This method will be removed in FluentValidation 10. Instead use Validate(instance, options => options.IncludeProperties(expressions))")]\npublic static ValidationResult Validate<T>(this IValidator<T> validator, T instance, params Expression<Func<T, object>>[] propertyExpressions)\n')),(0,i.kt)("h5",{id:"returns-68"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Results/ValidationResult"},"ServiceStack.FluentValidation.Results.ValidationResult"),": A ValidationResult object containing any validation failures"),(0,i.kt)("h5",{id:"parameters-69"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The current validator")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The object to validate"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Object>>[]")," | ",(0,i.kt)("em",{parentName:"p"},"propertyExpressions")," | Expressions to specify the properties to validate"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-69"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validatetivalidatort-t-string"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Validate","<","T",">","(IValidator","<","T",">",", T, String[])"),(0,i.kt)("p",null,"Validates certain properties of the specified instance."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-71"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L101"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("This method will be removed in FluentValidation 10. Instead use Validate(instance, options => options.IncludeProperties(properties))")]\npublic static ValidationResult Validate<T>(this IValidator<T> validator, T instance, params string[] properties)\n')),(0,i.kt)("h5",{id:"returns-69"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Results/ValidationResult"},"ServiceStack.FluentValidation.Results.ValidationResult"),": A ValidationResult object containing any validation failures."),(0,i.kt)("h5",{id:"parameters-70"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"})))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The object to validate"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.String[]")," | ",(0,i.kt)("em",{parentName:"p"},"properties")," | The names of the properties to validate."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-70"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validatetivalidatort-t-ivalidatorselector-string"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Validate","<","T",">","(IValidator","<","T",">",", T, IValidatorSelector, String)"),(0,i.kt)("p",null,"Validates an object using either a custom validator selector or a ruleset."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-72"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L117"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("This method will be removed in FluentValidation 10. Instead call Validate(instance, options => options.IncludeRuleSets(\\"someRuleSet\\",\\"anotherRuleSet\\")). Be sure to pass in separate strings rather than a comma-separated string.")]\npublic static ValidationResult Validate<T>(this IValidator<T> validator, T instance, IValidatorSelector selector = null, string ruleSet = null)\n')),(0,i.kt)("h5",{id:"returns-70"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Results/ValidationResult"},"ServiceStack.FluentValidation.Results.ValidationResult")),(0,i.kt)("h5",{id:"parameters-71"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"instance"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation.Internal/IValidatorSelector"},"ServiceStack.FluentValidation.Internal.IValidatorSelector")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"selector"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleSet"))))),(0,i.kt)("h5",{id:"type-parameters-71"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validateasynctivalidatort-t-cancellationtoken-expressionfunct-object"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAsync","<","T",">","(IValidator","<","T",">",", T, CancellationToken, Expression","<","Func","<","T, Object",">",">","[])"),(0,i.kt)("p",null,"Validates certain properties of the specified instance asynchronously."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-73"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L139"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("This method will be removed in FluentValidation 10. Instead use ValidateAsync(instance, options => options.IncludeProperties(expressions), cancellationToken)")]\npublic static Task<ValidationResult> ValidateAsync<T>(this IValidator<T> validator, T instance, CancellationToken cancellationToken = default(CancellationToken), params Expression<Func<T, object>>[] propertyExpressions)\n')),(0,i.kt)("h5",{id:"returns-71"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult>"),": A ValidationResult object containing any validation failures"),(0,i.kt)("h5",{id:"parameters-72"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The current validator")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The object to validate"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.CancellationToken")," | ",(0,i.kt)("em",{parentName:"p"},"cancellationToken")," | "),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Object>>[]")," | ",(0,i.kt)("em",{parentName:"p"},"propertyExpressions")," | Expressions to specify the properties to validate"),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-72"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validateasynctivalidatort-t-cancellationtoken-string"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAsync","<","T",">","(IValidator","<","T",">",", T, CancellationToken, String[])"),(0,i.kt)("p",null,"Validates certain properties of the specified instance asynchronously."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-74"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L152"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("This method will be removed in FluentValidation 10. Instead use ValidateAsync(instance, options => options.IncludeProperties(properties), cancellationToken)")]\npublic static Task<ValidationResult> ValidateAsync<T>(this IValidator<T> validator, T instance, CancellationToken cancellationToken = default(CancellationToken), params string[] properties)\n')),(0,i.kt)("h5",{id:"returns-72"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult>"),": A ValidationResult object containing any validation failures."),(0,i.kt)("h5",{id:"parameters-73"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"})))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The object to validate"),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.CancellationToken")," | ",(0,i.kt)("em",{parentName:"p"},"cancellationToken")," | "),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.String[]")," | ",(0,i.kt)("em",{parentName:"p"},"properties")," | The names of the properties to validate."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-73"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validateasynctivalidatort-t-cancellationtoken-ivalidatorselector-string"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAsync","<","T",">","(IValidator","<","T",">",", T, CancellationToken, IValidatorSelector, String)"),(0,i.kt)("p",null,"Validates an object asynchronously using a custom validator selector or a ruleset"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-75"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L167"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("This method will be removed in FluentValidation 10. Instead call ValidateAsync(instance, options => options.IncludeRuleSets(\\"someRuleSet\\",\\"anotherRuleSet\\"), cancellationToken). Be sure to pass in separate strings rather than a comma-separated string.")]\npublic static Task<ValidationResult> ValidateAsync<T>(this IValidator<T> validator, T instance, CancellationToken cancellationToken = default(CancellationToken), IValidatorSelector selector = null, string ruleSet = null)\n')),(0,i.kt)("h5",{id:"returns-73"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult>")),(0,i.kt)("h5",{id:"parameters-74"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"instance"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"cancellationToken"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation.Internal/IValidatorSelector"},"ServiceStack.FluentValidation.Internal.IValidatorSelector")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"selector"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleSet"))))),(0,i.kt)("h5",{id:"type-parameters-74"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validateandthrowtivalidatort-t-string"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAndThrow","<","T",">","(IValidator","<","T",">",", T, String)"),(0,i.kt)("p",null,"Performs validation and then throws an exception if validation fails."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-76"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L186"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("This method will be removed in FluentValidation 10. Instead call Validate(instance, options => options.IncludeRuleSets(\\"someRuleSet\\",\\"anotherRuleSet\\").ThrowOnFailures()). Be sure to pass in separate strings rather than a comma-separated string for rulesets.")]\npublic static void ValidateAndThrow<T>(this IValidator<T> validator, T instance, string ruleSet)\n')),(0,i.kt)("h5",{id:"parameters-75"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The validator this method is extending.")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The instance of the type we are validating."),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,i.kt)("em",{parentName:"p"},"ruleSet")," | Optional: a ruleset when need to validate against."),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-75"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"-validateandthrowasynctivalidatort-t-string-cancellationtoken"},(0,i.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAndThrowAsync","<","T",">","(IValidator","<","T",">",", T, String, CancellationToken)"),(0,i.kt)("p",null,"Performs validation asynchronously and then throws an exception if validation fails."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-77"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorExtensions_Validate.cs#L204"}," ",(0,i.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("This method will be removed in FluentValidation 10. Instead call ValidateAsync(instance, options => options.IncludeRuleSets(\\"someRuleSet\\",\\"anotherRuleSet\\").ThrowOnFailures(), cancellationToken). Be sure to pass in separate strings rather than a comma-separated string for rulesets.")]\npublic static async Task ValidateAndThrowAsync<T>(this IValidator<T> validator, T instance, string ruleSet, CancellationToken cancellationToken = default(CancellationToken))\n')),(0,i.kt)("h5",{id:"returns-74"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task")),(0,i.kt)("h5",{id:"parameters-76"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"validator")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The validator this method is extending.")))),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"<T>")," | ",(0,i.kt)("em",{parentName:"p"},"instance")," | The instance of the type we are validating."),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,i.kt)("em",{parentName:"p"},"ruleSet")," | Optional: a ruleset when need to validate against."),(0,i.kt)("p",null," |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.CancellationToken")," | ",(0,i.kt)("em",{parentName:"p"},"cancellationToken")," | "),(0,i.kt)("p",null," |"),(0,i.kt)("h5",{id:"type-parameters-76"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))))}u.isMDXComponent=!0}}]);