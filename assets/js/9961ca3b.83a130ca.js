"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[5265],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return k}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),m=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},o={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=m(r),k=a,u=d["".concat(p,".").concat(k)]||d[k]||o[k]||i;return r?n.createElement(u,l(l({ref:t},c),{},{components:r})):n.createElement(u,l({ref:t},c))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var m=2;m<i;m++)l[m]=r[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8284:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return c},default:function(){return d}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],s={title:"Class OrmLiteWriteExpressionsApiLegacy",sidebar_label:"OrmLiteWriteExpressionsApiLegacy"},p="Class OrmLiteWriteExpressionsApiLegacy",m={unversionedId:"api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiLegacy",id:"api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiLegacy",title:"Class OrmLiteWriteExpressionsApiLegacy",description:"Assembly: ServiceStack.OrmLite.dll",source:"@site/docs/api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiLegacy.md",sourceDirName:"api/ServiceStack.OrmLite.Legacy",slug:"/api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiLegacy",permalink:"/api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiLegacy",tags:[],version:"current",frontMatter:{title:"Class OrmLiteWriteExpressionsApiLegacy",sidebar_label:"OrmLiteWriteExpressionsApiLegacy"},sidebar:"apiSidebar",previous:{title:"OrmLiteWriteExpressionsApiAsyncLegacy",permalink:"/api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiAsyncLegacy"},next:{title:"Index",permalink:"/api/ServiceStack.OrmLite.MySql/"}},c=[{value:"<strong>Assembly</strong>: ServiceStack.OrmLite.dll",id:"assembly-servicestackormlitedll",children:[],level:6},{value:"View Source",id:"view-source",children:[],level:6},{value:"Methods",id:"methods",children:[{value:"InsertOnly&lt;T&gt;(IDbConnection, T, Func&lt;SqlExpression&lt;T&gt;, SqlExpression&lt;T&gt;&gt;)",id:"insertonlytidbconnection-t-funcsqlexpressiont-sqlexpressiont",children:[{value:"View Source",id:"view-source-1",children:[],level:6},{value:"Parameters",id:"parameters",children:[],level:5},{value:"Type Parameters",id:"type-parameters",children:[],level:5}],level:3},{value:"UpdateOnly&lt;T&gt;(IDbConnection, T, Func&lt;SqlExpression&lt;T&gt;, SqlExpression&lt;T&gt;&gt;)",id:"updateonlytidbconnection-t-funcsqlexpressiont-sqlexpressiont",children:[{value:"View Source",id:"view-source-2",children:[],level:6},{value:"Returns",id:"returns",children:[],level:5},{value:"Parameters",id:"parameters-1",children:[],level:5},{value:"Type Parameters",id:"type-parameters-1",children:[],level:5}],level:3},{value:"UpdateFmt&lt;T&gt;(IDbConnection, String, String)",id:"updatefmttidbconnection-string-string",children:[{value:"View Source",id:"view-source-3",children:[],level:6},{value:"Returns",id:"returns-1",children:[],level:5},{value:"Parameters",id:"parameters-2",children:[],level:5},{value:"Type Parameters",id:"type-parameters-2",children:[],level:5}],level:3},{value:"UpdateFmt(IDbConnection, String, String, String)",id:"updatefmtidbconnection-string-string-string",children:[{value:"View Source",id:"view-source-4",children:[],level:6},{value:"Returns",id:"returns-2",children:[],level:5},{value:"Parameters",id:"parameters-3",children:[],level:5}],level:3},{value:"DeleteFmt&lt;T&gt;(IDbConnection, String)",id:"deletefmttidbconnection-string",children:[{value:"View Source",id:"view-source-5",children:[],level:6},{value:"Returns",id:"returns-3",children:[],level:5},{value:"Parameters",id:"parameters-4",children:[],level:5},{value:"Type Parameters",id:"type-parameters-3",children:[],level:5}],level:3},{value:"DeleteFmt(IDbConnection, String, String)",id:"deletefmtidbconnection-string-string",children:[{value:"View Source",id:"view-source-6",children:[],level:6},{value:"Returns",id:"returns-4",children:[],level:5},{value:"Parameters",id:"parameters-5",children:[],level:5}],level:3},{value:"Delete&lt;T&gt;(IDbConnection, Func&lt;SqlExpression&lt;T&gt;, SqlExpression&lt;T&gt;&gt;)",id:"deletetidbconnection-funcsqlexpressiont-sqlexpressiont",children:[{value:"View Source",id:"view-source-7",children:[],level:6},{value:"Returns",id:"returns-5",children:[],level:5},{value:"Parameters",id:"parameters-6",children:[],level:5},{value:"Type Parameters",id:"type-parameters-4",children:[],level:5}],level:3},{value:"InsertOnly&lt;T&gt;(IDbConnection, T, SqlExpression&lt;T&gt;)",id:"insertonlytidbconnection-t-sqlexpressiont",children:[{value:"View Source",id:"view-source-8",children:[],level:6},{value:"Parameters",id:"parameters-7",children:[],level:5},{value:"Type Parameters",id:"type-parameters-5",children:[],level:5}],level:3}],level:2}],o={toc:c};function d(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"class-ormlitewriteexpressionsapilegacy"},"Class OrmLiteWriteExpressionsApiLegacy"),(0,i.kt)("h6",{id:"assembly-servicestackormlitedll"},(0,i.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.OrmLite.dll"),(0,i.kt)("h6",{id:"view-source"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiLegacy.cs#L6"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static class OrmLiteWriteExpressionsApiLegacy\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"insertonlytidbconnection-t-funcsqlexpressiont-sqlexpressiont"},"InsertOnly","<","T",">","(IDbConnection, T, Func","<","SqlExpression","<","T",">",", SqlExpression","<","T",">",">",")"),(0,i.kt)("p",null,"Insert only fields in POCO specified by the SqlExpression lambda. E.g:\n","<","p",">","db.InsertOnly(new Person { FirstName = ",'"',"Amy",'"',", Age = 27 }, q =",">"," q.Insert(p =",">"," new { p.FirstName, p.Age }))","<","/p",">"),(0,i.kt)("h6",{id:"view-source-1"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiLegacy.cs#L12"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("Use db.InsertOnly(obj, db.From<T>())")]\npublic static void InsertOnly<T>(this IDbConnection dbConn, T obj, Func<SqlExpression<T>, SqlExpression<T>> onlyFields)\n')),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"obj"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.OrmLite.SqlExpression<<T>>,ServiceStack.OrmLite.SqlExpression<<T>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"onlyFields"))))),(0,i.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"updateonlytidbconnection-t-funcsqlexpressiont-sqlexpressiont"},"UpdateOnly","<","T",">","(IDbConnection, T, Func","<","SqlExpression","<","T",">",", SqlExpression","<","T",">",">",")"),(0,i.kt)("p",null,"Use an SqlExpression to select which fields to update and construct the where expression, E.g: "),(0,i.kt)("p",null,"db.UpdateOnly(new Person { FirstName = ",'"',"JJ",'"'," }, ev =",">"," ev.Update(p =",">"," p.FirstName).Where(x =",">"," x.FirstName == ",'"',"Jimi",'"',"));\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"FirstName",'"'," = ","'","Jimi","'",")"),(0,i.kt)("p",null,"What","'","s not in the update expression doesn","'","t get updated. No where expression updates all rows. E.g:"),(0,i.kt)("p",null,"db.UpdateOnly(new Person { FirstName = ",'"',"JJ",'"',", LastName = ",'"',"Hendo",'"'," }, ev =",">"," ev.Update(p =",">"," p.FirstName));\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"),(0,i.kt)("h6",{id:"view-source-2"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiLegacy.cs#L29"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("Use db.UpdateOnly(model, db.From<T>())")]\npublic static int UpdateOnly<T>(this IDbConnection dbConn, T model, Func<SqlExpression<T>, SqlExpression<T>> onlyFields)\n')),(0,i.kt)("h5",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,i.kt)("h5",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"model"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.OrmLite.SqlExpression<<T>>,ServiceStack.OrmLite.SqlExpression<<T>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"onlyFields"))))),(0,i.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"updatefmttidbconnection-string-string"},"UpdateFmt","<","T",">","(IDbConnection, String, String)"),(0,i.kt)("p",null,"Flexible Update method to succinctly execute a free-text update statement using optional params. E.g:"),(0,i.kt)("p",null,"db.Update","<","Person",">","(set:",'"',"FirstName = {0}",'"',".Params(",'"',"JJ",'"',"), where:",'"',"LastName = {0}",'"',".Params(",'"',"Hendrix",'"',"));\nUPDATE ",'"',"Person",'"'," SET FirstName = ","'","JJ","'"," WHERE LastName = ","'","Hendrix","'"),(0,i.kt)("h6",{id:"view-source-3"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiLegacy.cs#L41"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static int UpdateFmt<T>(this IDbConnection dbConn, string set = null, string where = null)\n')),(0,i.kt)("h5",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,i.kt)("h5",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"set"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))))),(0,i.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"updatefmtidbconnection-string-string-string"},"UpdateFmt(IDbConnection, String, String, String)"),(0,i.kt)("p",null,"Flexible Update method to succinctly execute a free-text update statement using optional params. E.g."),(0,i.kt)("p",null,"db.Update(table:",'"',"Person",'"',", set: ",'"',"FirstName = {0}",'"',".Params(",'"',"JJ",'"',"), where: ",'"',"LastName = {0}",'"',".Params(",'"',"Hendrix",'"',"));\nUPDATE ",'"',"Person",'"'," SET FirstName = ","'","JJ","'"," WHERE LastName = ","'","Hendrix","'"),(0,i.kt)("h6",{id:"view-source-4"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiLegacy.cs#L53"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static int UpdateFmt(this IDbConnection dbConn, string table = null, string set = null, string where = null)\n')),(0,i.kt)("h5",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,i.kt)("h5",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"table"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"set"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))))),(0,i.kt)("h3",{id:"deletefmttidbconnection-string"},"DeleteFmt","<","T",">","(IDbConnection, String)"),(0,i.kt)("p",null,"Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g."),(0,i.kt)("p",null,"db.Delete","<","Person",">","(where:",'"',"Age = {0}",'"',".Params(27));\nDELETE FROM ",'"',"Person",'"'," WHERE Age = 27"),(0,i.kt)("h6",{id:"view-source-5"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiLegacy.cs#L65"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static int DeleteFmt<T>(this IDbConnection dbConn, string where = null)\n')),(0,i.kt)("h5",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,i.kt)("h5",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))))),(0,i.kt)("h5",{id:"type-parameters-3"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"deletefmtidbconnection-string-string"},"DeleteFmt(IDbConnection, String, String)"),(0,i.kt)("p",null,"Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g."),(0,i.kt)("p",null,"db.Delete(table:",'"',"Person",'"',", where: ",'"',"Age = {0}",'"',".Params(27));\nDELETE FROM ",'"',"Person",'"'," WHERE Age = 27"),(0,i.kt)("h6",{id:"view-source-6"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiLegacy.cs#L77"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static int DeleteFmt(this IDbConnection dbConn, string table = null, string where = null)\n')),(0,i.kt)("h5",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,i.kt)("h5",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"table"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))))),(0,i.kt)("h3",{id:"deletetidbconnection-funcsqlexpressiont-sqlexpressiont"},"Delete","<","T",">","(IDbConnection, Func","<","SqlExpression","<","T",">",", SqlExpression","<","T",">",">",")"),(0,i.kt)("p",null,"Delete the rows that matches the where expression, e.g:"),(0,i.kt)("p",null,"db.Delete","<","Person",">","(ev =",">"," ev.Where(p =",">"," p.Age == 27));\nDELETE FROM ",'"',"Person",'"'," WHERE (",'"',"Age",'"'," = 27)"),(0,i.kt)("h6",{id:"view-source-7"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiLegacy.cs#L89"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("Use db.Delete(db.From<T>())")]\npublic static int Delete<T>(this IDbConnection dbConn, Func<SqlExpression<T>, SqlExpression<T>> where)\n')),(0,i.kt)("h5",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,i.kt)("h5",{id:"parameters-6"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.OrmLite.SqlExpression<<T>>,ServiceStack.OrmLite.SqlExpression<<T>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))))),(0,i.kt)("h5",{id:"type-parameters-4"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"insertonlytidbconnection-t-sqlexpressiont"},"InsertOnly","<","T",">","(IDbConnection, T, SqlExpression","<","T",">",")"),(0,i.kt)("p",null,"Using an SqlExpression to only Insert the fields specified, e.g:"),(0,i.kt)("p",null,"db.InsertOnly(new Person { FirstName = ",'"',"Amy",'"'," }, q =",">"," q.Insert(p =",">"," new { p.FirstName }));\nINSERT INTO ",'"',"Person",'"'," (",'"',"FirstName",'"',") VALUES (","'","Amy","'",");"),(0,i.kt)("h6",{id:"view-source-8"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiLegacy.cs#L101"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("Use db.InsertOnly(() => new Person { ... })")]\npublic static void InsertOnly<T>(this IDbConnection dbConn, T obj, SqlExpression<T> onlyFields)\n')),(0,i.kt)("h5",{id:"parameters-7"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"obj"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.OrmLite/SqlExpression%60T%60"},"ServiceStack.OrmLite.SqlExpression","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"onlyFields"))))),(0,i.kt)("h5",{id:"type-parameters-5"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))))}d.isMDXComponent=!0}}]);