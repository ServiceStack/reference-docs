"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[93590],{26037:function(e,t,o){o.r(t),o.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return c},metadata:function(){return r},toc:function(){return d}});var i=o(83117),n=(o(67294),o(3905)),a=o(1954);const c={title:"Class ObjectPool<T>",sidebar_label:"ObjectPool<T>",description:"Generic implementation of object pooling pattern with predefined pool size limit. The main purpose is that limited number of frequently used objects can be kept in the pool for further recycling.\nNotes:  1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there is no space in the pool, extra returned objects will be dropped.\n2) it is implied that if object was obtained from a pool, the caller will return it back in a relatively short time. Keeping checked out objects for long durations is ok, but  reduces usefulness of pooling. Just new up your own.\nNot returning objects to the pool in not detrimental to the pool&apos;s work, but is a bad practice.  Rationale:  If there is no intent for reusing the object, do not use pool - just use &quot;new&quot;."},l='<Icon icon="codicon:symbol-class" className="symbol-class" /> ObjectPool&lt;T&gt;',r={unversionedId:"api/ServiceStack.Text.Pools/ObjectPool`T`",id:"api/ServiceStack.Text.Pools/ObjectPool`T`",title:"Class ObjectPool<T>",description:"Generic implementation of object pooling pattern with predefined pool size limit. The main purpose is that limited number of frequently used objects can be kept in the pool for further recycling.\nNotes:  1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there is no space in the pool, extra returned objects will be dropped.\n2) it is implied that if object was obtained from a pool, the caller will return it back in a relatively short time. Keeping checked out objects for long durations is ok, but  reduces usefulness of pooling. Just new up your own.\nNot returning objects to the pool in not detrimental to the pool&apos;s work, but is a bad practice.  Rationale:  If there is no intent for reusing the object, do not use pool - just use &quot;new&quot;.",source:"@site/docs/api/ServiceStack.Text.Pools/ObjectPool`T`.md",sourceDirName:"api/ServiceStack.Text.Pools",slug:"/api/ServiceStack.Text.Pools/ObjectPool`T`",permalink:"/api/ServiceStack.Text.Pools/ObjectPool`T`",draft:!1,tags:[],version:"current",frontMatter:{title:"Class ObjectPool<T>",sidebar_label:"ObjectPool<T>",description:"Generic implementation of object pooling pattern with predefined pool size limit. The main purpose is that limited number of frequently used objects can be kept in the pool for further recycling.\nNotes:  1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there is no space in the pool, extra returned objects will be dropped.\n2) it is implied that if object was obtained from a pool, the caller will return it back in a relatively short time. Keeping checked out objects for long durations is ok, but  reduces usefulness of pooling. Just new up your own.\nNot returning objects to the pool in not detrimental to the pool&apos;s work, but is a bad practice.  Rationale:  If there is no intent for reusing the object, do not use pool - just use &quot;new&quot;."},sidebar:"apiSidebar",previous:{title:"ObjectPool<T>.Factory",permalink:"/api/ServiceStack.Text.Pools/ObjectPool`T`.Factory"},next:{title:"PooledObject<T>",permalink:"/api/ServiceStack.Text.Pools/PooledObject`T`"}},s={},d=[{value:"<strong>Assembly</strong>: ServiceStack.Text.dll",id:"assembly-servicestacktextdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Allocate()',id:"-allocate",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Returns",id:"returns",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Free(T)',id:"-freet",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ForgetTrackedObject(T, T)',id:"-forgettrackedobjectt-t",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:"Parameters",id:"parameters-1",level:5}],u={toc:d};function p(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,i.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-objectpoolt"},(0,n.kt)(a.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," ObjectPool","<","T",">"),(0,n.kt)("p",null,"Generic implementation of object pooling pattern with predefined pool size limit. The main\npurpose is that limited number of frequently used objects can be kept in the pool for\nfurther recycling."),(0,n.kt)("p",null,"Notes:\n1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there\nis no space in the pool, extra returned objects will be dropped."),(0,n.kt)("p",null,"2) it is implied that if object was obtained from a pool, the caller will return it back in\na relatively short time. Keeping checked out objects for long durations is ok, but\nreduces usefulness of pooling. Just new up your own."),(0,n.kt)("p",null,"Not returning objects to the pool in not detrimental to the pool","'","s work, but is a bad practice.\nRationale:\nIf there is no intent for reusing the object, do not use pool - just use ",'"',"new",'"',"."),(0,n.kt)("h6",{id:"assembly-servicestacktextdll"},(0,n.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.Text.dll"),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/Pools/ObjectPool.cs#L39"}," ",(0,n.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public class ObjectPool<T>\n    where T : class\n")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"-allocate"},(0,n.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Allocate()"),(0,n.kt)("p",null,"Produces an instance."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/Pools/ObjectPool.cs#L133"}," ",(0,n.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public T Allocate()\n")),(0,n.kt)("h5",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"<T>")),(0,n.kt)("h3",{id:"-freet"},(0,n.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Free(T)"),(0,n.kt)("p",null,"Returns objects to the pool."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/Pools/ObjectPool.cs#L187"}," ",(0,n.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public void Free(T obj)\n")),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"<T>")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"obj"))))),(0,n.kt)("h3",{id:"-forgettrackedobjectt-t"},(0,n.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ForgetTrackedObject(T, T)"),(0,n.kt)("p",null,"Removes an object from leak tracking.  "),(0,n.kt)("p",null,"This is called when an object is returned to the pool.  It may also be explicitly\ncalled if an object allocated from the pool is intentionally not being returned\nto the pool.  This can be of use with pooled arrays if the consumer wants to\nreturn a larger array to the pool than was originally allocated."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/Pools/ObjectPool.cs#L229"}," ",(0,n.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Conditional("DEBUG")]\npublic void ForgetTrackedObject(T old, T replacement = null)\n')),(0,n.kt)("h5",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"<T>")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"old"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"<T>")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"replacement"))))))}p.isMDXComponent=!0}}]);