"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[91073],{22881:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return s},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var i=a(83117),r=(a(67294),a(3905)),n=a(1954);const l={title:"Class DefaultValidatorOptions",sidebar_label:"DefaultValidatorOptions",description:"Default options that can be used to configure a validator."},o='<Icon icon="codicon:symbol-class" className="symbol-class" /> DefaultValidatorOptions',c={unversionedId:"api/ServiceStack.FluentValidation/DefaultValidatorOptions",id:"api/ServiceStack.FluentValidation/DefaultValidatorOptions",title:"Class DefaultValidatorOptions",description:"Default options that can be used to configure a validator.",source:"@site/docs/api/ServiceStack.FluentValidation/DefaultValidatorOptions.md",sourceDirName:"api/ServiceStack.FluentValidation",slug:"/api/ServiceStack.FluentValidation/DefaultValidatorOptions",permalink:"/api/ServiceStack.FluentValidation/DefaultValidatorOptions",draft:!1,tags:[],version:"current",frontMatter:{title:"Class DefaultValidatorOptions",sidebar_label:"DefaultValidatorOptions",description:"Default options that can be used to configure a validator."},sidebar:"apiSidebar",previous:{title:"DefaultValidatorExtensionsServiceStack",permalink:"/api/ServiceStack.FluentValidation/DefaultValidatorExtensionsServiceStack"},next:{title:"DefaultValidator<T>",permalink:"/api/ServiceStack.FluentValidation/DefaultValidator`T`"}},p={},d=[{value:"<strong>Assembly</strong>: ServiceStack.dll",id:"assembly-servicestackdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Cascade&lt;T, TProperty&gt;(IRuleBuilderInitial&lt;T, TProperty&gt;, CascadeMode)',id:"-cascadet-tpropertyirulebuilderinitialt-tproperty-cascademode",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:"Type Parameters",id:"type-parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Cascade&lt;T, TProperty&gt;(IRuleBuilderInitialCollection&lt;T, TProperty&gt;, CascadeMode)',id:"-cascadet-tpropertyirulebuilderinitialcollectiont-tproperty-cascademode",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"Type Parameters",id:"type-parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> OnAnyFailure&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Action&lt;T&gt;)',id:"-onanyfailuret-tpropertyirulebuilderoptionst-tproperty-actiont",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:"Type Parameters",id:"type-parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> OnAnyFailure&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Action&lt;T, IEnumerable&lt;ValidationFailure&gt;&gt;)',id:"-onanyfailuret-tpropertyirulebuilderoptionst-tproperty-actiont-ienumerablevalidationfailure",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:"Type Parameters",id:"type-parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithMessage&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, String)',id:"-withmessaget-tpropertyirulebuilderoptionst-tproperty-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:"Type Parameters",id:"type-parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithMessage&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, String&gt;)',id:"-withmessaget-tpropertyirulebuilderoptionst-tproperty-funct-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:"Type Parameters",id:"type-parameters-5",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithMessage&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, TProperty, String&gt;)',id:"-withmessaget-tpropertyirulebuilderoptionst-tproperty-funct-tproperty-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7",level:6},{value:"Returns",id:"returns-6",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:"Type Parameters",id:"type-parameters-6",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithErrorCode&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, String)',id:"-witherrorcodet-tpropertyirulebuilderoptionst-tproperty-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8",level:6},{value:"Returns",id:"returns-7",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:"Type Parameters",id:"type-parameters-7",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> When&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, Boolean&gt;, ApplyConditionTo)',id:"-whent-tpropertyirulebuilderoptionst-tproperty-funct-boolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9",level:6},{value:"Returns",id:"returns-8",level:5},{value:"Parameters",id:"parameters-8",level:5},{value:"Type Parameters",id:"type-parameters-8",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> When&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, ValidationContext&lt;T&gt;, Boolean&gt;, ApplyConditionTo)',id:"-whent-tpropertyirulebuilderoptionst-tproperty-funct-validationcontextt-boolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10",level:6},{value:"Returns",id:"returns-9",level:5},{value:"Parameters",id:"parameters-9",level:5},{value:"Type Parameters",id:"type-parameters-9",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Unless&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, Boolean&gt;, ApplyConditionTo)',id:"-unlesst-tpropertyirulebuilderoptionst-tproperty-funct-boolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11",level:6},{value:"Returns",id:"returns-10",level:5},{value:"Parameters",id:"parameters-10",level:5},{value:"Type Parameters",id:"type-parameters-10",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Unless&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, ValidationContext&lt;T&gt;, Boolean&gt;, ApplyConditionTo)',id:"-unlesst-tpropertyirulebuilderoptionst-tproperty-funct-validationcontextt-boolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12",level:6},{value:"Returns",id:"returns-11",level:5},{value:"Parameters",id:"parameters-11",level:5},{value:"Type Parameters",id:"type-parameters-11",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WhenAsync&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, CancellationToken, Task&lt;Boolean&gt;&gt;, ApplyConditionTo)',id:"-whenasynct-tpropertyirulebuilderoptionst-tproperty-funct-cancellationtoken-taskboolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13",level:6},{value:"Returns",id:"returns-12",level:5},{value:"Parameters",id:"parameters-12",level:5},{value:"Type Parameters",id:"type-parameters-12",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WhenAsync&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, ValidationContext&lt;T&gt;, CancellationToken, Task&lt;Boolean&gt;&gt;, ApplyConditionTo)',id:"-whenasynct-tpropertyirulebuilderoptionst-tproperty-funct-validationcontextt-cancellationtoken-taskboolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14",level:6},{value:"Returns",id:"returns-13",level:5},{value:"Parameters",id:"parameters-13",level:5},{value:"Type Parameters",id:"type-parameters-13",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> UnlessAsync&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, CancellationToken, Task&lt;Boolean&gt;&gt;, ApplyConditionTo)',id:"-unlessasynct-tpropertyirulebuilderoptionst-tproperty-funct-cancellationtoken-taskboolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15",level:6},{value:"Returns",id:"returns-14",level:5},{value:"Parameters",id:"parameters-14",level:5},{value:"Type Parameters",id:"type-parameters-14",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> UnlessAsync&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, ValidationContext&lt;T&gt;, CancellationToken, Task&lt;Boolean&gt;&gt;, ApplyConditionTo)',id:"-unlessasynct-tpropertyirulebuilderoptionst-tproperty-funct-validationcontextt-cancellationtoken-taskboolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16",level:6},{value:"Returns",id:"returns-15",level:5},{value:"Parameters",id:"parameters-15",level:5},{value:"Type Parameters",id:"type-parameters-15",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Where&lt;T, TCollectionElement&gt;(IRuleBuilderInitialCollection&lt;T, TCollectionElement&gt;, Func&lt;TCollectionElement, Boolean&gt;)',id:"-wheret-tcollectionelementirulebuilderinitialcollectiont-tcollectionelement-functcollectionelement-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17",level:6},{value:"Returns",id:"returns-16",level:5},{value:"Parameters",id:"parameters-16",level:5},{value:"Type Parameters",id:"type-parameters-16",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> DependentRules&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Action)',id:"-dependentrulest-tpropertyirulebuilderoptionst-tproperty-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18",level:6},{value:"Returns",id:"returns-17",level:5},{value:"Parameters",id:"parameters-17",level:5},{value:"Type Parameters",id:"type-parameters-17",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithName&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, String)',id:"-withnamet-tpropertyirulebuilderoptionst-tproperty-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19",level:6},{value:"Returns",id:"returns-18",level:5},{value:"Parameters",id:"parameters-18",level:5},{value:"Type Parameters",id:"type-parameters-18",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithName&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, String&gt;)',id:"-withnamet-tpropertyirulebuilderoptionst-tproperty-funct-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20",level:6},{value:"Returns",id:"returns-19",level:5},{value:"Parameters",id:"parameters-19",level:5},{value:"Type Parameters",id:"type-parameters-19",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> OverridePropertyName&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, String)',id:"-overridepropertynamet-tpropertyirulebuilderoptionst-tproperty-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21",level:6},{value:"Returns",id:"returns-20",level:5},{value:"Parameters",id:"parameters-20",level:5},{value:"Type Parameters",id:"type-parameters-20",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> OverridePropertyName&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Expression&lt;Func&lt;T, Object&gt;&gt;)',id:"-overridepropertynamet-tpropertyirulebuilderoptionst-tproperty-expressionfunct-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22",level:6},{value:"Returns",id:"returns-21",level:5},{value:"Parameters",id:"parameters-21",level:5},{value:"Type Parameters",id:"type-parameters-21",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithState&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, Object&gt;)',id:"-withstatet-tpropertyirulebuilderoptionst-tproperty-funct-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23",level:6},{value:"Returns",id:"returns-22",level:5},{value:"Parameters",id:"parameters-22",level:5},{value:"Type Parameters",id:"type-parameters-22",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithState&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, TProperty, Object&gt;)',id:"-withstatet-tpropertyirulebuilderoptionst-tproperty-funct-tproperty-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24",level:6},{value:"Returns",id:"returns-23",level:5},{value:"Parameters",id:"parameters-23",level:5},{value:"Type Parameters",id:"type-parameters-23",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithSeverity&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Severity)',id:"-withseverityt-tpropertyirulebuilderoptionst-tproperty-severity",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25",level:6},{value:"Returns",id:"returns-24",level:5},{value:"Parameters",id:"parameters-24",level:5},{value:"Type Parameters",id:"type-parameters-24",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithSeverity&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, Severity&gt;)',id:"-withseverityt-tpropertyirulebuilderoptionst-tproperty-funct-severity",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26",level:6},{value:"Returns",id:"returns-25",level:5},{value:"Parameters",id:"parameters-25",level:5},{value:"Type Parameters",id:"type-parameters-25",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WithSeverity&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Func&lt;T, TProperty, Severity&gt;)',id:"-withseverityt-tpropertyirulebuilderoptionst-tproperty-funct-tproperty-severity",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27",level:6},{value:"Returns",id:"returns-26",level:5},{value:"Parameters",id:"parameters-26",level:5},{value:"Type Parameters",id:"type-parameters-26",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> OnFailure&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Action&lt;T&gt;)',id:"-onfailuret-tpropertyirulebuilderoptionst-tproperty-actiont",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28",level:6},{value:"Returns",id:"returns-27",level:5},{value:"Parameters",id:"parameters-27",level:5},{value:"Type Parameters",id:"type-parameters-27",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> OnFailure&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Action&lt;T, PropertyValidatorContext&gt;)',id:"-onfailuret-tpropertyirulebuilderoptionst-tproperty-actiont-propertyvalidatorcontext",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29",level:6},{value:"Returns",id:"returns-28",level:5},{value:"Parameters",id:"parameters-28",level:5},{value:"Type Parameters",id:"type-parameters-28",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> OnFailure&lt;T, TProperty&gt;(IRuleBuilderOptions&lt;T, TProperty&gt;, Action&lt;T, PropertyValidatorContext, String&gt;)',id:"-onfailuret-tpropertyirulebuilderoptionst-tproperty-actiont-propertyvalidatorcontext-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30",level:6},{value:"Returns",id:"returns-29",level:5},{value:"Parameters",id:"parameters-29",level:5},{value:"Type Parameters",id:"type-parameters-29",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> OverrideIndexer&lt;T, TCollectionElement&gt;(IRuleBuilderInitialCollection&lt;T, TCollectionElement&gt;, Func&lt;T, IEnumerable&lt;TCollectionElement&gt;, TCollectionElement, Int32, String&gt;)',id:"-overrideindexert-tcollectionelementirulebuilderinitialcollectiont-tcollectionelement-funct-ienumerabletcollectionelement-tcollectionelement-int32-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31",level:6},{value:"Returns",id:"returns-30",level:5},{value:"Parameters",id:"parameters-30",level:5},{value:"Type Parameters",id:"type-parameters-30",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStringForValidator&lt;T&gt;(ILanguageManager)',id:"-getstringforvalidatortilanguagemanager",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32",level:6},{value:"Returns",id:"returns-31",level:5},{value:"Parameters",id:"parameters-31",level:5},{value:"Type Parameters",id:"type-parameters-31",level:5}],u={toc:d};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-defaultvalidatoroptions"},(0,r.kt)(n.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," DefaultValidatorOptions"),(0,r.kt)("p",null,"Default options that can be used to configure a validator."),(0,r.kt)("h6",{id:"assembly-servicestackdll"},(0,r.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.dll"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L34"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static class DefaultValidatorOptions\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"-cascadet-tpropertyirulebuilderinitialt-tproperty-cascademode"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Cascade","<","T, TProperty",">","(IRuleBuilderInitial","<","T, TProperty",">",", CascadeMode)"),(0,r.kt)("p",null,"Specifies the cascade mode for failures.\nIf set to ","'","Stop","'"," then execution of the rule will stop once the first validator in the chain fails.\nIf set to ","'","Continue","'"," then all validators in the chain will execute regardless of failures."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L41"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderInitial<T, TProperty> Cascade<T, TProperty>(this IRuleBuilderInitial<T, TProperty> ruleBuilder, CascadeMode cascadeMode)\n")),(0,r.kt)("h5",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitial<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderInitial<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"ruleBuilder"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/CascadeMode"},"ServiceStack.FluentValidation.CascadeMode")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cascadeMode"))))),(0,r.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-cascadet-tpropertyirulebuilderinitialcollectiont-tproperty-cascademode"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Cascade","<","T, TProperty",">","(IRuleBuilderInitialCollection","<","T, TProperty",">",", CascadeMode)"),(0,r.kt)("p",null,"Specifies the cascade mode for failures.\nIf set to ","'","Stop","'"," then execution of the rule will stop once the first validator in the chain fails.\nIf set to ","'","Continue","'"," then all validators in the chain will execute regardless of failures."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L52"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderInitialCollection<T, TProperty> Cascade<T, TProperty>(this IRuleBuilderInitialCollection<T, TProperty> ruleBuilder, CascadeMode cascadeMode)\n")),(0,r.kt)("h5",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitialCollection<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderInitialCollection<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"ruleBuilder"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/CascadeMode"},"ServiceStack.FluentValidation.CascadeMode")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"cascadeMode"))))),(0,r.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-onanyfailuret-tpropertyirulebuilderoptionst-tproperty-actiont"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," OnAnyFailure","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Action","<","T",">",")"),(0,r.kt)("p",null,"Specifies a custom action to be invoked when the validator fails."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L66"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> OnAnyFailure<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Action<T> onFailure)\n")),(0,r.kt)("h5",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<<T>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onFailure"))))),(0,r.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-onanyfailuret-tpropertyirulebuilderoptionst-tproperty-actiont-ienumerablevalidationfailure"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," OnAnyFailure","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Action","<","T, IEnumerable","<","ValidationFailure",">",">",")"),(0,r.kt)("p",null,"Specifies a custom action to be invoked when the validator fails."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L81"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> OnAnyFailure<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Action<T, IEnumerable<ValidationFailure>> onFailure)\n")),(0,r.kt)("h5",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<<T>,System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onFailure"))))),(0,r.kt)("h5",{id:"type-parameters-3"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withmessaget-tpropertyirulebuilderoptionst-tproperty-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithMessage","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", String)"),(0,r.kt)("p",null,"Specifies a custom error message to use when validation fails. Only applies to the rule that directly precedes it."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L94"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithMessage<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, string errorMessage)\n")),(0,r.kt)("h5",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"errorMessage")," | The error message to use"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-4"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withmessaget-tpropertyirulebuilderoptionst-tproperty-funct-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithMessage","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, String",">",")"),(0,r.kt)("p",null,"Specifies a custom error message to use when validation fails. Only applies to the rule that directly precedes it."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L107"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithMessage<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, string> messageProvider)\n")),(0,r.kt)("h5",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.String>")," | ",(0,r.kt)("em",{parentName:"p"},"messageProvider")," | Delegate that will be invoked to retrieve the localized message. "),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-5"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withmessaget-tpropertyirulebuilderoptionst-tproperty-funct-tproperty-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithMessage","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, TProperty, String",">",")"),(0,r.kt)("p",null,"Specifies a custom error message to use when validation fails. Only applies to the rule that directly precedes it."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L128"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithMessage<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, TProperty, string> messageProvider)\n")),(0,r.kt)("h5",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,<TProperty>,System.String>")," | ",(0,r.kt)("em",{parentName:"p"},"messageProvider")," | Delegate that will be invoked.Uses_localized_name to retrieve the localized message. "),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-6"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-witherrorcodet-tpropertyirulebuilderoptionst-tproperty-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithErrorCode","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", String)"),(0,r.kt)("p",null,"Specifies a custom error code to use if validation fails."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L150"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithErrorCode<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, string errorCode)\n")),(0,r.kt)("h5",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"errorCode")," | The error code to use"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-7"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-whent-tpropertyirulebuilderoptionst-tproperty-funct-boolean-applyconditionto"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," When","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, Boolean",">",", ApplyConditionTo)"),(0,r.kt)("p",null,"Specifies a condition limiting when the validator should run.\nThe validator will only be executed if the result of the lambda returns true."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L166"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> When<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, bool> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,r.kt)("h5",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.Boolean>")," | ",(0,r.kt)("em",{parentName:"p"},"predicate")," | A lambda expression that specifies a condition for when the validator should run"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,r.kt)("em",{parentName:"p"},"applyConditionTo")," | Whether the condition should be applied to the current rule or all rules in the chain"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-8"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-whent-tpropertyirulebuilderoptionst-tproperty-funct-validationcontextt-boolean-applyconditionto"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," When","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, ValidationContext","<","T",">",", Boolean",">",", ApplyConditionTo)"),(0,r.kt)("p",null,"Specifies a condition limiting when the validator should run.\nThe validator will only be executed if the result of the lambda returns true."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L179"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> When<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, ValidationContext<T>, bool> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,r.kt)("h5",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,ServiceStack.FluentValidation.ValidationContext<<T>>,System.Boolean>")," | ",(0,r.kt)("em",{parentName:"p"},"predicate")," | A lambda expression that specifies a condition for when the validator should run"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,r.kt)("em",{parentName:"p"},"applyConditionTo")," | Whether the condition should be applied to the current rule or all rules in the chain"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-9"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-unlesst-tpropertyirulebuilderoptionst-tproperty-funct-boolean-applyconditionto"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Unless","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, Boolean",">",", ApplyConditionTo)"),(0,r.kt)("p",null,"Specifies a condition limiting when the validator should not run.\nThe validator will only be executed if the result of the lambda returns false."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L195"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> Unless<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, bool> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,r.kt)("h5",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.Boolean>")," | ",(0,r.kt)("em",{parentName:"p"},"predicate")," | A lambda expression that specifies a condition for when the validator should not run"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,r.kt)("em",{parentName:"p"},"applyConditionTo")," | Whether the condition should be applied to the current rule or all rules in the chain"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-10"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-unlesst-tpropertyirulebuilderoptionst-tproperty-funct-validationcontextt-boolean-applyconditionto"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Unless","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, ValidationContext","<","T",">",", Boolean",">",", ApplyConditionTo)"),(0,r.kt)("p",null,"Specifies a condition limiting when the validator should not run.\nThe validator will only be executed if the result of the lambda returns false."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L208"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> Unless<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, ValidationContext<T>, bool> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,r.kt)("h5",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,ServiceStack.FluentValidation.ValidationContext<<T>>,System.Boolean>")," | ",(0,r.kt)("em",{parentName:"p"},"predicate")," | A lambda expression that specifies a condition for when the validator should not run"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,r.kt)("em",{parentName:"p"},"applyConditionTo")," | Whether the condition should be applied to the current rule or all rules in the chain"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-11"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-whenasynct-tpropertyirulebuilderoptionst-tproperty-funct-cancellationtoken-taskboolean-applyconditionto"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WhenAsync","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, CancellationToken, Task","<","Boolean",">",">",", ApplyConditionTo)"),(0,r.kt)("p",null,"Specifies an asynchronous condition limiting when the validator should run.\nThe validator will only be executed if the result of the lambda returns true."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L221"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WhenAsync<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, CancellationToken, Task<bool>> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,r.kt)("h5",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")," | ",(0,r.kt)("em",{parentName:"p"},"predicate")," | A lambda expression that specifies a condition for when the validator should run"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,r.kt)("em",{parentName:"p"},"applyConditionTo")," | Whether the condition should be applied to the current rule or all rules in the chain"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-12"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-whenasynct-tpropertyirulebuilderoptionst-tproperty-funct-validationcontextt-cancellationtoken-taskboolean-applyconditionto"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WhenAsync","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, ValidationContext","<","T",">",", CancellationToken, Task","<","Boolean",">",">",", ApplyConditionTo)"),(0,r.kt)("p",null,"Specifies an asynchronous condition limiting when the validator should run.\nThe validator will only be executed if the result of the lambda returns true."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L234"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WhenAsync<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, ValidationContext<T>, CancellationToken, Task<bool>> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,r.kt)("h5",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,ServiceStack.FluentValidation.ValidationContext<<T>>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")," | ",(0,r.kt)("em",{parentName:"p"},"predicate")," | A lambda expression that specifies a condition for when the validator should run"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,r.kt)("em",{parentName:"p"},"applyConditionTo")," | Whether the condition should be applied to the current rule or all rules in the chain"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-13"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-unlessasynct-tpropertyirulebuilderoptionst-tproperty-funct-cancellationtoken-taskboolean-applyconditionto"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," UnlessAsync","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, CancellationToken, Task","<","Boolean",">",">",", ApplyConditionTo)"),(0,r.kt)("p",null,"Specifies an asynchronous condition limiting when the validator should not run.\nThe validator will only be executed if the result of the lambda returns false."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L250"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> UnlessAsync<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, CancellationToken, Task<bool>> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,r.kt)("h5",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-14"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")," | ",(0,r.kt)("em",{parentName:"p"},"predicate")," | A lambda expression that specifies a condition for when the validator should not run"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,r.kt)("em",{parentName:"p"},"applyConditionTo")," | Whether the condition should be applied to the current rule or all rules in the chain"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-14"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-unlessasynct-tpropertyirulebuilderoptionst-tproperty-funct-validationcontextt-cancellationtoken-taskboolean-applyconditionto"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," UnlessAsync","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, ValidationContext","<","T",">",", CancellationToken, Task","<","Boolean",">",">",", ApplyConditionTo)"),(0,r.kt)("p",null,"Specifies an asynchronous condition limiting when the validator should not run.\nThe validator will only be executed if the result of the lambda returns false."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L263"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> UnlessAsync<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, ValidationContext<T>, CancellationToken, Task<bool>> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,r.kt)("h5",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-15"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,ServiceStack.FluentValidation.ValidationContext<<T>>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")," | ",(0,r.kt)("em",{parentName:"p"},"predicate")," | A lambda expression that specifies a condition for when the validator should not run"),(0,r.kt)("p",null," |\n| ",(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,r.kt)("em",{parentName:"p"},"applyConditionTo")," | Whether the condition should be applied to the current rule or all rules in the chain"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-15"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-wheret-tcollectionelementirulebuilderinitialcollectiont-tcollectionelement-functcollectionelement-boolean"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Where","<","T, TCollectionElement",">","(IRuleBuilderInitialCollection","<","T, TCollectionElement",">",", Func","<","TCollectionElement, Boolean",">",")"),(0,r.kt)("p",null,"Applies a filter to a collection property."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L274"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderInitialCollection<T, TCollectionElement> Where<T, TCollectionElement>(this IRuleBuilderInitialCollection<T, TCollectionElement> rule, Func<TCollectionElement, bool> predicate)\n")),(0,r.kt)("h5",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitialCollection<<T>,<TCollectionElement>>")),(0,r.kt)("h5",{id:"parameters-16"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderInitialCollection<<T>,<TCollectionElement>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<TCollectionElement>,System.Boolean>")," | ",(0,r.kt)("em",{parentName:"p"},"predicate")," | The condition"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-16"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TCollectionElement"))),(0,r.kt)("h3",{id:"-dependentrulest-tpropertyirulebuilderoptionst-tproperty-action"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," DependentRules","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Action)"),(0,r.kt)("p",null,"Triggers an action when the rule passes. Typically used to configure dependent rules. This applies to all preceding rules in the chain."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L288"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> DependentRules<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Action action)\n")),(0,r.kt)("h5",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-17"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Action")," | ",(0,r.kt)("em",{parentName:"p"},"action")," | An action to be invoked if the rule is valid"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-17"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withnamet-tpropertyirulebuilderoptionst-tproperty-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithName","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", String)"),(0,r.kt)("p",null,"Specifies a custom property name to use within the error message."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L329"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithName<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, string overridePropertyName)\n")),(0,r.kt)("h5",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-18"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"overridePropertyName")," | The property name to use"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-18"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withnamet-tpropertyirulebuilderoptionst-tproperty-funct-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithName","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, String",">",")"),(0,r.kt)("p",null,"Specifies a custom property name to use within the error message."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L342"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithName<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, string> nameProvider)\n")),(0,r.kt)("h5",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-19"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.String>")," | ",(0,r.kt)("em",{parentName:"p"},"nameProvider")," | Func used to retrieve the property","'","s display name"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-19"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-overridepropertynamet-tpropertyirulebuilderoptionst-tproperty-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," OverridePropertyName","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", String)"),(0,r.kt)("p",null,"Overrides the name of the property associated with this rule.\nNOTE: This is a considered to be an advanced feature. Most of the time that you use this, you actually meant to use WithName."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L359"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> OverridePropertyName<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, string propertyName)\n")),(0,r.kt)("h5",{id:"returns-20"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-20"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"propertyName")," | The property name to use"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-20"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-overridepropertynamet-tpropertyirulebuilderoptionst-tproperty-expressionfunct-object"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," OverridePropertyName","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Expression","<","Func","<","T, Object",">",">",")"),(0,r.kt)("p",null,"Overrides the name of the property associated with this rule.\nNOTE: This is a considered to be an advanced feature. Most of the time that you use this, you actually meant to use WithName."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L372"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> OverridePropertyName<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Expression<Func<T, object>> expr)\n")),(0,r.kt)("h5",{id:"returns-21"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-21"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Object>>")," | ",(0,r.kt)("em",{parentName:"p"},"expr")," | An expression referencing another property"),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-21"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withstatet-tpropertyirulebuilderoptionst-tproperty-funct-object"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithState","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, Object",">",")"),(0,r.kt)("p",null,"Specifies custom state that should be stored alongside the validation message when validation fails for this rule."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L387"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithState<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, object> stateProvider)\n")),(0,r.kt)("h5",{id:"returns-22"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-22"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,System.Object>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"stateProvider"))))),(0,r.kt)("h5",{id:"type-parameters-22"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withstatet-tpropertyirulebuilderoptionst-tproperty-funct-tproperty-object"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithState","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, TProperty, Object",">",")"),(0,r.kt)("p",null,"Specifies custom state that should be stored alongside the validation message when validation fails for this rule."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L401"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithState<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, TProperty, object> stateProvider)\n")),(0,r.kt)("h5",{id:"returns-23"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-23"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,<TProperty>,System.Object>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"stateProvider"))))),(0,r.kt)("h5",{id:"type-parameters-23"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withseverityt-tpropertyirulebuilderoptionst-tproperty-severity"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithSeverity","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Severity)"),(0,r.kt)("p",null,"Specifies custom severity that should be stored alongside the validation message when validation fails for this rule."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L419"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithSeverity<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Severity severity)\n")),(0,r.kt)("h5",{id:"returns-24"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-24"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/Severity"},"ServiceStack.FluentValidation.Severity")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"severity"))))),(0,r.kt)("h5",{id:"type-parameters-24"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withseverityt-tpropertyirulebuilderoptionst-tproperty-funct-severity"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithSeverity","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, Severity",">",")"),(0,r.kt)("p",null,"Specifies custom severity that should be stored alongside the validation message when validation fails for this rule."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L431"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithSeverity<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, Severity> severityProvider)\n")),(0,r.kt)("h5",{id:"returns-25"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-25"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,ServiceStack.FluentValidation.Severity>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"severityProvider"))))),(0,r.kt)("h5",{id:"type-parameters-25"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-withseverityt-tpropertyirulebuilderoptionst-tproperty-funct-tproperty-severity"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WithSeverity","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Func","<","T, TProperty, Severity",">",")"),(0,r.kt)("p",null,"Specifies custom severity that should be stored alongside the validation message when validation fails for this rule."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L449"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> WithSeverity<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Func<T, TProperty, Severity> severityProvider)\n")),(0,r.kt)("h5",{id:"returns-26"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-26"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,<TProperty>,ServiceStack.FluentValidation.Severity>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"severityProvider"))))),(0,r.kt)("h5",{id:"type-parameters-26"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-onfailuret-tpropertyirulebuilderoptionst-tproperty-actiont"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," OnFailure","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Action","<","T",">",")"),(0,r.kt)("p",null,"Specifies custom method that will be called when specific rule fails"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L467"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> OnFailure<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Action<T> onFailure)\n")),(0,r.kt)("h5",{id:"returns-27"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-27"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<<T>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onFailure"))))),(0,r.kt)("h5",{id:"type-parameters-27"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-onfailuret-tpropertyirulebuilderoptionst-tproperty-actiont-propertyvalidatorcontext"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," OnFailure","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Action","<","T, PropertyValidatorContext",">",")"),(0,r.kt)("p",null,"Specifies custom method that will be called when specific rule fails"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L479"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> OnFailure<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Action<T, PropertyValidatorContext> onFailure)\n")),(0,r.kt)("h5",{id:"returns-28"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-28"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<<T>,ServiceStack.FluentValidation.Validators.PropertyValidatorContext>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onFailure"))))),(0,r.kt)("h5",{id:"type-parameters-28"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-onfailuret-tpropertyirulebuilderoptionst-tproperty-actiont-propertyvalidatorcontext-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," OnFailure","<","T, TProperty",">","(IRuleBuilderOptions","<","T, TProperty",">",", Action","<","T, PropertyValidatorContext, String",">",")"),(0,r.kt)("p",null,"Specifies custom method that will be called when specific rule fails"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L491"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderOptions<T, TProperty> OnFailure<T, TProperty>(this IRuleBuilderOptions<T, TProperty> rule, Action<T, PropertyValidatorContext, string> onFailure)\n")),(0,r.kt)("h5",{id:"returns-29"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("h5",{id:"parameters-29"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderOptions<<T>,<TProperty>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<<T>,ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.String>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onFailure"))))),(0,r.kt)("h5",{id:"type-parameters-29"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TProperty"))),(0,r.kt)("h3",{id:"-overrideindexert-tcollectionelementirulebuilderinitialcollectiont-tcollectionelement-funct-ienumerabletcollectionelement-tcollectionelement-int32-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," OverrideIndexer","<","T, TCollectionElement",">","(IRuleBuilderInitialCollection","<","T, TCollectionElement",">",", Func","<","T, IEnumerable","<","TCollectionElement",">",", TCollectionElement, Int32, String",">",")"),(0,r.kt)("p",null,"Allows the generated indexer to be overridden for collection rules."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L501"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static IRuleBuilderInitialCollection<T, TCollectionElement> OverrideIndexer<T, TCollectionElement>(this IRuleBuilderInitialCollection<T, TCollectionElement> rule, Func<T, IEnumerable<TCollectionElement>, TCollectionElement, int, string> callback)\n")),(0,r.kt)("h5",{id:"returns-30"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitialCollection<<T>,<TCollectionElement>>")),(0,r.kt)("h5",{id:"parameters-30"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ServiceStack.FluentValidation.IRuleBuilderInitialCollection<<T>,<TCollectionElement>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"rule")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The current rule")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Func<<T>,System.Collections.Generic.IEnumerable<<TCollectionElement>>,<TCollectionElement>,System.Int32,System.String>")," | ",(0,r.kt)("em",{parentName:"p"},"callback")," | The callback. Receives the model, the collection, the current element and the current index as parameters. Should return a string representation of the indexer. The default is ",'"','["'," + index + ",'"]','"'),(0,r.kt)("p",null," |"),(0,r.kt)("h5",{id:"type-parameters-30"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TCollectionElement"))),(0,r.kt)("h3",{id:"-getstringforvalidatortilanguagemanager"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStringForValidator","<","T",">","(ILanguageManager)"),(0,r.kt)("p",null,"Gets the default message for a property validator"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/DefaultValidatorOptions.cs#L514"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static string GetStringForValidator<T>(this ILanguageManager languageManager)\n")),(0,r.kt)("h5",{id:"returns-31"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.String"),": The translated string"),(0,r.kt)("h5",{id:"parameters-31"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation.Resources/ILanguageManager"},"ServiceStack.FluentValidation.Resources.ILanguageManager")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"languageManager"))))),(0,r.kt)("h5",{id:"type-parameters-31"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The validator type")))))}s.isMDXComponent=!0}}]);