"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[265],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return k}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),c=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(m.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),k=r,b=d["".concat(m,".").concat(k)]||d[k]||s[k]||i;return a?n.createElement(b,l(l({ref:t},p),{},{components:a})):n.createElement(b,l({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},62110:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return s},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return c}});var n=a(83117),r=(a(67294),a(3905));const i={title:"Class OrmLiteSchemaApi",sidebar_label:"OrmLiteSchemaApi"},l="Class OrmLiteSchemaApi",o={unversionedId:"api/ServiceStack.OrmLite/OrmLiteSchemaApi",id:"api/ServiceStack.OrmLite/OrmLiteSchemaApi",title:"Class OrmLiteSchemaApi",description:"Assembly: ServiceStack.OrmLite.dll",source:"@site/docs/api/ServiceStack.OrmLite/OrmLiteSchemaApi.md",sourceDirName:"api/ServiceStack.OrmLite",slug:"/api/ServiceStack.OrmLite/OrmLiteSchemaApi",permalink:"/api/ServiceStack.OrmLite/OrmLiteSchemaApi",draft:!1,tags:[],version:"current",frontMatter:{title:"Class OrmLiteSchemaApi",sidebar_label:"OrmLiteSchemaApi"},sidebar:"apiSidebar",previous:{title:"OrmLiteSPStatement",permalink:"/api/ServiceStack.OrmLite/OrmLiteSPStatement"},next:{title:"OrmLiteSchemaModifyApi",permalink:"/api/ServiceStack.OrmLite/OrmLiteSchemaModifyApi"}},m={},c=[{value:"<strong>Assembly</strong>: ServiceStack.OrmLite.dll",id:"assembly-servicestackormlitedll",level:6},{value:"View Source",id:"view-source",level:6},{value:"Methods",id:"methods",level:2},{value:"TableExists(IDbConnection, String, String)",id:"tableexistsidbconnection-string-string",level:3},{value:"View Source",id:"view-source-1",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:"TableExistsAsync(IDbConnection, String, String, CancellationToken)",id:"tableexistsasyncidbconnection-string-string-cancellationtoken",level:3},{value:"View Source",id:"view-source-2",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"TableExists&lt;T&gt;(IDbConnection)",id:"tableexiststidbconnection",level:3},{value:"View Source",id:"view-source-3",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:"Type Parameters",id:"type-parameters",level:5},{value:"TableExistsAsync&lt;T&gt;(IDbConnection, CancellationToken)",id:"tableexistsasynctidbconnection-cancellationtoken",level:3},{value:"View Source",id:"view-source-4",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:"Type Parameters",id:"type-parameters-1",level:5},{value:"ColumnExists(IDbConnection, String, String, String)",id:"columnexistsidbconnection-string-string-string",level:3},{value:"View Source",id:"view-source-5",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:"ColumnExistsAsync(IDbConnection, String, String, String, CancellationToken)",id:"columnexistsasyncidbconnection-string-string-string-cancellationtoken",level:3},{value:"View Source",id:"view-source-6",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:"ColumnExists&lt;T&gt;(IDbConnection, Expression&lt;Func&lt;T, Object&gt;&gt;)",id:"columnexiststidbconnection-expressionfunct-object",level:3},{value:"View Source",id:"view-source-7",level:6},{value:"Returns",id:"returns-6",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:"Type Parameters",id:"type-parameters-2",level:5},{value:"ColumnExistsAsync&lt;T&gt;(IDbConnection, Expression&lt;Func&lt;T, Object&gt;&gt;, CancellationToken)",id:"columnexistsasynctidbconnection-expressionfunct-object-cancellationtoken",level:3},{value:"View Source",id:"view-source-8",level:6},{value:"Returns",id:"returns-7",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:"Type Parameters",id:"type-parameters-3",level:5},{value:"CreateSchema&lt;T&gt;(IDbConnection)",id:"createschematidbconnection",level:3},{value:"View Source",id:"view-source-9",level:6},{value:"Parameters",id:"parameters-8",level:5},{value:"Type Parameters",id:"type-parameters-4",level:5},{value:"CreateSchema(IDbConnection, String)",id:"createschemaidbconnection-string",level:3},{value:"View Source",id:"view-source-10",level:6},{value:"Returns",id:"returns-8",level:5},{value:"Parameters",id:"parameters-9",level:5},{value:"CreateTables(IDbConnection, Boolean, Type[])",id:"createtablesidbconnection-boolean-type",level:3},{value:"View Source",id:"view-source-11",level:6},{value:"Parameters",id:"parameters-10",level:5},{value:"CreateTable(IDbConnection, Boolean, Type)",id:"createtableidbconnection-boolean-type",level:3},{value:"View Source",id:"view-source-12",level:6},{value:"Parameters",id:"parameters-11",level:5},{value:"CreateTableIfNotExists(IDbConnection, Type[])",id:"createtableifnotexistsidbconnection-type",level:3},{value:"View Source",id:"view-source-13",level:6},{value:"Parameters",id:"parameters-12",level:5},{value:"DropAndCreateTables(IDbConnection, Type[])",id:"dropandcreatetablesidbconnection-type",level:3},{value:"View Source",id:"view-source-14",level:6},{value:"Parameters",id:"parameters-13",level:5},{value:"CreateTable&lt;T&gt;(IDbConnection, Boolean)",id:"createtabletidbconnection-boolean",level:3},{value:"View Source",id:"view-source-15",level:6},{value:"Parameters",id:"parameters-14",level:5},{value:"Type Parameters",id:"type-parameters-5",level:5},{value:"CreateTableIfNotExists&lt;T&gt;(IDbConnection)",id:"createtableifnotexiststidbconnection",level:3},{value:"View Source",id:"view-source-16",level:6},{value:"Returns",id:"returns-9",level:5},{value:"Parameters",id:"parameters-15",level:5},{value:"Type Parameters",id:"type-parameters-6",level:5},{value:"CreateTableIfNotExists(IDbConnection, Type)",id:"createtableifnotexistsidbconnection-type-1",level:3},{value:"View Source",id:"view-source-17",level:6},{value:"Returns",id:"returns-10",level:5},{value:"Parameters",id:"parameters-16",level:5},{value:"DropAndCreateTable&lt;T&gt;(IDbConnection)",id:"dropandcreatetabletidbconnection",level:3},{value:"View Source",id:"view-source-18",level:6},{value:"Parameters",id:"parameters-17",level:5},{value:"Type Parameters",id:"type-parameters-7",level:5},{value:"DropAndCreateTable(IDbConnection, Type)",id:"dropandcreatetableidbconnection-type",level:3},{value:"View Source",id:"view-source-19",level:6},{value:"Parameters",id:"parameters-18",level:5},{value:"DropTables(IDbConnection, Type[])",id:"droptablesidbconnection-type",level:3},{value:"View Source",id:"view-source-20",level:6},{value:"Parameters",id:"parameters-19",level:5},{value:"DropTable(IDbConnection, Type)",id:"droptableidbconnection-type",level:3},{value:"View Source",id:"view-source-21",level:6},{value:"Parameters",id:"parameters-20",level:5},{value:"DropTable&lt;T&gt;(IDbConnection)",id:"droptabletidbconnection",level:3},{value:"View Source",id:"view-source-22",level:6},{value:"Parameters",id:"parameters-21",level:5},{value:"Type Parameters",id:"type-parameters-8",level:5},{value:"GetSchemas(IDbConnection)",id:"getschemasidbconnection",level:3},{value:"View Source",id:"view-source-23",level:6},{value:"Returns",id:"returns-11",level:5},{value:"Parameters",id:"parameters-22",level:5},{value:"GetSchemaTables(IDbConnection)",id:"getschematablesidbconnection",level:3},{value:"View Source",id:"view-source-24",level:6},{value:"Returns",id:"returns-12",level:5},{value:"Parameters",id:"parameters-23",level:5},{value:"Migrate&lt;T&gt;(IDbConnection)",id:"migratetidbconnection",level:3},{value:"View Source",id:"view-source-25",level:6},{value:"Parameters",id:"parameters-24",level:5},{value:"Type Parameters",id:"type-parameters-9",level:5},{value:"Revert&lt;T&gt;(IDbConnection)",id:"reverttidbconnection",level:3},{value:"View Source",id:"view-source-26",level:6},{value:"Parameters",id:"parameters-25",level:5},{value:"Type Parameters",id:"type-parameters-10",level:5}],p={toc:c};function s(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"class-ormliteschemaapi"},"Class OrmLiteSchemaApi"),(0,r.kt)("h6",{id:"assembly-servicestackormlitedll"},(0,r.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.OrmLite.dll"),(0,r.kt)("h6",{id:"view-source"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L10"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static class OrmLiteSchemaApi\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"tableexistsidbconnection-string-string"},"TableExists(IDbConnection, String, String)"),(0,r.kt)("p",null,"Checks whether a Table Exists. E.g:\n","<","p",">","db.TableExists(",'"',"Person",'"',")","<","/p",">"),(0,r.kt)("h6",{id:"view-source-1"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L16"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static bool TableExists(this IDbConnection dbConn, string tableName, string schema = null)\n")),(0,r.kt)("h5",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")),(0,r.kt)("h5",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tableName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"schema"))))),(0,r.kt)("h3",{id:"tableexistsasyncidbconnection-string-string-cancellationtoken"},"TableExistsAsync(IDbConnection, String, String, CancellationToken)"),(0,r.kt)("p",null,"Checks whether a Table Exists. E.g:\n","<","p",">","db.TableExistsAsync(",'"',"Person",'"',")","<","/p",">"),(0,r.kt)("h6",{id:"view-source-2"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L25"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<bool> TableExistsAsync(this IDbConnection dbConn, string tableName, string schema = null, CancellationToken token = default(CancellationToken))\n")),(0,r.kt)("h5",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Boolean>")),(0,r.kt)("h5",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tableName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"schema"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"token"))))),(0,r.kt)("h3",{id:"tableexiststidbconnection"},"TableExists","<","T",">","(IDbConnection)"),(0,r.kt)("p",null,"Checks whether a Table Exists. E.g:\n","<","p",">","db.TableExists","<","Person",">","()","<","/p",">"),(0,r.kt)("h6",{id:"view-source-3"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L34"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static bool TableExists<T>(this IDbConnection dbConn)\n")),(0,r.kt)("h5",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")),(0,r.kt)("h5",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))))),(0,r.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"tableexistsasynctidbconnection-cancellationtoken"},"TableExistsAsync","<","T",">","(IDbConnection, CancellationToken)"),(0,r.kt)("p",null,"Checks whether a Table Exists. E.g:\n","<","p",">","db.TableExistsAsync","<","Person",">","()","<","/p",">"),(0,r.kt)("h6",{id:"view-source-4"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L47"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<bool> TableExistsAsync<T>(this IDbConnection dbConn, CancellationToken token = default(CancellationToken))\n")),(0,r.kt)("h5",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Boolean>")),(0,r.kt)("h5",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"token"))))),(0,r.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"columnexistsidbconnection-string-string-string"},"ColumnExists(IDbConnection, String, String, String)"),(0,r.kt)("p",null,"Checks whether a Table Column Exists. E.g:\n","<","p",">","db.ColumnExists(",'"',"Age",'"',", ",'"',"Person",'"',")","<","/p",">"),(0,r.kt)("h6",{id:"view-source-5"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L60"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static bool ColumnExists(this IDbConnection dbConn, string columnName, string tableName, string schema = null)\n")),(0,r.kt)("h5",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")),(0,r.kt)("h5",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"columnName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tableName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"schema"))))),(0,r.kt)("h3",{id:"columnexistsasyncidbconnection-string-string-string-cancellationtoken"},"ColumnExistsAsync(IDbConnection, String, String, String, CancellationToken)"),(0,r.kt)("p",null,"Checks whether a Table Column Exists. E.g:\n","<","p",">","db.ColumnExistsAsync(",'"',"Age",'"',", ",'"',"Person",'"',")","<","/p",">"),(0,r.kt)("h6",{id:"view-source-6"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L69"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<bool> ColumnExistsAsync(this IDbConnection dbConn, string columnName, string tableName, string schema = null, CancellationToken token = default(CancellationToken))\n")),(0,r.kt)("h5",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Boolean>")),(0,r.kt)("h5",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"columnName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tableName"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"schema"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"token"))))),(0,r.kt)("h3",{id:"columnexiststidbconnection-expressionfunct-object"},"ColumnExists","<","T",">","(IDbConnection, Expression","<","Func","<","T, Object",">",">",")"),(0,r.kt)("p",null,"Checks whether a Table Column Exists. E.g:\n","<","p",">","db.ColumnExists","<","Person",">","(x =",">"," x.Age)","<","/p",">"),(0,r.kt)("h6",{id:"view-source-7"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L78"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static bool ColumnExists<T>(this IDbConnection dbConn, Expression<Func<T, object>> field)\n")),(0,r.kt)("h5",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")),(0,r.kt)("h5",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Object>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"field"))))),(0,r.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"columnexistsasynctidbconnection-expressionfunct-object-cancellationtoken"},"ColumnExistsAsync","<","T",">","(IDbConnection, Expression","<","Func","<","T, Object",">",">",", CancellationToken)"),(0,r.kt)("p",null,"Checks whether a Table Column Exists. E.g:\n","<","p",">","db.ColumnExistsAsync","<","Person",">","(x =",">"," x.Age)","<","/p",">"),(0,r.kt)("h6",{id:"view-source-8"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L93"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task<bool> ColumnExistsAsync<T>(this IDbConnection dbConn, Expression<Func<T, object>> field, CancellationToken token = default(CancellationToken))\n")),(0,r.kt)("h5",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Boolean>")),(0,r.kt)("h5",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Object>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"field"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"token"))))),(0,r.kt)("h5",{id:"type-parameters-3"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"createschematidbconnection"},"CreateSchema","<","T",">","(IDbConnection)"),(0,r.kt)("p",null,"Create a DB Schema from the Schema attribute on the generic type. E.g:\n","<","p",">","db.CreateSchema","<","Person",">","() //default","<","/p",">"),(0,r.kt)("h6",{id:"view-source-9"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L108"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void CreateSchema<T>(this IDbConnection dbConn)\n")),(0,r.kt)("h5",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))))),(0,r.kt)("h5",{id:"type-parameters-4"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"createschemaidbconnection-string"},"CreateSchema(IDbConnection, String)"),(0,r.kt)("p",null,"Create a DB Schema. E.g:\n","<","p",">","db.CreateSchema(",'"',"schemaName",'"',")","<","/p",">"),(0,r.kt)("h6",{id:"view-source-10"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L117"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static bool CreateSchema(this IDbConnection dbConn, string schemaName)\n")),(0,r.kt)("h5",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")),(0,r.kt)("h5",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"schemaName"))))),(0,r.kt)("h3",{id:"createtablesidbconnection-boolean-type"},"CreateTables(IDbConnection, Boolean, Type[])"),(0,r.kt)("p",null,"Create DB Tables from the schemas of runtime types. E.g:\n","<","p",">","db.CreateTables(typeof(Table1), typeof(Table2))","<","/p",">"),(0,r.kt)("h6",{id:"view-source-11"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L126"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void CreateTables(this IDbConnection dbConn, bool overwrite, params Type[] tableTypes)\n")),(0,r.kt)("h5",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"overwrite"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tableTypes"))))),(0,r.kt)("h3",{id:"createtableidbconnection-boolean-type"},"CreateTable(IDbConnection, Boolean, Type)"),(0,r.kt)("p",null,"Create DB Table from the schema of the runtime type. Use overwrite to drop existing Table. E.g:\n","<","p",">","db.CreateTable(true, typeof(Table))","<","/p",">"),(0,r.kt)("h6",{id:"view-source-12"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L135"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void CreateTable(this IDbConnection dbConn, bool overwrite, Type modelType)\n")),(0,r.kt)("h5",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"overwrite"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"modelType"))))),(0,r.kt)("h3",{id:"createtableifnotexistsidbconnection-type"},"CreateTableIfNotExists(IDbConnection, Type[])"),(0,r.kt)("p",null,"Only Create new DB Tables from the schemas of runtime types if they don","'","t already exist. E.g:\n","<","p",">","db.CreateTableIfNotExists(typeof(Table1), typeof(Table2))","<","/p",">"),(0,r.kt)("h6",{id:"view-source-13"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L144"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void CreateTableIfNotExists(this IDbConnection dbConn, params Type[] tableTypes)\n")),(0,r.kt)("h5",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tableTypes"))))),(0,r.kt)("h3",{id:"dropandcreatetablesidbconnection-type"},"DropAndCreateTables(IDbConnection, Type[])"),(0,r.kt)("p",null,"Drop existing DB Tables and re-create them from the schemas of runtime types. E.g:\n","<","p",">","db.DropAndCreateTables(typeof(Table1), typeof(Table2))","<","/p",">"),(0,r.kt)("h6",{id:"view-source-14"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L153"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void DropAndCreateTables(this IDbConnection dbConn, params Type[] tableTypes)\n")),(0,r.kt)("h5",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tableTypes"))))),(0,r.kt)("h3",{id:"createtabletidbconnection-boolean"},"CreateTable","<","T",">","(IDbConnection, Boolean)"),(0,r.kt)("p",null,"Create a DB Table from the generic type. Use overwrite to drop the existing table or not. E.g:\n","<","p",">","db.CreateTable","<","Person",">","(overwrite=false) //default","<","/p",">","\n","<","p",">","db.CreateTable","<","Person",">","(overwrite=true)","<","/p",">"),(0,r.kt)("h6",{id:"view-source-15"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L163"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void CreateTable<T>(this IDbConnection dbConn, bool overwrite = false)\n")),(0,r.kt)("h5",{id:"parameters-14"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"overwrite"))))),(0,r.kt)("h5",{id:"type-parameters-5"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"createtableifnotexiststidbconnection"},"CreateTableIfNotExists","<","T",">","(IDbConnection)"),(0,r.kt)("p",null,"Only create a DB Table from the generic type if it doesn","'","t already exist. E.g:\n","<","p",">","db.CreateTableIfNotExists","<","Person",">","()","<","/p",">"),(0,r.kt)("h6",{id:"view-source-16"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L172"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static bool CreateTableIfNotExists<T>(this IDbConnection dbConn)\n")),(0,r.kt)("h5",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")),(0,r.kt)("h5",{id:"parameters-15"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))))),(0,r.kt)("h5",{id:"type-parameters-6"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"createtableifnotexistsidbconnection-type-1"},"CreateTableIfNotExists(IDbConnection, Type)"),(0,r.kt)("p",null,"Only create a DB Table from the runtime type if it doesn","'","t already exist. E.g:\n","<","p",">","db.CreateTableIfNotExists(typeof(Person))","<","/p",">"),(0,r.kt)("h6",{id:"view-source-17"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L181"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static bool CreateTableIfNotExists(this IDbConnection dbConn, Type modelType)\n")),(0,r.kt)("h5",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")),(0,r.kt)("h5",{id:"parameters-16"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"modelType"))))),(0,r.kt)("h3",{id:"dropandcreatetabletidbconnection"},"DropAndCreateTable","<","T",">","(IDbConnection)"),(0,r.kt)("p",null,"Drop existing table if exists and re-create a DB Table from the generic type. E.g:\n","<","p",">","db.DropAndCreateTable","<","Person",">","()","<","/p",">"),(0,r.kt)("h6",{id:"view-source-18"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L190"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void DropAndCreateTable<T>(this IDbConnection dbConn)\n")),(0,r.kt)("h5",{id:"parameters-17"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))))),(0,r.kt)("h5",{id:"type-parameters-7"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"dropandcreatetableidbconnection-type"},"DropAndCreateTable(IDbConnection, Type)"),(0,r.kt)("p",null,"Drop existing table if exists and re-create a DB Table from the runtime type. E.g:\n","<","p",">","db.DropAndCreateTable(typeof(Person))","<","/p",">"),(0,r.kt)("h6",{id:"view-source-19"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L199"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void DropAndCreateTable(this IDbConnection dbConn, Type modelType)\n")),(0,r.kt)("h5",{id:"parameters-18"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"modelType"))))),(0,r.kt)("h3",{id:"droptablesidbconnection-type"},"DropTables(IDbConnection, Type[])"),(0,r.kt)("p",null,"Drop any existing tables from their runtime types. E.g:\n","<","p",">","db.DropTables(typeof(Table1),typeof(Table2))","<","/p",">"),(0,r.kt)("h6",{id:"view-source-20"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L208"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void DropTables(this IDbConnection dbConn, params Type[] tableTypes)\n")),(0,r.kt)("h5",{id:"parameters-19"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tableTypes"))))),(0,r.kt)("h3",{id:"droptableidbconnection-type"},"DropTable(IDbConnection, Type)"),(0,r.kt)("p",null,"Drop any existing tables from the runtime type. E.g:\n","<","p",">","db.DropTable(typeof(Person))","<","/p",">"),(0,r.kt)("h6",{id:"view-source-21"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L217"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void DropTable(this IDbConnection dbConn, Type modelType)\n")),(0,r.kt)("h5",{id:"parameters-20"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"modelType"))))),(0,r.kt)("h3",{id:"droptabletidbconnection"},"DropTable","<","T",">","(IDbConnection)"),(0,r.kt)("p",null,"Drop any existing tables from the generic type. E.g:\n","<","p",">","db.DropTable","<","Person",">","()","<","/p",">"),(0,r.kt)("h6",{id:"view-source-22"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L226"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void DropTable<T>(this IDbConnection dbConn)\n")),(0,r.kt)("h5",{id:"parameters-21"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))))),(0,r.kt)("h5",{id:"type-parameters-8"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"getschemasidbconnection"},"GetSchemas(IDbConnection)"),(0,r.kt)("p",null,"Get a list of available user schemas for this connection"),(0,r.kt)("h6",{id:"view-source-23"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L234"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static List<string> GetSchemas(this IDbConnection dbConn)\n")),(0,r.kt)("h5",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.List<System.String>")),(0,r.kt)("h5",{id:"parameters-22"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))))),(0,r.kt)("h3",{id:"getschematablesidbconnection"},"GetSchemaTables(IDbConnection)"),(0,r.kt)("p",null,"Get available user Schemas and their tables for this connection"),(0,r.kt)("h6",{id:"view-source-24"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L242"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Dictionary<string, List<string>> GetSchemaTables(this IDbConnection dbConn)\n")),(0,r.kt)("h5",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.Dictionary<System.String,System.Collections.Generic.List<System.String>>")),(0,r.kt)("h5",{id:"parameters-23"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))))),(0,r.kt)("h3",{id:"migratetidbconnection"},"Migrate","<","T",">","(IDbConnection)"),(0,r.kt)("p",null,"Alter tables by adding properties for missing columns and removing properties annotated with ","[RemoveColumn]"),(0,r.kt)("h6",{id:"view-source-25"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L250"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void Migrate<T>(this IDbConnection dbConn)\n")),(0,r.kt)("h5",{id:"parameters-24"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))))),(0,r.kt)("h5",{id:"type-parameters-9"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"reverttidbconnection"},"Revert","<","T",">","(IDbConnection)"),(0,r.kt)("p",null,"Apply schema changes by Migrate in reverse to revert changes"),(0,r.kt)("h6",{id:"view-source-26"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteSchemaApi.cs#L255"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void Revert<T>(this IDbConnection dbConn)\n")),(0,r.kt)("h5",{id:"parameters-25"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))))),(0,r.kt)("h5",{id:"type-parameters-10"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))))}s.isMDXComponent=!0}}]);