"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[25779],{32144:function(e,t,a){a.r(t),a.d(t,{assets:function(){return o},contentTitle:function(){return l},default:function(){return s},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return m}});var r=a(83117),n=(a(67294),a(3905)),i=a(1954);const c={title:"Interface SqlMapper.ITypeHandler",sidebar_label:"SqlMapper.ITypeHandler",description:"Implement this interface to perform custom type-based parameter handling and value parsing"},l='<Icon icon="codicon:symbol-interface" className="symbol-interface" /> SqlMapper.ITypeHandler',p={unversionedId:"api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler",id:"api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler",title:"Interface SqlMapper.ITypeHandler",description:"Implement this interface to perform custom type-based parameter handling and value parsing",source:"@site/docs/api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler.md",sourceDirName:"api/ServiceStack.OrmLite.Dapper",slug:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler",draft:!1,tags:[],version:"current",frontMatter:{title:"Interface SqlMapper.ITypeHandler",sidebar_label:"SqlMapper.ITypeHandler",description:"Implement this interface to perform custom type-based parameter handling and value parsing"},sidebar:"apiSidebar",previous:{title:"SqlMapper.IParameterLookup",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.IParameterLookup"},next:{title:"SqlMapper.ITypeMap",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeMap"}},o={},m=[{value:"<strong>Assembly</strong>: ServiceStack.OrmLite.dll",id:"assembly-servicestackormlitedll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> SetValue(IDbDataParameter, Object)',id:"-setvalueidbdataparameter-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Parse(Type, Object)',id:"-parsetype-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters-1",level:5}],d={toc:m};function s(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-sqlmapperitypehandler"},(0,n.kt)(i.JO,{icon:"codicon:symbol-interface",className:"symbol-interface",mdxType:"Icon"})," SqlMapper.ITypeHandler"),(0,n.kt)("p",null,"Implement this interface to perform custom type-based parameter handling and value parsing"),(0,n.kt)("h6",{id:"assembly-servicestackormlitedll"},(0,n.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.OrmLite.dll"),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.ITypeHandler.cs#L11"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public interface ITypeHandler\n")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"-setvalueidbdataparameter-object"},(0,n.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," SetValue(IDbDataParameter, Object)"),(0,n.kt)("p",null,"Assign the value of a parameter before a command executes"),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.ITypeHandler.cs#L18"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"void SetValue(IDbDataParameter parameter, object value)\n")),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"IDbDataParameter")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"parameter")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The parameter to configure")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"value")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Parameter value")))),(0,n.kt)("h3",{id:"-parsetype-object"},(0,n.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Parse(Type, Object)"),(0,n.kt)("p",null,"Parse a database value back to a typed value"),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.ITypeHandler.cs#L26"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"object Parse(Type destinationType, object value)\n")),(0,n.kt)("h5",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"System.Object"),": The typed value"),(0,n.kt)("h5",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"Type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"destinationType")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The type to parse to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"value")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The value from the database")))))}s.isMDXComponent=!0}}]);