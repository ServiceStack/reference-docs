"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[29170],{43814:function(e,t,a){a.r(t),a.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return o},toc:function(){return p}});var r=a(83117),n=(a(67294),a(3905)),i=a(1954);const c={title:"Interface IServiceRoutes",sidebar_label:"IServiceRoutes",description:"Allow the registration of user-defined routes for services"},s='<Icon icon="codicon:symbol-interface" className="symbol-interface" /> IServiceRoutes',o={unversionedId:"api/ServiceStack.Web/IServiceRoutes",id:"api/ServiceStack.Web/IServiceRoutes",title:"Interface IServiceRoutes",description:"Allow the registration of user-defined routes for services",source:"@site/docs/api/ServiceStack.Web/IServiceRoutes.md",sourceDirName:"api/ServiceStack.Web",slug:"/api/ServiceStack.Web/IServiceRoutes",permalink:"/api/ServiceStack.Web/IServiceRoutes",draft:!1,tags:[],version:"current",frontMatter:{title:"Interface IServiceRoutes",sidebar_label:"IServiceRoutes",description:"Allow the registration of user-defined routes for services"},sidebar:"apiSidebar",previous:{title:"IServiceGatewayFactory",permalink:"/api/ServiceStack.Web/IServiceGatewayFactory"},next:{title:"IServiceRunner",permalink:"/api/ServiceStack.Web/IServiceRunner"}},l={},p=[{value:"<strong>Assembly</strong>: ServiceStack.Interfaces.dll",id:"assembly-servicestackinterfacesdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add&lt;TRequest&gt;(String)',id:"-addtrequeststring",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:"Type Parameters",id:"type-parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add&lt;TRequest&gt;(String, String)',id:"-addtrequeststring-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"Type Parameters",id:"type-parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add(Type, String, String)',id:"-addtype-string-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add(Type, String, String, Int32)',id:"-addtype-string-string-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add(Type, String, String, String, String)',id:"-addtype-string-string-string-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add(Type, String, String, String, String, String)',id:"-addtype-string-string-string-string-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-5",level:5}],m={toc:p};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-iserviceroutes"},(0,n.kt)(i.JO,{icon:"codicon:symbol-interface",className:"symbol-interface",mdxType:"Icon"})," IServiceRoutes"),(0,n.kt)("p",null,"Allow the registration of user-defined routes for services"),(0,n.kt)("h6",{id:"assembly-servicestackinterfacesdll"},(0,n.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.Interfaces.dll"),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Web/IServiceRoutes.cs#L6"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public interface IServiceRoutes\n")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"-addtrequeststring"},(0,n.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add","<","TRequest",">","(String)"),(0,n.kt)("p",null,"Maps the specified REST path to the specified request DTO."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Web/IServiceRoutes.cs#L18"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"IServiceRoutes Add<TRequest>(string restPath)\n")),(0,n.kt)("h5",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes"),": The same ",(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes")," instance;\nnever ",(0,n.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.String")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"restPath")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The path to map the request DTO to.")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"See ``ServiceStack.RouteAttribute.Path?text=RouteAttribute.Path``\nfor details on the correct format.\n")),(0,n.kt)("p",null," |"),(0,n.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"TRequest")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The type of request DTO to map")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"the path to."),(0,n.kt)("td",{parentName:"tr",align:"left"})))),(0,n.kt)("h3",{id:"-addtrequeststring-string"},(0,n.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add","<","TRequest",">","(String, String)"),(0,n.kt)("p",null,"Maps the specified REST path to the specified request DTO, and\nspecifies the HTTP verbs supported by the path."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Web/IServiceRoutes.cs#L36"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"IServiceRoutes Add<TRequest>(string restPath, string verbs)\n")),(0,n.kt)("h5",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes"),": The same ",(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes")," instance;\nnever ",(0,n.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,n.kt)("h5",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.String")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"restPath")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The path to map the request DTO to.")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"See ``ServiceStack.RouteAttribute.Path?text=RouteAttribute.Path``\nfor details on the correct format.\n")),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"verbs")," |\nThe comma-delimited list of HTTP verbs supported by the path,\nsuch as ",'"',"GET,PUT,DELETE",'"',".  Specify empty or ",(0,n.kt)("inlineCode",{parentName:"p"},"null"),"\nto indicate that all verbs are supported."),(0,n.kt)("p",null," |"),(0,n.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"TRequest")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The type of request DTO to map")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"the path to."),(0,n.kt)("td",{parentName:"tr",align:"left"})))),(0,n.kt)("h3",{id:"-addtype-string-string"},(0,n.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add(Type, String, String)"),(0,n.kt)("p",null,"Maps the specified REST path to the specified request DTO,\nspecifies the HTTP verbs supported by the path, and indicates\nthe default MIME type of the returned response."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Web/IServiceRoutes.cs#L55"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"IServiceRoutes Add(Type requestType, string restPath, string verbs)\n")),(0,n.kt)("h5",{id:"returns-2"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes"),": The same ",(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes")," instance;\nnever ",(0,n.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,n.kt)("h5",{id:"parameters-2"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"requestType")),(0,n.kt)("td",{parentName:"tr",align:"left"})))),(0,n.kt)("p",null,"The type of request DTO to map the path to."),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"restPath")," | The path to map the request DTO to.\nSee ",(0,n.kt)("inlineCode",{parentName:"p"},"ServiceStack.RouteAttribute.Path?text=RouteAttribute.Path"),"\nfor details on the correct format."),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"verbs")," |\nThe comma-delimited list of HTTP verbs supported by the path,\nsuch as ",'"',"GET,PUT,DELETE",'"',"."),(0,n.kt)("p",null," |"),(0,n.kt)("h3",{id:"-addtype-string-string-int32"},(0,n.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add(Type, String, String, Int32)"),(0,n.kt)("p",null,"Maps the specified REST path to the specified request DTO,\nspecifies the HTTP verbs supported by the path, and indicates\nthe default MIME type of the returned response."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Web/IServiceRoutes.cs#L66"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"IServiceRoutes Add(Type requestType, string restPath, string verbs, int priority)\n")),(0,n.kt)("h5",{id:"returns-3"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes")),(0,n.kt)("h5",{id:"parameters-3"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"requestType")),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.String")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"restPath")),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.String")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"verbs")),(0,n.kt)("td",{parentName:"tr",align:"left"})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Int32")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"priority")),(0,n.kt)("td",{parentName:"tr",align:"left"})))),(0,n.kt)("p",null,"Used to rank the precedences of route definitions in reverse routing.\ni.e. Priorities below 0 are auto-generated have less precedence."),(0,n.kt)("p",null," |"),(0,n.kt)("h3",{id:"-addtype-string-string-string-string"},(0,n.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add(Type, String, String, String, String)"),(0,n.kt)("p",null,"Maps the specified REST path to the specified request DTO,\nspecifies the HTTP verbs supported by the path, and indicates\nthe default MIME type of the returned response."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Web/IServiceRoutes.cs#L91"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"IServiceRoutes Add(Type requestType, string restPath, string verbs, string summary, string notes)\n")),(0,n.kt)("h5",{id:"returns-4"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes"),": The same ",(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes")," instance;\nnever ",(0,n.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,n.kt)("h5",{id:"parameters-4"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"requestType")),(0,n.kt)("td",{parentName:"tr",align:"left"})))),(0,n.kt)("p",null,"The type of request DTO to map the path to."),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"restPath")," | The path to map the request DTO to.\nSee ",(0,n.kt)("inlineCode",{parentName:"p"},"ServiceStack.RouteAttribute.Path?text=RouteAttribute.Path"),"\nfor details on the correct format."),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"verbs")," |\nThe comma-delimited list of HTTP verbs supported by the path,\nsuch as ",'"',"GET,PUT,DELETE",'"',"."),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"summary")," |\nThe short summary of what the REST does. "),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"notes")," |\nThe longer text to explain the behaviour of the REST. "),(0,n.kt)("p",null," |"),(0,n.kt)("h3",{id:"-addtype-string-string-string-string-string"},(0,n.kt)(i.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add(Type, String, String, String, String, String)"),(0,n.kt)("p",null,"Maps the specified REST path to the specified request DTO,\nspecifies the HTTP verbs supported by the path, and indicates\nthe default MIME type of the returned response."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Web/IServiceRoutes.cs#L120"}," ",(0,n.kt)(i.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"IServiceRoutes Add(Type requestType, string restPath, string verbs, string summary, string notes, string matches)\n")),(0,n.kt)("h5",{id:"returns-5"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes"),": The same ",(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Web/IServiceRoutes"},"ServiceStack.Web.IServiceRoutes")," instance;\nnever ",(0,n.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,n.kt)("h5",{id:"parameters-5"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"requestType")),(0,n.kt)("td",{parentName:"tr",align:"left"})))),(0,n.kt)("p",null,"The type of request DTO to map the path to."),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"restPath")," | The path to map the request DTO to.\nSee ",(0,n.kt)("inlineCode",{parentName:"p"},"ServiceStack.RouteAttribute.Path?text=RouteAttribute.Path"),"\nfor details on the correct format."),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"verbs")," |\nThe comma-delimited list of HTTP verbs supported by the path,\nsuch as ",'"',"GET,PUT,DELETE",'"',"."),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"summary")," |\nThe short summary of what the REST does. "),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"notes")," |\nThe longer text to explain the behaviour of the REST. "),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,n.kt)("em",{parentName:"p"},"matches")," |\nMust match rule defined in Config.RequestRules or Regex expression with format:\n",'"',"{IHttpRequest.Field} =~ {pattern}",'"',", e.g ",'"',"PathInfo =~ \\/","[0-9]","+$",'"'),(0,n.kt)("p",null," |"))}d.isMDXComponent=!0}}]);