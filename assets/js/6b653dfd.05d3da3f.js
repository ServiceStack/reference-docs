"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[49549],{47834:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var n=a(83117),i=(a(67294),a(3905)),r=a(1954);const l={title:"Class AbstractValidator<T>",sidebar_label:"AbstractValidator<T>",description:"Base class for object validators."},o='<Icon icon="codicon:symbol-class" className="symbol-class" /> AbstractValidator&lt;T&gt;',c={unversionedId:"api/ServiceStack.FluentValidation/AbstractValidator`T`",id:"api/ServiceStack.FluentValidation/AbstractValidator`T`",title:"Class AbstractValidator<T>",description:"Base class for object validators.",source:"@site/docs/api/ServiceStack.FluentValidation/AbstractValidator`T`.md",sourceDirName:"api/ServiceStack.FluentValidation",slug:"/api/ServiceStack.FluentValidation/AbstractValidator`T`",permalink:"/api/ServiceStack.FluentValidation/AbstractValidator`T`",draft:!1,tags:[],version:"current",frontMatter:{title:"Class AbstractValidator<T>",sidebar_label:"AbstractValidator<T>",description:"Base class for object validators."},sidebar:"apiSidebar",previous:{title:"ServiceStack.FluentValidation",permalink:"/api/ServiceStack.FluentValidation/"},next:{title:"ApplyConditionTo",permalink:"/api/ServiceStack.FluentValidation/ApplyConditionTo"}},d={},s=[{value:"<strong>Assembly</strong>: ServiceStack.dll",id:"assembly-servicestackdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Properties",id:"properties",level:2},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> CascadeMode',id:"-cascademode",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> TypeValidators',id:"-typevalidators",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> Request',id:"-request",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> Gateway',id:"-gateway",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> IValidator.Validate(IValidationContext)',id:"-ivalidatorvalidateivalidationcontext",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> IValidator.ValidateAsync(IValidationContext, CancellationToken)',id:"-ivalidatorvalidateasyncivalidationcontext-cancellationtoken",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Validate(T)',id:"-validatet",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAsync(T, CancellationToken)',id:"-validateasynct-cancellationtoken",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Validate(ValidationContext&lt;T&gt;)',id:"-validatevalidationcontextt",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAsync(ValidationContext&lt;T&gt;, CancellationToken)',id:"-validateasyncvalidationcontextt-cancellationtoken",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> AddRule(IValidationRule)',id:"-addruleivalidationrule",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11",level:6},{value:"Parameters",id:"parameters-6",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> CreateDescriptor()',id:"-createdescriptor",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12",level:6},{value:"Returns",id:"returns-6",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> IValidator.CanValidateInstancesOfType(Type)',id:"-ivalidatorcanvalidateinstancesoftypetype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13",level:6},{value:"Returns",id:"returns-7",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> RuleFor&lt;TProperty&gt;(Expression&lt;Func&lt;T, TProperty&gt;&gt;)',id:"-rulefortpropertyexpressionfunct-tproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14",level:6},{value:"Returns",id:"returns-8",level:5},{value:"Parameters",id:"parameters-8",level:5},{value:"Type Parameters",id:"type-parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Transform&lt;TProperty, TTransformed&gt;(Expression&lt;Func&lt;T, TProperty&gt;&gt;, Func&lt;TProperty, TTransformed&gt;)',id:"-transformtproperty-ttransformedexpressionfunct-tproperty-functproperty-ttransformed",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15",level:6},{value:"Returns",id:"returns-9",level:5},{value:"Parameters",id:"parameters-9",level:5},{value:"Type Parameters",id:"type-parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Transform&lt;TProperty, TTransformed&gt;(Expression&lt;Func&lt;T, TProperty&gt;&gt;, Func&lt;T, TProperty, TTransformed&gt;)',id:"-transformtproperty-ttransformedexpressionfunct-tproperty-funct-tproperty-ttransformed",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16",level:6},{value:"Returns",id:"returns-10",level:5},{value:"Parameters",id:"parameters-10",level:5},{value:"Type Parameters",id:"type-parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> RuleForEach&lt;TElement&gt;(Expression&lt;Func&lt;T, IEnumerable&lt;TElement&gt;&gt;&gt;)',id:"-ruleforeachtelementexpressionfunct-ienumerabletelement",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17",level:6},{value:"Returns",id:"returns-11",level:5},{value:"Parameters",id:"parameters-11",level:5},{value:"Type Parameters",id:"type-parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> TransformForEach&lt;TElement, TTransformed&gt;(Expression&lt;Func&lt;T, IEnumerable&lt;TElement&gt;&gt;&gt;, Func&lt;TElement, TTransformed&gt;)',id:"-transformforeachtelement-ttransformedexpressionfunct-ienumerabletelement-functelement-ttransformed",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18",level:6},{value:"Returns",id:"returns-12",level:5},{value:"Parameters",id:"parameters-12",level:5},{value:"Type Parameters",id:"type-parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> TransformForEach&lt;TElement, TTransformed&gt;(Expression&lt;Func&lt;T, IEnumerable&lt;TElement&gt;&gt;&gt;, Func&lt;T, TElement, TTransformed&gt;)',id:"-transformforeachtelement-ttransformedexpressionfunct-ienumerabletelement-funct-telement-ttransformed",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19",level:6},{value:"Returns",id:"returns-13",level:5},{value:"Parameters",id:"parameters-13",level:5},{value:"Type Parameters",id:"type-parameters-5",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> RuleSet(String, Action)',id:"-rulesetstring-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20",level:6},{value:"Parameters",id:"parameters-14",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> When(Func&lt;T, Boolean&gt;, Action)',id:"-whenfunct-boolean-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21",level:6},{value:"Returns",id:"returns-14",level:5},{value:"Parameters",id:"parameters-15",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> When(Func&lt;T, ValidationContext&lt;T&gt;, Boolean&gt;, Action)',id:"-whenfunct-validationcontextt-boolean-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22",level:6},{value:"Returns",id:"returns-15",level:5},{value:"Parameters",id:"parameters-16",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Unless(Func&lt;T, Boolean&gt;, Action)',id:"-unlessfunct-boolean-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23",level:6},{value:"Returns",id:"returns-16",level:5},{value:"Parameters",id:"parameters-17",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Unless(Func&lt;T, ValidationContext&lt;T&gt;, Boolean&gt;, Action)',id:"-unlessfunct-validationcontextt-boolean-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24",level:6},{value:"Returns",id:"returns-17",level:5},{value:"Parameters",id:"parameters-18",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WhenAsync(Func&lt;T, CancellationToken, Task&lt;Boolean&gt;&gt;, Action)',id:"-whenasyncfunct-cancellationtoken-taskboolean-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25",level:6},{value:"Returns",id:"returns-18",level:5},{value:"Parameters",id:"parameters-19",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> WhenAsync(Func&lt;T, ValidationContext&lt;T&gt;, CancellationToken, Task&lt;Boolean&gt;&gt;, Action)',id:"-whenasyncfunct-validationcontextt-cancellationtoken-taskboolean-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26",level:6},{value:"Returns",id:"returns-19",level:5},{value:"Parameters",id:"parameters-20",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> UnlessAsync(Func&lt;T, CancellationToken, Task&lt;Boolean&gt;&gt;, Action)',id:"-unlessasyncfunct-cancellationtoken-taskboolean-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27",level:6},{value:"Returns",id:"returns-20",level:5},{value:"Parameters",id:"parameters-21",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> UnlessAsync(Func&lt;T, ValidationContext&lt;T&gt;, CancellationToken, Task&lt;Boolean&gt;&gt;, Action)',id:"-unlessasyncfunct-validationcontextt-cancellationtoken-taskboolean-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28",level:6},{value:"Returns",id:"returns-21",level:5},{value:"Parameters",id:"parameters-22",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Include(IValidator&lt;T&gt;)',id:"-includeivalidatort",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29",level:6},{value:"Parameters",id:"parameters-23",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Include&lt;TValidator&gt;(Func&lt;T, TValidator&gt;)',id:"-includetvalidatorfunct-tvalidator",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30",level:6},{value:"Parameters",id:"parameters-24",level:5},{value:"Type Parameters",id:"type-parameters-6",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetEnumerator()',id:"-getenumerator",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31",level:6},{value:"Returns",id:"returns-22",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> IEnumerable.GetEnumerator()',id:"-ienumerablegetenumerator",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32",level:6},{value:"Returns",id:"returns-23",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> EnsureInstanceNotNull(Object)',id:"-ensureinstancenotnullobject",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-33",level:6},{value:"Parameters",id:"parameters-25",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> PreValidate(ValidationContext&lt;T&gt;, ValidationResult)',id:"-prevalidatevalidationcontextt-validationresult",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-34",level:6},{value:"Returns",id:"returns-24",level:5},{value:"Parameters",id:"parameters-26",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> RaiseValidationException(ValidationContext&lt;T&gt;, ValidationResult)',id:"-raisevalidationexceptionvalidationcontextt-validationresult",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-35",level:6},{value:"Parameters",id:"parameters-27",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> RuleSet(ApplyTo, Action)',id:"-rulesetapplyto-action",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-36",level:6},{value:"Parameters",id:"parameters-28",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> RemovePropertyRules(Func&lt;PropertyRule, Boolean&gt;)',id:"-removepropertyrulesfuncpropertyrule-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-37",level:6},{value:"Parameters",id:"parameters-29",level:5},{value:"Implements",id:"implements",level:2}],m={toc:s};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"-abstractvalidatort"},(0,i.kt)(r.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," AbstractValidator","<","T",">"),(0,i.kt)("p",null,"Base class for object validators."),(0,i.kt)("h6",{id:"assembly-servicestackdll"},(0,i.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.dll"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.Partial.cs#L40"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public abstract class AbstractValidator<T> : IValidator<T>, IValidator, IEnumerable<IValidationRule>, IEnumerable, IRequiresRequest, IHasTypeValidators, IServiceStackValidator\n")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"-cascademode"},(0,i.kt)(r.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," CascadeMode"),(0,i.kt)("p",null,"Sets the cascade mode for all rules within this validator."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L41"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public CascadeMode CascadeMode { get; set; }\n")),(0,i.kt)("h3",{id:"-typevalidators"},(0,i.kt)(r.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," TypeValidators"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.Partial.cs#L93"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public List<ITypeValidator> TypeValidators { get; }\n")),(0,i.kt)("h3",{id:"-request"},(0,i.kt)(r.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," Request"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.Partial.cs#L95"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public virtual IRequest Request { get; set; }\n")),(0,i.kt)("h3",{id:"-gateway"},(0,i.kt)(r.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," Gateway"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.Partial.cs#L97"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public virtual IServiceGateway Gateway { get; }\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"-ivalidatorvalidateivalidationcontext"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," IValidator.Validate(IValidationContext)"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L46"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"ValidationResult IValidator.Validate(IValidationContext context)\n")),(0,i.kt)("h5",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Results/ValidationResult"},"ServiceStack.FluentValidation.Results.ValidationResult")),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidationContext"},"ServiceStack.FluentValidation.IValidationContext")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"context"))))),(0,i.kt)("h3",{id:"-ivalidatorvalidateasyncivalidationcontext-cancellationtoken"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," IValidator.ValidateAsync(IValidationContext, CancellationToken)"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L51"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"Task<ValidationResult> IValidator.ValidateAsync(IValidationContext context, CancellationToken cancellation)\n")),(0,i.kt)("h5",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult>")),(0,i.kt)("h5",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidationContext"},"ServiceStack.FluentValidation.IValidationContext")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"context"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"cancellation"))))),(0,i.kt)("h3",{id:"-validatet"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Validate(T)"),(0,i.kt)("p",null,"Validates the specified instance"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L61"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public ValidationResult Validate(T instance)\n")),(0,i.kt)("h5",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Results/ValidationResult"},"ServiceStack.FluentValidation.Results.ValidationResult"),": A ValidationResult object containing any validation failures"),(0,i.kt)("h5",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"instance")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The object to validate")))),(0,i.kt)("h3",{id:"-validateasynct-cancellationtoken"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAsync(T, CancellationToken)"),(0,i.kt)("p",null,"Validates the specified instance asynchronously"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L73"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<ValidationResult> ValidateAsync(T instance, CancellationToken cancellation = default(CancellationToken))\n")),(0,i.kt)("h5",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult>"),": A ValidationResult object containing any validation failures"),(0,i.kt)("h5",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"instance")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The object to validate")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"cancellation")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Cancellation token")))),(0,i.kt)("h3",{id:"-validatevalidationcontextt"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Validate(ValidationContext","<","T",">",")"),(0,i.kt)("p",null,"Validates the specified instance."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L84"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public virtual ValidationResult Validate(ValidationContext<T> context)\n")),(0,i.kt)("h5",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation.Results/ValidationResult"},"ServiceStack.FluentValidation.Results.ValidationResult"),": A ValidationResult object containing any validation failures."),(0,i.kt)("h5",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/ValidationContext%60T%60"},"ServiceStack.FluentValidation.ValidationContext","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"context")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Validation Context")))),(0,i.kt)("h3",{id:"-validateasyncvalidationcontextt-cancellationtoken"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAsync(ValidationContext","<","T",">",", CancellationToken)"),(0,i.kt)("p",null,"Validates the specified instance asynchronously."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L128"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public virtual async Task<ValidationResult> ValidateAsync(ValidationContext<T> context, CancellationToken cancellation = default(CancellationToken))\n")),(0,i.kt)("h5",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<ServiceStack.FluentValidation.Results.ValidationResult>"),": A ValidationResult object containing any validation failures."),(0,i.kt)("h5",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/ValidationContext%60T%60"},"ServiceStack.FluentValidation.ValidationContext","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"context")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Validation Context")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"cancellation")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Cancellation token")))),(0,i.kt)("h3",{id:"-addruleivalidationrule"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," AddRule(IValidationRule)"),(0,i.kt)("p",null,"Adds a rule to the current validator."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L177"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"protected void AddRule(IValidationRule rule)\n")),(0,i.kt)("h5",{id:"parameters-6"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidationRule"},"ServiceStack.FluentValidation.IValidationRule")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"rule"))))),(0,i.kt)("h3",{id:"-createdescriptor"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," CreateDescriptor()"),(0,i.kt)("p",null,"Creates a ",(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IValidatorDescriptor"},"ServiceStack.FluentValidation.IValidatorDescriptor")," that can be used to obtain metadata about the current validator."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L184"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public virtual IValidatorDescriptor CreateDescriptor()\n")),(0,i.kt)("h5",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IValidatorDescriptor"},"ServiceStack.FluentValidation.IValidatorDescriptor")),(0,i.kt)("h3",{id:"-ivalidatorcanvalidateinstancesoftypetype"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," IValidator.CanValidateInstancesOfType(Type)"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L188"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"bool IValidator.CanValidateInstancesOfType(Type type)\n")),(0,i.kt)("h5",{id:"returns-7"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Boolean")),(0,i.kt)("h5",{id:"parameters-7"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type"))))),(0,i.kt)("h3",{id:"-rulefortpropertyexpressionfunct-tproperty"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," RuleFor","<","TProperty",">","(Expression","<","Func","<","T, TProperty",">",">",")"),(0,i.kt)("p",null,"Defines a validation rule for a specify property."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L202"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IRuleBuilderInitial<T, TProperty> RuleFor<TProperty>(Expression<Func<T, TProperty>> expression)\n")),(0,i.kt)("h5",{id:"returns-8"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitial<<T>,<TProperty>>"),": an IRuleBuilder instance on which validators can be defined"),(0,i.kt)("h5",{id:"parameters-8"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"expression")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The expression representing the property to validate")))),(0,i.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type of property being validated")))),(0,i.kt)("h3",{id:"-transformtproperty-ttransformedexpressionfunct-tproperty-functproperty-ttransformed"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Transform","<","TProperty, TTransformed",">","(Expression","<","Func","<","T, TProperty",">",">",", Func","<","TProperty, TTransformed",">",")"),(0,i.kt)("p",null,"Defines a validation rule for a specify property and transform it to a different type."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L221"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IRuleBuilderInitial<T, TTransformed> Transform<TProperty, TTransformed>(Expression<Func<T, TProperty>> from, Func<TProperty, TTransformed> to)\n")),(0,i.kt)("h5",{id:"returns-9"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitial<<T>,<TTransformed>>"),": an IRuleBuilder instance on which validators can be defined"),(0,i.kt)("h5",{id:"parameters-9"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"from")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The expression representing the property to transform")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<TProperty>,<TTransformed>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"to")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Function to transform the property value into a different type")))),(0,i.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type of property being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TTransformed")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type after the transformer has been applied")))),(0,i.kt)("h3",{id:"-transformtproperty-ttransformedexpressionfunct-tproperty-funct-tproperty-ttransformed"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Transform","<","TProperty, TTransformed",">","(Expression","<","Func","<","T, TProperty",">",">",", Func","<","T, TProperty, TTransformed",">",")"),(0,i.kt)("p",null,"Defines a validation rule for a specify property and transform it to a different type."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L240"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IRuleBuilderInitial<T, TTransformed> Transform<TProperty, TTransformed>(Expression<Func<T, TProperty>> from, Func<T, TProperty, TTransformed> to)\n")),(0,i.kt)("h5",{id:"returns-10"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitial<<T>,<TTransformed>>"),": an IRuleBuilder instance on which validators can be defined"),(0,i.kt)("h5",{id:"parameters-10"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,<TProperty>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"from")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The expression representing the property to transform")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,<TProperty>,<TTransformed>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"to")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Function to transform the property value into a different type")))),(0,i.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TProperty")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type of property being validated")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TTransformed")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type after the transformer has been applied")))),(0,i.kt)("h3",{id:"-ruleforeachtelementexpressionfunct-ienumerabletelement"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," RuleForEach","<","TElement",">","(Expression","<","Func","<","T, IEnumerable","<","TElement",">",">",">",")"),(0,i.kt)("p",null,"Invokes a rule for each item in the collection."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L254"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IRuleBuilderInitialCollection<T, TElement> RuleForEach<TElement>(Expression<Func<T, IEnumerable<TElement>>> expression)\n")),(0,i.kt)("h5",{id:"returns-11"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitialCollection<<T>,<TElement>>"),": An IRuleBuilder instance on which validators can be defined"),(0,i.kt)("h5",{id:"parameters-11"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Collections.Generic.IEnumerable<<TElement>>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"expression")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Expression representing the collection to validate")))),(0,i.kt)("h5",{id:"type-parameters-3"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TElement")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property")))),(0,i.kt)("h3",{id:"-transformforeachtelement-ttransformedexpressionfunct-ienumerabletelement-functelement-ttransformed"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," TransformForEach","<","TElement, TTransformed",">","(Expression","<","Func","<","T, IEnumerable","<","TElement",">",">",">",", Func","<","TElement, TTransformed",">",")"),(0,i.kt)("p",null,"Invokes a rule for each item in the collection, transforming the element from one type to another."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L270"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IRuleBuilderInitialCollection<T, TTransformed> TransformForEach<TElement, TTransformed>(Expression<Func<T, IEnumerable<TElement>>> expression, Func<TElement, TTransformed> to)\n")),(0,i.kt)("h5",{id:"returns-12"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitialCollection<<T>,<TTransformed>>"),": An IRuleBuilder instance on which validators can be defined"),(0,i.kt)("h5",{id:"parameters-12"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Collections.Generic.IEnumerable<<TElement>>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"expression")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Expression representing the collection to validate")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<TElement>,<TTransformed>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"to")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Function to transform the collection element into a different type")))),(0,i.kt)("h5",{id:"type-parameters-4"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TElement")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TTransformed")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type after the transformer has been applied")))),(0,i.kt)("h3",{id:"-transformforeachtelement-ttransformedexpressionfunct-ienumerabletelement-funct-telement-ttransformed"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," TransformForEach","<","TElement, TTransformed",">","(Expression","<","Func","<","T, IEnumerable","<","TElement",">",">",">",", Func","<","T, TElement, TTransformed",">",")"),(0,i.kt)("p",null,"Invokes a rule for each item in the collection, transforming the element from one type to another."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L286"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IRuleBuilderInitialCollection<T, TTransformed> TransformForEach<TElement, TTransformed>(Expression<Func<T, IEnumerable<TElement>>> expression, Func<T, TElement, TTransformed> to)\n")),(0,i.kt)("h5",{id:"returns-13"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ServiceStack.FluentValidation.IRuleBuilderInitialCollection<<T>,<TTransformed>>"),": An IRuleBuilder instance on which validators can be defined"),(0,i.kt)("h5",{id:"parameters-13"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Collections.Generic.IEnumerable<<TElement>>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"expression")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Expression representing the collection to validate")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,<TElement>,<TTransformed>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"to")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Function to transform the collection element into a different type")))),(0,i.kt)("h5",{id:"type-parameters-5"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TElement")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type of property")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TTransformed")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type after the transformer has been applied")))),(0,i.kt)("h3",{id:"-rulesetstring-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," RuleSet(String, Action)"),(0,i.kt)("p",null,"Defines a RuleSet that can be used to group together several validators."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L299"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public void RuleSet(string ruleSetName, Action action)\n")),(0,i.kt)("h5",{id:"parameters-14"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"ruleSetName")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The name of the ruleset.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules in the ruleset.")))),(0,i.kt)("h3",{id:"-whenfunct-boolean-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," When(Func","<","T, Boolean",">",", Action)"),(0,i.kt)("p",null,"Defines a condition that applies to several rules"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L318"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IConditionBuilder When(Func<T, bool> predicate, Action action)\n")),(0,i.kt)("h5",{id:"returns-14"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IConditionBuilder"},"ServiceStack.FluentValidation.IConditionBuilder")),(0,i.kt)("h5",{id:"parameters-15"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,System.Boolean>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"predicate")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The condition that should apply to multiple rules")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules.")))),(0,i.kt)("h3",{id:"-whenfunct-validationcontextt-boolean-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," When(Func","<","T, ValidationContext","<","T",">",", Boolean",">",", Action)"),(0,i.kt)("p",null,"Defines a condition that applies to several rules"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L328"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IConditionBuilder When(Func<T, ValidationContext<T>, bool> predicate, Action action)\n")),(0,i.kt)("h5",{id:"returns-15"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IConditionBuilder"},"ServiceStack.FluentValidation.IConditionBuilder")),(0,i.kt)("h5",{id:"parameters-16"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,ServiceStack.FluentValidation.ValidationContext<<T>>,System.Boolean>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"predicate")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The condition that should apply to multiple rules")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules.")))),(0,i.kt)("h3",{id:"-unlessfunct-boolean-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Unless(Func","<","T, Boolean",">",", Action)"),(0,i.kt)("p",null,"Defines an inverse condition that applies to several rules"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L337"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IConditionBuilder Unless(Func<T, bool> predicate, Action action)\n")),(0,i.kt)("h5",{id:"returns-16"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IConditionBuilder"},"ServiceStack.FluentValidation.IConditionBuilder")),(0,i.kt)("h5",{id:"parameters-17"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,System.Boolean>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"predicate")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The condition that should be applied to multiple rules")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules")))),(0,i.kt)("h3",{id:"-unlessfunct-validationcontextt-boolean-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Unless(Func","<","T, ValidationContext","<","T",">",", Boolean",">",", Action)"),(0,i.kt)("p",null,"Defines an inverse condition that applies to several rules"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L346"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IConditionBuilder Unless(Func<T, ValidationContext<T>, bool> predicate, Action action)\n")),(0,i.kt)("h5",{id:"returns-17"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IConditionBuilder"},"ServiceStack.FluentValidation.IConditionBuilder")),(0,i.kt)("h5",{id:"parameters-18"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,ServiceStack.FluentValidation.ValidationContext<<T>>,System.Boolean>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"predicate")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The condition that should be applied to multiple rules")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules")))),(0,i.kt)("h3",{id:"-whenasyncfunct-cancellationtoken-taskboolean-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WhenAsync(Func","<","T, CancellationToken, Task","<","Boolean",">",">",", Action)"),(0,i.kt)("p",null,"Defines an asynchronous condition that applies to several rules"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L356"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IConditionBuilder WhenAsync(Func<T, CancellationToken, Task<bool>> predicate, Action action)\n")),(0,i.kt)("h5",{id:"returns-18"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IConditionBuilder"},"ServiceStack.FluentValidation.IConditionBuilder")),(0,i.kt)("h5",{id:"parameters-19"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"predicate")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The asynchronous condition that should apply to multiple rules")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules.")))),(0,i.kt)("h3",{id:"-whenasyncfunct-validationcontextt-cancellationtoken-taskboolean-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," WhenAsync(Func","<","T, ValidationContext","<","T",">",", CancellationToken, Task","<","Boolean",">",">",", Action)"),(0,i.kt)("p",null,"Defines an asynchronous condition that applies to several rules"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L366"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IConditionBuilder WhenAsync(Func<T, ValidationContext<T>, CancellationToken, Task<bool>> predicate, Action action)\n")),(0,i.kt)("h5",{id:"returns-19"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IConditionBuilder"},"ServiceStack.FluentValidation.IConditionBuilder")),(0,i.kt)("h5",{id:"parameters-20"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,ServiceStack.FluentValidation.ValidationContext<<T>>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"predicate")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The asynchronous condition that should apply to multiple rules")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules.")))),(0,i.kt)("h3",{id:"-unlessasyncfunct-cancellationtoken-taskboolean-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," UnlessAsync(Func","<","T, CancellationToken, Task","<","Boolean",">",">",", Action)"),(0,i.kt)("p",null,"Defines an inverse asynchronous condition that applies to several rules"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L375"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IConditionBuilder UnlessAsync(Func<T, CancellationToken, Task<bool>> predicate, Action action)\n")),(0,i.kt)("h5",{id:"returns-20"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IConditionBuilder"},"ServiceStack.FluentValidation.IConditionBuilder")),(0,i.kt)("h5",{id:"parameters-21"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"predicate")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The asynchronous condition that should be applied to multiple rules")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules")))),(0,i.kt)("h3",{id:"-unlessasyncfunct-validationcontextt-cancellationtoken-taskboolean-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," UnlessAsync(Func","<","T, ValidationContext","<","T",">",", CancellationToken, Task","<","Boolean",">",">",", Action)"),(0,i.kt)("p",null,"Defines an inverse asynchronous condition that applies to several rules"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L384"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IConditionBuilder UnlessAsync(Func<T, ValidationContext<T>, CancellationToken, Task<bool>> predicate, Action action)\n")),(0,i.kt)("h5",{id:"returns-21"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IConditionBuilder"},"ServiceStack.FluentValidation.IConditionBuilder")),(0,i.kt)("h5",{id:"parameters-22"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,ServiceStack.FluentValidation.ValidationContext<<T>>,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"predicate")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The asynchronous condition that should be applied to multiple rules")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules")))),(0,i.kt)("h3",{id:"-includeivalidatort"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Include(IValidator","<","T",">",")"),(0,i.kt)("p",null,"Includes the rules from the specified validator"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L391"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public void Include(IValidator<T> rulesToInclude)\n")),(0,i.kt)("h5",{id:"parameters-23"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"rulesToInclude"))))),(0,i.kt)("h3",{id:"-includetvalidatorfunct-tvalidator"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Include","<","TValidator",">","(Func","<","T, TValidator",">",")"),(0,i.kt)("p",null,"Includes the rules from the specified validator"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L400"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public void Include<TValidator>(Func<T, TValidator> rulesToInclude)\n    where TValidator : IValidator<T>\n")),(0,i.kt)("h5",{id:"parameters-24"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,<TValidator>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"rulesToInclude"))))),(0,i.kt)("h5",{id:"type-parameters-6"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TValidator"))),(0,i.kt)("h3",{id:"-getenumerator"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetEnumerator()"),(0,i.kt)("p",null,"Returns an enumerator that iterates through the collection of validation rules."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L413"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IEnumerator<IValidationRule> GetEnumerator()\n")),(0,i.kt)("h5",{id:"returns-22"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerator<ServiceStack.FluentValidation.IValidationRule>"),":\nA ",(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerator%601")," that can be used to iterate through the collection."),(0,i.kt)("h3",{id:"-ienumerablegetenumerator"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," IEnumerable.GetEnumerator()"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L417"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"IEnumerator IEnumerable.GetEnumerator()\n")),(0,i.kt)("h5",{id:"returns-23"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.IEnumerator")),(0,i.kt)("h3",{id:"-ensureinstancenotnullobject"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," EnsureInstanceNotNull(Object)"),(0,i.kt)("p",null,"Throws an exception if the instance being validated is null."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-33"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L425"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"protected virtual void EnsureInstanceNotNull(object instanceToValidate)\n")),(0,i.kt)("h5",{id:"parameters-25"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"instanceToValidate"))))),(0,i.kt)("h3",{id:"-prevalidatevalidationcontextt-validationresult"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," PreValidate(ValidationContext","<","T",">",", ValidationResult)"),(0,i.kt)("p",null,"Determines if validation should occur and provides a means to modify the context and ValidationResult prior to execution.\nIf this method returns false, then the ValidationResult is immediately returned from Validate/ValidateAsync."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-34"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L436"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"protected virtual bool PreValidate(ValidationContext<T> context, ValidationResult result)\n")),(0,i.kt)("h5",{id:"returns-24"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Boolean")),(0,i.kt)("h5",{id:"parameters-26"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/ValidationContext%60T%60"},"ServiceStack.FluentValidation.ValidationContext","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"context"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation.Results/ValidationResult"},"ServiceStack.FluentValidation.Results.ValidationResult")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"result"))))),(0,i.kt)("h3",{id:"-raisevalidationexceptionvalidationcontextt-validationresult"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," RaiseValidationException(ValidationContext","<","T",">",", ValidationResult)"),(0,i.kt)("p",null,"Throws a ValidationException. This method will only be called if the validator has been configured\nto throw exceptions if validation fails. The default behaviour is not to throw an exception."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-35"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.cs#L447"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"protected virtual void RaiseValidationException(ValidationContext<T> context, ValidationResult result)\n")),(0,i.kt)("h5",{id:"parameters-27"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/ValidationContext%60T%60"},"ServiceStack.FluentValidation.ValidationContext","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"context"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation.Results/ValidationResult"},"ServiceStack.FluentValidation.Results.ValidationResult")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"result"))))),(0,i.kt)("h3",{id:"-rulesetapplyto-action"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," RuleSet(ApplyTo, Action)"),(0,i.kt)("p",null,"Defines a RuleSet that can be used to provide specific validation rules for specific HTTP methods (GET, POST...)"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-36"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.Partial.cs#L104"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public void RuleSet(ApplyTo appliesTo, Action action)\n")),(0,i.kt)("h5",{id:"parameters-28"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack/ApplyTo"},"ServiceStack.ApplyTo")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"appliesTo")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The HTTP methods where this rule set should be used.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Action")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"action")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Action that encapsulates the rules in the ruleset.")))),(0,i.kt)("h3",{id:"-removepropertyrulesfuncpropertyrule-boolean"},(0,i.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," RemovePropertyRules(Func","<","PropertyRule, Boolean",">",")"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-37"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/AbstractValidator.Partial.cs#L122"}," ",(0,i.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public void RemovePropertyRules(Func<PropertyRule, bool> where)\n")),(0,i.kt)("h5",{id:"parameters-29"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.FluentValidation.Internal.PropertyRule,System.Boolean>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))))),(0,i.kt)("h2",{id:"implements"},"Implements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../ServiceStack.FluentValidation/IValidator"},"ServiceStack.FluentValidation.IValidator")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.IValidationRule>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"System.Collections.IEnumerable")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../ServiceStack.Web/IRequiresRequest"},"ServiceStack.Web.IRequiresRequest")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../ServiceStack/IHasTypeValidators"},"ServiceStack.IHasTypeValidators")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../ServiceStack.FluentValidation/IServiceStackValidator"},"ServiceStack.FluentValidation.IServiceStackValidator"))))}u.isMDXComponent=!0}}]);