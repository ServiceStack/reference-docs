"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[92153],{53118:function(e,t,o){o.r(t),o.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return m}});var a=o(83117),n=(o(67294),o(3905)),r=o(1954);const i={title:"Class InMemoryLogFactory",sidebar_label:"InMemoryLogFactory",description:"Note: InMemoryLog keeps all logs in memory, so don&apos;t use it long running exceptions\nReturns a thread-safe InMemoryLog which you can use while *TESTING* to provide a detailed analysis of your logs."},c='<Icon icon="codicon:symbol-class" className="symbol-class" /> InMemoryLogFactory',l={unversionedId:"api/ServiceStack.Support/InMemoryLogFactory",id:"api/ServiceStack.Support/InMemoryLogFactory",title:"Class InMemoryLogFactory",description:"Note: InMemoryLog keeps all logs in memory, so don&apos;t use it long running exceptions\nReturns a thread-safe InMemoryLog which you can use while *TESTING* to provide a detailed analysis of your logs.",source:"@site/docs/api/ServiceStack.Support/InMemoryLogFactory.md",sourceDirName:"api/ServiceStack.Support",slug:"/api/ServiceStack.Support/InMemoryLogFactory",permalink:"/api/ServiceStack.Support/InMemoryLogFactory",draft:!1,tags:[],version:"current",frontMatter:{title:"Class InMemoryLogFactory",sidebar_label:"InMemoryLogFactory",description:"Note: InMemoryLog keeps all logs in memory, so don&apos;t use it long running exceptions\nReturns a thread-safe InMemoryLog which you can use while *TESTING* to provide a detailed analysis of your logs."},sidebar:"apiSidebar",previous:{title:"InMemoryLog",permalink:"/api/ServiceStack.Support/InMemoryLog"},next:{title:"NetDeflateProvider",permalink:"/api/ServiceStack.Support/NetDeflateProvider"}},s={},m=[{value:"<strong>Assembly</strong>: ServiceStack.Common.dll",id:"assembly-servicestackcommondll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetLogger(Type)',id:"-getloggertype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetLogger(String)',id:"-getloggerstring",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"Implements",id:"implements",level:2}],g={toc:m};function p(e){let{components:t,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},g,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-inmemorylogfactory"},(0,n.kt)(r.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," InMemoryLogFactory"),(0,n.kt)("p",null,"Note: InMemoryLog keeps all logs in memory, so don","'","t use it long running exceptions"),(0,n.kt)("p",null,"Returns a thread-safe InMemoryLog which you can use while ",(0,n.kt)("em",{parentName:"p"},"TESTING"),"\nto provide a detailed analysis of your logs."),(0,n.kt)("h6",{id:"assembly-servicestackcommondll"},(0,n.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.Common.dll"),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Support/InMemoryLogFactory.cs#L14"}," ",(0,n.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public class InMemoryLogFactory : ILogFactory\n")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"-getloggertype"},(0,n.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetLogger(Type)"),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Support/InMemoryLogFactory.cs#L23"}," ",(0,n.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public ILog GetLogger(Type type)\n")),(0,n.kt)("h5",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Logging/ILog"},"ServiceStack.Logging.ILog")),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"type"))))),(0,n.kt)("h3",{id:"-getloggerstring"},(0,n.kt)(r.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetLogger(String)"),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Support/InMemoryLogFactory.cs#L28"}," ",(0,n.kt)(r.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public ILog GetLogger(string typeName)\n")),(0,n.kt)("h5",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.Logging/ILog"},"ServiceStack.Logging.ILog")),(0,n.kt)("h5",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.String")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"typeName"))))),(0,n.kt)("h2",{id:"implements"},"Implements"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"../ServiceStack.Logging/ILogFactory"},"ServiceStack.Logging.ILogFactory"))))}p.isMDXComponent=!0}}]);