"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[9973],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),o=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=o(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=o(n),k=r,u=d["".concat(c,".").concat(k)]||d[k]||p[k]||i;return n?a.createElement(u,l(l({ref:t},m),{},{components:n})):a.createElement(u,l({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8159:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return o},toc:function(){return m},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],s={title:"Class OrmLiteWriteExpressionsApiAsyncLegacy",sidebar_label:"OrmLiteWriteExpressionsApiAsyncLegacy"},c="Class OrmLiteWriteExpressionsApiAsyncLegacy",o={unversionedId:"api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiAsyncLegacy",id:"api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiAsyncLegacy",title:"Class OrmLiteWriteExpressionsApiAsyncLegacy",description:"Assembly: ServiceStack.OrmLite.dll",source:"@site/docs/api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.md",sourceDirName:"api/ServiceStack.OrmLite.Legacy",slug:"/api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiAsyncLegacy",permalink:"/api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiAsyncLegacy",tags:[],version:"current",frontMatter:{title:"Class OrmLiteWriteExpressionsApiAsyncLegacy",sidebar_label:"OrmLiteWriteExpressionsApiAsyncLegacy"},sidebar:"apiSidebar",previous:{title:"OrmLiteWriteCommandExtensionsLegacy",permalink:"/api/ServiceStack.OrmLite.Legacy/OrmLiteWriteCommandExtensionsLegacy"},next:{title:"OrmLiteWriteExpressionsApiLegacy",permalink:"/api/ServiceStack.OrmLite.Legacy/OrmLiteWriteExpressionsApiLegacy"}},m=[{value:"<strong>Assembly</strong>: ServiceStack.OrmLite.dll",id:"assembly-servicestackormlitedll",children:[],level:6},{value:"View Source",id:"view-source",children:[],level:6},{value:"Methods",id:"methods",children:[{value:"InsertOnlyAsync&lt;T&gt;(IDbConnection, T, Func&lt;SqlExpression&lt;T&gt;, SqlExpression&lt;T&gt;&gt;, CancellationToken)",id:"insertonlyasynctidbconnection-t-funcsqlexpressiont-sqlexpressiont-cancellationtoken",children:[{value:"View Source",id:"view-source-1",children:[],level:6},{value:"Returns",id:"returns",children:[],level:5},{value:"Parameters",id:"parameters",children:[],level:5},{value:"Type Parameters",id:"type-parameters",children:[],level:5}],level:3},{value:"InsertOnlyAsync&lt;T&gt;(IDbConnection, T, SqlExpression&lt;T&gt;, CancellationToken)",id:"insertonlyasynctidbconnection-t-sqlexpressiont-cancellationtoken",children:[{value:"View Source",id:"view-source-2",children:[],level:6},{value:"Returns",id:"returns-1",children:[],level:5},{value:"Parameters",id:"parameters-1",children:[],level:5},{value:"Type Parameters",id:"type-parameters-1",children:[],level:5}],level:3},{value:"UpdateOnlyAsync&lt;T&gt;(IDbConnection, T, Func&lt;SqlExpression&lt;T&gt;, SqlExpression&lt;T&gt;&gt;, CancellationToken)",id:"updateonlyasynctidbconnection-t-funcsqlexpressiont-sqlexpressiont-cancellationtoken",children:[{value:"View Source",id:"view-source-3",children:[],level:6},{value:"Returns",id:"returns-2",children:[],level:5},{value:"Parameters",id:"parameters-2",children:[],level:5},{value:"Type Parameters",id:"type-parameters-2",children:[],level:5}],level:3},{value:"UpdateFmtAsync&lt;T&gt;(IDbConnection, String, String, CancellationToken)",id:"updatefmtasynctidbconnection-string-string-cancellationtoken",children:[{value:"View Source",id:"view-source-4",children:[],level:6},{value:"Returns",id:"returns-3",children:[],level:5},{value:"Parameters",id:"parameters-3",children:[],level:5},{value:"Type Parameters",id:"type-parameters-3",children:[],level:5}],level:3},{value:"UpdateFmtAsync(IDbConnection, String, String, String, CancellationToken)",id:"updatefmtasyncidbconnection-string-string-string-cancellationtoken",children:[{value:"View Source",id:"view-source-5",children:[],level:6},{value:"Returns",id:"returns-4",children:[],level:5},{value:"Parameters",id:"parameters-4",children:[],level:5}],level:3},{value:"DeleteFmtAsync&lt;T&gt;(IDbConnection, String, CancellationToken)",id:"deletefmtasynctidbconnection-string-cancellationtoken",children:[{value:"View Source",id:"view-source-6",children:[],level:6},{value:"Returns",id:"returns-5",children:[],level:5},{value:"Parameters",id:"parameters-5",children:[],level:5},{value:"Type Parameters",id:"type-parameters-4",children:[],level:5}],level:3},{value:"DeleteFmtAsync&lt;T&gt;(IDbConnection, String)",id:"deletefmtasynctidbconnection-string",children:[{value:"View Source",id:"view-source-7",children:[],level:6},{value:"Returns",id:"returns-6",children:[],level:5},{value:"Parameters",id:"parameters-6",children:[],level:5},{value:"Type Parameters",id:"type-parameters-5",children:[],level:5}],level:3},{value:"DeleteFmtAsync(IDbConnection, String, String, CancellationToken)",id:"deletefmtasyncidbconnection-string-string-cancellationtoken",children:[{value:"View Source",id:"view-source-8",children:[],level:6},{value:"Returns",id:"returns-7",children:[],level:5},{value:"Parameters",id:"parameters-7",children:[],level:5}],level:3},{value:"DeleteAsync&lt;T&gt;(IDbConnection, Func&lt;SqlExpression&lt;T&gt;, SqlExpression&lt;T&gt;&gt;, CancellationToken)",id:"deleteasynctidbconnection-funcsqlexpressiont-sqlexpressiont-cancellationtoken",children:[{value:"View Source",id:"view-source-9",children:[],level:6},{value:"Returns",id:"returns-8",children:[],level:5},{value:"Parameters",id:"parameters-8",children:[],level:5},{value:"Type Parameters",id:"type-parameters-6",children:[],level:5}],level:3}],level:2}],p={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"class-ormlitewriteexpressionsapiasynclegacy"},"Class OrmLiteWriteExpressionsApiAsyncLegacy"),(0,i.kt)("h6",{id:"assembly-servicestackormlitedll"},(0,i.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.OrmLite.dll"),(0,i.kt)("h6",{id:"view-source"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L10"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static class OrmLiteWriteExpressionsApiAsyncLegacy\n')),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"insertonlyasynctidbconnection-t-funcsqlexpressiont-sqlexpressiont-cancellationtoken"},"InsertOnlyAsync","<","T",">","(IDbConnection, T, Func","<","SqlExpression","<","T",">",", SqlExpression","<","T",">",">",", CancellationToken)"),(0,i.kt)("p",null,"Insert only fields in POCO specified by the SqlExpression lambda. E.g:\n","<","p",">","db.InsertOnly(new Person { FirstName = ",'"',"Amy",'"',", Age = 27 }, q =",">"," q.Insert(p =",">"," new { p.FirstName, p.Age }))","<","/p",">"),(0,i.kt)("h6",{id:"view-source-1"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L17"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("Use db.InsertOnlyAsync(obj, db.From<T>())")]\npublic static Task InsertOnlyAsync<T>(this IDbConnection dbConn, T obj, Func<SqlExpression<T>, SqlExpression<T>> onlyFields, CancellationToken token = default(CancellationToken))\n')),(0,i.kt)("h5",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task")),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"obj"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.OrmLite.SqlExpression<<T>>,ServiceStack.OrmLite.SqlExpression<<T>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"onlyFields"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"token"))))),(0,i.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"insertonlyasynctidbconnection-t-sqlexpressiont-cancellationtoken"},"InsertOnlyAsync","<","T",">","(IDbConnection, T, SqlExpression","<","T",">",", CancellationToken)"),(0,i.kt)("p",null,"Using an SqlExpression to only Insert the fields specified, e.g:"),(0,i.kt)("p",null,"db.InsertOnly(new Person { FirstName = ",'"',"Amy",'"'," }, q =",">"," q.Insert(p =",">"," new { p.FirstName }));\nINSERT INTO ",'"',"Person",'"'," (",'"',"FirstName",'"',") VALUES (","'","Amy","'",");"),(0,i.kt)("h6",{id:"view-source-2"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L29"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Task InsertOnlyAsync<T>(this IDbConnection dbConn, T obj, SqlExpression<T> onlyFields, CancellationToken token = default(CancellationToken))\n")),(0,i.kt)("h5",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task")),(0,i.kt)("h5",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"obj"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.OrmLite/SqlExpression%60T%60"},"ServiceStack.OrmLite.SqlExpression","<","T",">")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"onlyFields"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"token"))))),(0,i.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"updateonlyasynctidbconnection-t-funcsqlexpressiont-sqlexpressiont-cancellationtoken"},"UpdateOnlyAsync","<","T",">","(IDbConnection, T, Func","<","SqlExpression","<","T",">",", SqlExpression","<","T",">",">",", CancellationToken)"),(0,i.kt)("p",null,"Use an SqlExpression to select which fields to update and construct the where expression, E.g: "),(0,i.kt)("p",null,"db.UpdateOnly(new Person { FirstName = ",'"',"JJ",'"'," }, ev =",">"," ev.Update(p =",">"," p.FirstName).Where(x =",">"," x.FirstName == ",'"',"Jimi",'"',"));\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"FirstName",'"'," = ","'","Jimi","'",")"),(0,i.kt)("p",null,"What","'","s not in the update expression doesn","'","t get updated. No where expression updates all rows. E.g:"),(0,i.kt)("p",null,"db.UpdateOnly(new Person { FirstName = ",'"',"JJ",'"',", LastName = ",'"',"Hendo",'"'," }, ev =",">"," ev.Update(p =",">"," p.FirstName));\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"),(0,i.kt)("h6",{id:"view-source-3"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L45"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("Use db.UpdateOnlyAsync(model, db.From<T>())")]\npublic static Task<int> UpdateOnlyAsync<T>(this IDbConnection dbConn, T model, Func<SqlExpression<T>, SqlExpression<T>> onlyFields, CancellationToken token = default(CancellationToken))\n')),(0,i.kt)("h5",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Int32>")),(0,i.kt)("h5",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"<T>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"model"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.OrmLite.SqlExpression<<T>>,ServiceStack.OrmLite.SqlExpression<<T>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"onlyFields"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"token"))))),(0,i.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"updatefmtasynctidbconnection-string-string-cancellationtoken"},"UpdateFmtAsync","<","T",">","(IDbConnection, String, String, CancellationToken)"),(0,i.kt)("p",null,"Flexible Update method to succinctly execute a free-text update statement using optional params. E.g:"),(0,i.kt)("p",null,"db.Update","<","Person",">","(set:",'"',"FirstName = {0}",'"',".Params(",'"',"JJ",'"',"), where:",'"',"LastName = {0}",'"',".Params(",'"',"Hendrix",'"',"));\nUPDATE ",'"',"Person",'"'," SET FirstName = ","'","JJ","'"," WHERE LastName = ","'","Hendrix","'"),(0,i.kt)("h6",{id:"view-source-4"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L57"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static Task<int> UpdateFmtAsync<T>(this IDbConnection dbConn, string set = null, string where = null, CancellationToken token = default(CancellationToken))\n')),(0,i.kt)("h5",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Int32>")),(0,i.kt)("h5",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"set"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"token"))))),(0,i.kt)("h5",{id:"type-parameters-3"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"updatefmtasyncidbconnection-string-string-string-cancellationtoken"},"UpdateFmtAsync(IDbConnection, String, String, String, CancellationToken)"),(0,i.kt)("p",null,"Flexible Update method to succinctly execute a free-text update statement using optional params. E.g."),(0,i.kt)("p",null,"db.Update(table:",'"',"Person",'"',", set: ",'"',"FirstName = {0}",'"',".Params(",'"',"JJ",'"',"), where: ",'"',"LastName = {0}",'"',".Params(",'"',"Hendrix",'"',"));\nUPDATE ",'"',"Person",'"'," SET FirstName = ","'","JJ","'"," WHERE LastName = ","'","Hendrix","'"),(0,i.kt)("h6",{id:"view-source-5"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L69"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static Task<int> UpdateFmtAsync(this IDbConnection dbConn, string table = null, string set = null, string where = null, CancellationToken token = default(CancellationToken))\n')),(0,i.kt)("h5",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Int32>")),(0,i.kt)("h5",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"table"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"set"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"token"))))),(0,i.kt)("h3",{id:"deletefmtasynctidbconnection-string-cancellationtoken"},"DeleteFmtAsync","<","T",">","(IDbConnection, String, CancellationToken)"),(0,i.kt)("p",null,"Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g."),(0,i.kt)("p",null,"db.Delete","<","Person",">","(where:",'"',"Age = {0}",'"',".Params(27));\nDELETE FROM ",'"',"Person",'"'," WHERE Age = 27"),(0,i.kt)("h6",{id:"view-source-6"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L81"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static Task<int> DeleteFmtAsync<T>(this IDbConnection dbConn, string where, CancellationToken token = default(CancellationToken))\n')),(0,i.kt)("h5",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Int32>")),(0,i.kt)("h5",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"token"))))),(0,i.kt)("h5",{id:"type-parameters-4"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"deletefmtasynctidbconnection-string"},"DeleteFmtAsync","<","T",">","(IDbConnection, String)"),(0,i.kt)("h6",{id:"view-source-7"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L86"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static Task<int> DeleteFmtAsync<T>(this IDbConnection dbConn, string where = null)\n')),(0,i.kt)("h5",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Int32>")),(0,i.kt)("h5",{id:"parameters-6"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))))),(0,i.kt)("h5",{id:"type-parameters-5"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))),(0,i.kt)("h3",{id:"deletefmtasyncidbconnection-string-string-cancellationtoken"},"DeleteFmtAsync(IDbConnection, String, String, CancellationToken)"),(0,i.kt)("p",null,"Flexible Delete method to succinctly execute a delete statement using free-text where expression. E.g."),(0,i.kt)("p",null,"db.Delete(table:",'"',"Person",'"',", where: ",'"',"Age = {0}",'"',".Params(27));\nDELETE FROM ",'"',"Person",'"'," WHERE Age = 27"),(0,i.kt)("h6",{id:"view-source-8"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L98"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("API is deprecated and will move to ServiceStack.OrmLite.Legacy namespace in future release")]\npublic static Task<int> DeleteFmtAsync(this IDbConnection dbConn, string table = null, string where = null, CancellationToken token = default(CancellationToken))\n')),(0,i.kt)("h5",{id:"returns-7"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Int32>")),(0,i.kt)("h5",{id:"parameters-7"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"table"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"token"))))),(0,i.kt)("h3",{id:"deleteasynctidbconnection-funcsqlexpressiont-sqlexpressiont-cancellationtoken"},"DeleteAsync","<","T",">","(IDbConnection, Func","<","SqlExpression","<","T",">",", SqlExpression","<","T",">",">",", CancellationToken)"),(0,i.kt)("p",null,"Delete the rows that matches the where expression, e.g:"),(0,i.kt)("p",null,"db.Delete","<","Person",">","(ev =",">"," ev.Where(p =",">"," p.Age == 27));\nDELETE FROM ",'"',"Person",'"'," WHERE (",'"',"Age",'"'," = 27)"),(0,i.kt)("h6",{id:"view-source-9"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Legacy/OrmLiteWriteExpressionsApiAsyncLegacy.cs#L110"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'[Obsolete("Use db.DeleteAsync(db.From<T>())")]\npublic static Task<int> DeleteAsync<T>(this IDbConnection dbConn, Func<SqlExpression<T>, SqlExpression<T>> where, CancellationToken token = default(CancellationToken))\n')),(0,i.kt)("h5",{id:"returns-8"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Int32>")),(0,i.kt)("h5",{id:"parameters-8"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"dbConn"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.OrmLite.SqlExpression<<T>>,ServiceStack.OrmLite.SqlExpression<<T>>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"where"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Threading.CancellationToken")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"token"))))),(0,i.kt)("h5",{id:"type-parameters-6"},"Type Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"T"))))}d.isMDXComponent=!0}}]);