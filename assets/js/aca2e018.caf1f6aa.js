"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[5779],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return u}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function p(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?p(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},p=Object.keys(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)a=p[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),o=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=o(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,p=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=o(a),u=n,k=d["".concat(c,".").concat(u)]||d[u]||s[u]||p;return a?r.createElement(k,l(l({ref:t},m),{},{components:a})):r.createElement(k,l({ref:t},m))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=a.length,l=new Array(p);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var o=2;o<p;o++)l[o]=a[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},32144:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return s},frontMatter:function(){return p},metadata:function(){return i},toc:function(){return o}});var r=a(83117),n=(a(67294),a(3905));const p={title:"Interface SqlMapper.ITypeHandler",sidebar_label:"SqlMapper.ITypeHandler",description:"Implement this interface to perform custom type-based parameter handling and value parsing"},l="Interface SqlMapper.ITypeHandler",i={unversionedId:"api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler",id:"api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler",title:"Interface SqlMapper.ITypeHandler",description:"Implement this interface to perform custom type-based parameter handling and value parsing",source:"@site/docs/api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler.md",sourceDirName:"api/ServiceStack.OrmLite.Dapper",slug:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler",draft:!1,tags:[],version:"current",frontMatter:{title:"Interface SqlMapper.ITypeHandler",sidebar_label:"SqlMapper.ITypeHandler",description:"Implement this interface to perform custom type-based parameter handling and value parsing"},sidebar:"apiSidebar",previous:{title:"SqlMapper.IParameterLookup",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.IParameterLookup"},next:{title:"SqlMapper.ITypeMap",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.ITypeMap"}},c={},o=[{value:"<strong>Assembly</strong>: ServiceStack.OrmLite.dll",id:"assembly-servicestackormlitedll",level:6},{value:"View Source",id:"view-source",level:6},{value:"Methods",id:"methods",level:2},{value:"SetValue(IDbDataParameter, Object)",id:"setvalueidbdataparameter-object",level:3},{value:"View Source",id:"view-source-1",level:6},{value:"Parameters",id:"parameters",level:5},{value:"Parse(Type, Object)",id:"parsetype-object",level:3},{value:"View Source",id:"view-source-2",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters-1",level:5}],m={toc:o};function s(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"interface-sqlmapperitypehandler"},"Interface SqlMapper.ITypeHandler"),(0,n.kt)("p",null,"Implement this interface to perform custom type-based parameter handling and value parsing"),(0,n.kt)("h6",{id:"assembly-servicestackormlitedll"},(0,n.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.OrmLite.dll"),(0,n.kt)("h6",{id:"view-source"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.ITypeHandler.cs#L11"},"View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public interface ITypeHandler\n")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"setvalueidbdataparameter-object"},"SetValue(IDbDataParameter, Object)"),(0,n.kt)("p",null,"Assign the value of a parameter before a command executes"),(0,n.kt)("h6",{id:"view-source-1"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.ITypeHandler.cs#L18"},"View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"void SetValue(IDbDataParameter parameter, object value)\n")),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Data.IDbDataParameter")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"parameter")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The parameter to configure")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"value")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Parameter value")))),(0,n.kt)("h3",{id:"parsetype-object"},"Parse(Type, Object)"),(0,n.kt)("p",null,"Parse a database value back to a typed value"),(0,n.kt)("h6",{id:"view-source-2"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.ITypeHandler.cs#L26"},"View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"object Parse(Type destinationType, object value)\n")),(0,n.kt)("h5",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"System.Object"),": The typed value"),(0,n.kt)("h5",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"destinationType")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The type to parse to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"value")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The value from the database")))))}s.isMDXComponent=!0}}]);