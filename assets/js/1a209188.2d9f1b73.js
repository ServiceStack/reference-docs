"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[4935],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return u}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function d(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},o=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),o=c(r),u=n,k=o["".concat(p,".").concat(u)]||o[u]||m[u]||i;return r?a.createElement(k,l(l({ref:t},s),{},{components:r})):a.createElement(k,l({ref:t},s))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=o;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d.mdxType="string"==typeof e?e:n,l[1]=d;for(var c=2;c<i;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}o.displayName="MDXCreateElement"},9675:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return d},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return o}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),l=["components"],d={title:"Class SqlMapper.GridReader",sidebar_label:"SqlMapper.GridReader",description:"The grid reader provides interfaces for reading multiple result sets from a Dapper query"},p="Class SqlMapper.GridReader",c={unversionedId:"api/ServiceStack.OrmLite.Dapper/SqlMapper.GridReader",id:"api/ServiceStack.OrmLite.Dapper/SqlMapper.GridReader",title:"Class SqlMapper.GridReader",description:"The grid reader provides interfaces for reading multiple result sets from a Dapper query",source:"@site/docs/api/ServiceStack.OrmLite.Dapper/SqlMapper.GridReader.md",sourceDirName:"api/ServiceStack.OrmLite.Dapper",slug:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.GridReader",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.GridReader",tags:[],version:"current",frontMatter:{title:"Class SqlMapper.GridReader",sidebar_label:"SqlMapper.GridReader",description:"The grid reader provides interfaces for reading multiple result sets from a Dapper query"},sidebar:"apiSidebar",previous:{title:"IWrappedDataReader",permalink:"/api/ServiceStack.OrmLite.Dapper/IWrappedDataReader"},next:{title:"SqlMapper.ICustomQueryParameter",permalink:"/api/ServiceStack.OrmLite.Dapper/SqlMapper.ICustomQueryParameter"}},s=[{value:"<strong>Assembly</strong>: ServiceStack.OrmLite.dll",id:"assembly-servicestackormlitedll",children:[],level:6},{value:"View Source",id:"view-source",children:[],level:6},{value:"Properties",id:"properties",children:[{value:"IsConsumed",id:"isconsumed",children:[{value:"View Source",id:"view-source-1",children:[],level:6}],level:3},{value:"Command",id:"command",children:[{value:"View Source",id:"view-source-2",children:[],level:6}],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"ReadAsync(Boolean)",id:"readasyncboolean",children:[{value:"View Source",id:"view-source-3",children:[],level:6},{value:"Returns",id:"returns",children:[],level:5},{value:"Parameters",id:"parameters",children:[],level:5}],level:3},{value:"ReadFirstAsync()",id:"readfirstasync",children:[{value:"View Source",id:"view-source-4",children:[],level:6},{value:"Returns",id:"returns-1",children:[],level:5}],level:3},{value:"ReadFirstOrDefaultAsync()",id:"readfirstordefaultasync",children:[{value:"View Source",id:"view-source-5",children:[],level:6},{value:"Returns",id:"returns-2",children:[],level:5}],level:3},{value:"ReadSingleAsync()",id:"readsingleasync",children:[{value:"View Source",id:"view-source-6",children:[],level:6},{value:"Returns",id:"returns-3",children:[],level:5}],level:3},{value:"ReadSingleOrDefaultAsync()",id:"readsingleordefaultasync",children:[{value:"View Source",id:"view-source-7",children:[],level:6},{value:"Returns",id:"returns-4",children:[],level:5}],level:3},{value:"ReadAsync(Type, Boolean)",id:"readasynctype-boolean",children:[{value:"View Source",id:"view-source-8",children:[],level:6},{value:"Returns",id:"returns-5",children:[],level:5},{value:"Parameters",id:"parameters-1",children:[],level:5}],level:3},{value:"ReadFirstAsync(Type)",id:"readfirstasynctype",children:[{value:"View Source",id:"view-source-9",children:[],level:6},{value:"Returns",id:"returns-6",children:[],level:5},{value:"Parameters",id:"parameters-2",children:[],level:5}],level:3},{value:"ReadFirstOrDefaultAsync(Type)",id:"readfirstordefaultasynctype",children:[{value:"View Source",id:"view-source-10",children:[],level:6},{value:"Returns",id:"returns-7",children:[],level:5},{value:"Parameters",id:"parameters-3",children:[],level:5}],level:3},{value:"ReadSingleAsync(Type)",id:"readsingleasynctype",children:[{value:"View Source",id:"view-source-11",children:[],level:6},{value:"Returns",id:"returns-8",children:[],level:5},{value:"Parameters",id:"parameters-4",children:[],level:5}],level:3},{value:"ReadSingleOrDefaultAsync(Type)",id:"readsingleordefaultasynctype",children:[{value:"View Source",id:"view-source-12",children:[],level:6},{value:"Returns",id:"returns-9",children:[],level:5},{value:"Parameters",id:"parameters-5",children:[],level:5}],level:3},{value:"ReadAsync&lt;T&gt;(Boolean)",id:"readasynctboolean",children:[{value:"View Source",id:"view-source-13",children:[],level:6},{value:"Returns",id:"returns-10",children:[],level:5},{value:"Parameters",id:"parameters-6",children:[],level:5},{value:"Type Parameters",id:"type-parameters",children:[],level:5}],level:3},{value:"ReadFirstAsync&lt;T&gt;()",id:"readfirstasynct",children:[{value:"View Source",id:"view-source-14",children:[],level:6},{value:"Returns",id:"returns-11",children:[],level:5},{value:"Type Parameters",id:"type-parameters-1",children:[],level:5}],level:3},{value:"ReadFirstOrDefaultAsync&lt;T&gt;()",id:"readfirstordefaultasynct",children:[{value:"View Source",id:"view-source-15",children:[],level:6},{value:"Returns",id:"returns-12",children:[],level:5},{value:"Type Parameters",id:"type-parameters-2",children:[],level:5}],level:3},{value:"ReadSingleAsync&lt;T&gt;()",id:"readsingleasynct",children:[{value:"View Source",id:"view-source-16",children:[],level:6},{value:"Returns",id:"returns-13",children:[],level:5},{value:"Type Parameters",id:"type-parameters-3",children:[],level:5}],level:3},{value:"ReadSingleOrDefaultAsync&lt;T&gt;()",id:"readsingleordefaultasynct",children:[{value:"View Source",id:"view-source-17",children:[],level:6},{value:"Returns",id:"returns-14",children:[],level:5},{value:"Type Parameters",id:"type-parameters-4",children:[],level:5}],level:3},{value:"Read(Boolean)",id:"readboolean",children:[{value:"View Source",id:"view-source-18",children:[],level:6},{value:"Returns",id:"returns-15",children:[],level:5},{value:"Parameters",id:"parameters-7",children:[],level:5}],level:3},{value:"ReadFirst()",id:"readfirst",children:[{value:"View Source",id:"view-source-19",children:[],level:6},{value:"Returns",id:"returns-16",children:[],level:5}],level:3},{value:"ReadFirstOrDefault()",id:"readfirstordefault",children:[{value:"View Source",id:"view-source-20",children:[],level:6},{value:"Returns",id:"returns-17",children:[],level:5}],level:3},{value:"ReadSingle()",id:"readsingle",children:[{value:"View Source",id:"view-source-21",children:[],level:6},{value:"Returns",id:"returns-18",children:[],level:5}],level:3},{value:"ReadSingleOrDefault()",id:"readsingleordefault",children:[{value:"View Source",id:"view-source-22",children:[],level:6},{value:"Returns",id:"returns-19",children:[],level:5}],level:3},{value:"Read&lt;T&gt;(Boolean)",id:"readtboolean",children:[{value:"View Source",id:"view-source-23",children:[],level:6},{value:"Returns",id:"returns-20",children:[],level:5},{value:"Parameters",id:"parameters-8",children:[],level:5},{value:"Type Parameters",id:"type-parameters-5",children:[],level:5}],level:3},{value:"ReadFirst&lt;T&gt;()",id:"readfirstt",children:[{value:"View Source",id:"view-source-24",children:[],level:6},{value:"Returns",id:"returns-21",children:[],level:5},{value:"Type Parameters",id:"type-parameters-6",children:[],level:5}],level:3},{value:"ReadFirstOrDefault&lt;T&gt;()",id:"readfirstordefaultt",children:[{value:"View Source",id:"view-source-25",children:[],level:6},{value:"Returns",id:"returns-22",children:[],level:5},{value:"Type Parameters",id:"type-parameters-7",children:[],level:5}],level:3},{value:"ReadSingle&lt;T&gt;()",id:"readsinglet",children:[{value:"View Source",id:"view-source-26",children:[],level:6},{value:"Returns",id:"returns-23",children:[],level:5},{value:"Type Parameters",id:"type-parameters-8",children:[],level:5}],level:3},{value:"ReadSingleOrDefault&lt;T&gt;()",id:"readsingleordefaultt",children:[{value:"View Source",id:"view-source-27",children:[],level:6},{value:"Returns",id:"returns-24",children:[],level:5},{value:"Type Parameters",id:"type-parameters-9",children:[],level:5}],level:3},{value:"Read(Type, Boolean)",id:"readtype-boolean",children:[{value:"View Source",id:"view-source-28",children:[],level:6},{value:"Returns",id:"returns-25",children:[],level:5},{value:"Parameters",id:"parameters-9",children:[],level:5}],level:3},{value:"ReadFirst(Type)",id:"readfirsttype",children:[{value:"View Source",id:"view-source-29",children:[],level:6},{value:"Returns",id:"returns-26",children:[],level:5},{value:"Parameters",id:"parameters-10",children:[],level:5}],level:3},{value:"ReadFirstOrDefault(Type)",id:"readfirstordefaulttype",children:[{value:"View Source",id:"view-source-30",children:[],level:6},{value:"Returns",id:"returns-27",children:[],level:5},{value:"Parameters",id:"parameters-11",children:[],level:5}],level:3},{value:"ReadSingle(Type)",id:"readsingletype",children:[{value:"View Source",id:"view-source-31",children:[],level:6},{value:"Returns",id:"returns-28",children:[],level:5},{value:"Parameters",id:"parameters-12",children:[],level:5}],level:3},{value:"ReadSingleOrDefault(Type)",id:"readsingleordefaulttype",children:[{value:"View Source",id:"view-source-32",children:[],level:6},{value:"Returns",id:"returns-29",children:[],level:5},{value:"Parameters",id:"parameters-13",children:[],level:5}],level:3},{value:"Read&lt;TFirst, TSecond, TReturn&gt;(Func&lt;TFirst, TSecond, TReturn&gt;, String, Boolean)",id:"readtfirst-tsecond-treturnfunctfirst-tsecond-treturn-string-boolean",children:[{value:"View Source",id:"view-source-33",children:[],level:6},{value:"Returns",id:"returns-30",children:[],level:5},{value:"Parameters",id:"parameters-14",children:[],level:5},{value:"Type Parameters",id:"type-parameters-10",children:[],level:5}],level:3},{value:"Read&lt;TFirst, TSecond, TThird, TReturn&gt;(Func&lt;TFirst, TSecond, TThird, TReturn&gt;, String, Boolean)",id:"readtfirst-tsecond-tthird-treturnfunctfirst-tsecond-tthird-treturn-string-boolean",children:[{value:"View Source",id:"view-source-34",children:[],level:6},{value:"Returns",id:"returns-31",children:[],level:5},{value:"Parameters",id:"parameters-15",children:[],level:5},{value:"Type Parameters",id:"type-parameters-11",children:[],level:5}],level:3},{value:"Read&lt;TFirst, TSecond, TThird, TFourth, TReturn&gt;(Func&lt;TFirst, TSecond, TThird, TFourth, TReturn&gt;, String, Boolean)",id:"readtfirst-tsecond-tthird-tfourth-treturnfunctfirst-tsecond-tthird-tfourth-treturn-string-boolean",children:[{value:"View Source",id:"view-source-35",children:[],level:6},{value:"Returns",id:"returns-32",children:[],level:5},{value:"Parameters",id:"parameters-16",children:[],level:5},{value:"Type Parameters",id:"type-parameters-12",children:[],level:5}],level:3},{value:"Read&lt;TFirst, TSecond, TThird, TFourth, TFifth, TReturn&gt;(Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TReturn&gt;, String, Boolean)",id:"readtfirst-tsecond-tthird-tfourth-tfifth-treturnfunctfirst-tsecond-tthird-tfourth-tfifth-treturn-string-boolean",children:[{value:"View Source",id:"view-source-36",children:[],level:6},{value:"Returns",id:"returns-33",children:[],level:5},{value:"Parameters",id:"parameters-17",children:[],level:5},{value:"Type Parameters",id:"type-parameters-13",children:[],level:5}],level:3},{value:"Read&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn&gt;(Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn&gt;, String, Boolean)",id:"readtfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturnfunctfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturn-string-boolean",children:[{value:"View Source",id:"view-source-37",children:[],level:6},{value:"Returns",id:"returns-34",children:[],level:5},{value:"Parameters",id:"parameters-18",children:[],level:5},{value:"Type Parameters",id:"type-parameters-14",children:[],level:5}],level:3},{value:"Read&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&gt;(Func&lt;TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn&gt;, String, Boolean)",id:"readtfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturnfunctfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturn-string-boolean",children:[{value:"View Source",id:"view-source-38",children:[],level:6},{value:"Returns",id:"returns-35",children:[],level:5},{value:"Parameters",id:"parameters-19",children:[],level:5},{value:"Type Parameters",id:"type-parameters-15",children:[],level:5}],level:3},{value:"Read&lt;TReturn&gt;(Type[], Func&lt;Object[], TReturn&gt;, String, Boolean)",id:"readtreturntype-funcobject-treturn-string-boolean",children:[{value:"View Source",id:"view-source-39",children:[],level:6},{value:"Returns",id:"returns-36",children:[],level:5},{value:"Parameters",id:"parameters-20",children:[],level:5},{value:"Type Parameters",id:"type-parameters-16",children:[],level:5}],level:3},{value:"Dispose()",id:"dispose",children:[{value:"View Source",id:"view-source-40",children:[],level:6}],level:3}],level:2},{value:"Implements",id:"implements",children:[],level:2}],m={toc:s};function o(e){var t=e.components,r=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"class-sqlmappergridreader"},"Class SqlMapper.GridReader"),(0,i.kt)("p",null,"The grid reader provides interfaces for reading multiple result sets from a Dapper query"),(0,i.kt)("h6",{id:"assembly-servicestackormlitedll"},(0,i.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.OrmLite.dll"),(0,i.kt)("h6",{id:"view-source"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L13"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public class GridReader : IDisposable\n")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"isconsumed"},"IsConsumed"),(0,i.kt)("p",null,"Has the underlying reader been consumed?"),(0,i.kt)("h6",{id:"view-source-1"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L392"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public bool IsConsumed { get; }\n")),(0,i.kt)("h3",{id:"command"},"Command"),(0,i.kt)("p",null,"The command associated with the reader"),(0,i.kt)("h6",{id:"view-source-2"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L397"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IDbCommand Command { get; set; }\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"readasyncboolean"},"ReadAsync(Boolean)"),(0,i.kt)("p",null,"Read the next grid of results, returned as a dynamic object"),(0,i.kt)("h6",{id:"view-source-3"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L27"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<IEnumerable<dynamic>> ReadAsync(bool buffered = true)\n")),(0,i.kt)("h5",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.Object>>")),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer the results.")))),(0,i.kt)("h3",{id:"readfirstasync"},"ReadFirstAsync()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results, returned as a dynamic object"),(0,i.kt)("h6",{id:"view-source-4"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L33"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<dynamic> ReadFirstAsync()\n")),(0,i.kt)("h5",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Object>")),(0,i.kt)("h3",{id:"readfirstordefaultasync"},"ReadFirstOrDefaultAsync()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results, returned as a dynamic object"),(0,i.kt)("h6",{id:"view-source-5"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L39"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<dynamic> ReadFirstOrDefaultAsync()\n")),(0,i.kt)("h5",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Object>")),(0,i.kt)("h3",{id:"readsingleasync"},"ReadSingleAsync()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results, returned as a dynamic object"),(0,i.kt)("h6",{id:"view-source-6"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L45"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<dynamic> ReadSingleAsync()\n")),(0,i.kt)("h5",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Object>")),(0,i.kt)("h3",{id:"readsingleordefaultasync"},"ReadSingleOrDefaultAsync()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results, returned as a dynamic object"),(0,i.kt)("h6",{id:"view-source-7"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L51"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<dynamic> ReadSingleOrDefaultAsync()\n")),(0,i.kt)("h5",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Object>")),(0,i.kt)("h3",{id:"readasynctype-boolean"},"ReadAsync(Type, Boolean)"),(0,i.kt)("p",null,"Read the next grid of results"),(0,i.kt)("h6",{id:"view-source-8"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L59"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<IEnumerable<object>> ReadAsync(Type type, bool buffered = true)\n")),(0,i.kt)("h5",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.Object>>")),(0,i.kt)("h5",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer the results.")))),(0,i.kt)("h3",{id:"readfirstasynctype"},"ReadFirstAsync(Type)"),(0,i.kt)("p",null,"Read an individual row of the next grid of results"),(0,i.kt)("h6",{id:"view-source-9"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L70"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<object> ReadFirstAsync(Type type)\n")),(0,i.kt)("h5",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Object>")),(0,i.kt)("h5",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readfirstordefaultasynctype"},"ReadFirstOrDefaultAsync(Type)"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-10"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L81"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<object> ReadFirstOrDefaultAsync(Type type)\n")),(0,i.kt)("h5",{id:"returns-7"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Object>")),(0,i.kt)("h5",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readsingleasynctype"},"ReadSingleAsync(Type)"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-11"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L92"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<object> ReadSingleAsync(Type type)\n")),(0,i.kt)("h5",{id:"returns-8"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Object>")),(0,i.kt)("h5",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readsingleordefaultasynctype"},"ReadSingleOrDefaultAsync(Type)"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-12"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L103"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<object> ReadSingleOrDefaultAsync(Type type)\n")),(0,i.kt)("h5",{id:"returns-9"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Object>")),(0,i.kt)("h5",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readasynctboolean"},"ReadAsync","<","T",">","(Boolean)"),(0,i.kt)("p",null,"Read the next grid of results."),(0,i.kt)("h6",{id:"view-source-13"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L114"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<IEnumerable<T>> ReadAsync<T>(bool buffered = true)\n")),(0,i.kt)("h5",{id:"returns-10"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<<T>>>")),(0,i.kt)("h5",{id:"parameters-6"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether the results should be buffered in memory.")))),(0,i.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readfirstasynct"},"ReadFirstAsync","<","T",">","()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-14"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L120"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<T> ReadFirstAsync<T>()\n")),(0,i.kt)("h5",{id:"returns-11"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<<T>>")),(0,i.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readfirstordefaultasynct"},"ReadFirstOrDefaultAsync","<","T",">","()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-15"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L126"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<T> ReadFirstOrDefaultAsync<T>()\n")),(0,i.kt)("h5",{id:"returns-12"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<<T>>")),(0,i.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readsingleasynct"},"ReadSingleAsync","<","T",">","()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-16"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L132"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<T> ReadSingleAsync<T>()\n")),(0,i.kt)("h5",{id:"returns-13"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<<T>>")),(0,i.kt)("h5",{id:"type-parameters-3"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readsingleordefaultasynct"},"ReadSingleOrDefaultAsync","<","T",">","()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-17"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.Async.cs#L138"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public Task<T> ReadSingleOrDefaultAsync<T>()\n")),(0,i.kt)("h5",{id:"returns-14"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<<T>>")),(0,i.kt)("h5",{id:"type-parameters-4"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readboolean"},"Read(Boolean)"),(0,i.kt)("p",null,"Read the next grid of results, returned as a dynamic object."),(0,i.kt)("h6",{id:"view-source-18"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L33"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IEnumerable<dynamic> Read(bool buffered = true)\n")),(0,i.kt)("h5",{id:"returns-15"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<System.Object>")),(0,i.kt)("h5",{id:"parameters-7"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether the results should be buffered in memory.")))),(0,i.kt)("h3",{id:"readfirst"},"ReadFirst()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results, returned as a dynamic object."),(0,i.kt)("h6",{id:"view-source-19"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L39"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public dynamic ReadFirst()\n")),(0,i.kt)("h5",{id:"returns-16"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h3",{id:"readfirstordefault"},"ReadFirstOrDefault()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results, returned as a dynamic object."),(0,i.kt)("h6",{id:"view-source-20"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L45"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public dynamic ReadFirstOrDefault()\n")),(0,i.kt)("h5",{id:"returns-17"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h3",{id:"readsingle"},"ReadSingle()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results, returned as a dynamic object."),(0,i.kt)("h6",{id:"view-source-21"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L51"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public dynamic ReadSingle()\n")),(0,i.kt)("h5",{id:"returns-18"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h3",{id:"readsingleordefault"},"ReadSingleOrDefault()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results, returned as a dynamic object."),(0,i.kt)("h6",{id:"view-source-22"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L57"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public dynamic ReadSingleOrDefault()\n")),(0,i.kt)("h5",{id:"returns-19"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h3",{id:"readtboolean"},"Read","<","T",">","(Boolean)"),(0,i.kt)("p",null,"Read the next grid of results."),(0,i.kt)("h6",{id:"view-source-23"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L64"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IEnumerable<T> Read<T>(bool buffered = true)\n")),(0,i.kt)("h5",{id:"returns-20"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<<T>>")),(0,i.kt)("h5",{id:"parameters-8"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether the results should be buffered in memory.")))),(0,i.kt)("h5",{id:"type-parameters-5"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readfirstt"},"ReadFirst","<","T",">","()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-24"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L70"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public T ReadFirst<T>()\n")),(0,i.kt)("h5",{id:"returns-21"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<T>")),(0,i.kt)("h5",{id:"type-parameters-6"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readfirstordefaultt"},"ReadFirstOrDefault","<","T",">","()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-25"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L76"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public T ReadFirstOrDefault<T>()\n")),(0,i.kt)("h5",{id:"returns-22"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<T>")),(0,i.kt)("h5",{id:"type-parameters-7"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readsinglet"},"ReadSingle","<","T",">","()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-26"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L82"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public T ReadSingle<T>()\n")),(0,i.kt)("h5",{id:"returns-23"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<T>")),(0,i.kt)("h5",{id:"type-parameters-8"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readsingleordefaultt"},"ReadSingleOrDefault","<","T",">","()"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-27"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L88"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public T ReadSingleOrDefault<T>()\n")),(0,i.kt)("h5",{id:"returns-24"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<T>")),(0,i.kt)("h5",{id:"type-parameters-9"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"T")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readtype-boolean"},"Read(Type, Boolean)"),(0,i.kt)("p",null,"Read the next grid of results."),(0,i.kt)("h6",{id:"view-source-28"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L96"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public IEnumerable<object> Read(Type type, bool buffered = true)\n")),(0,i.kt)("h5",{id:"returns-25"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<System.Object>")),(0,i.kt)("h5",{id:"parameters-9"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer the results.")))),(0,i.kt)("h3",{id:"readfirsttype"},"ReadFirst(Type)"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-29"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L107"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public object ReadFirst(Type type)\n")),(0,i.kt)("h5",{id:"returns-26"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h5",{id:"parameters-10"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readfirstordefaulttype"},"ReadFirstOrDefault(Type)"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-30"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L118"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public object ReadFirstOrDefault(Type type)\n")),(0,i.kt)("h5",{id:"returns-27"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h5",{id:"parameters-11"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readsingletype"},"ReadSingle(Type)"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-31"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L129"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public object ReadSingle(Type type)\n")),(0,i.kt)("h5",{id:"returns-28"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h5",{id:"parameters-12"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readsingleordefaulttype"},"ReadSingleOrDefault(Type)"),(0,i.kt)("p",null,"Read an individual row of the next grid of results."),(0,i.kt)("h6",{id:"view-source-32"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L140"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public object ReadSingleOrDefault(Type type)\n")),(0,i.kt)("h5",{id:"returns-29"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h5",{id:"parameters-13"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to read.")))),(0,i.kt)("h3",{id:"readtfirst-tsecond-treturnfunctfirst-tsecond-treturn-string-boolean"},"Read","<","TFirst, TSecond, TReturn",">","(Func","<","TFirst, TSecond, TReturn",">",", String, Boolean)"),(0,i.kt)("p",null,"Read multiple objects from a single record set on the grid."),(0,i.kt)("h6",{id:"view-source-33"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L249"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public IEnumerable<TReturn> Read<TFirst, TSecond, TReturn>(Func<TFirst, TSecond, TReturn> func, string splitOn = "id", bool buffered = true)\n')),(0,i.kt)("h5",{id:"returns-30"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<<TReturn>>")),(0,i.kt)("h5",{id:"parameters-14"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<TFirst>,<TSecond>,<TReturn>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"func")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The mapping function from the read types to the return type.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"splitOn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The field(s) we should split and read the second object from (defaults to ",'"',"id",'"',")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer results in memory.")))),(0,i.kt)("h5",{id:"type-parameters-10"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The first type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The second type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to return from the record set.")))),(0,i.kt)("h3",{id:"readtfirst-tsecond-tthird-treturnfunctfirst-tsecond-tthird-treturn-string-boolean"},"Read","<","TFirst, TSecond, TThird, TReturn",">","(Func","<","TFirst, TSecond, TThird, TReturn",">",", String, Boolean)"),(0,i.kt)("p",null,"Read multiple objects from a single record set on the grid."),(0,i.kt)("h6",{id:"view-source-34"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L265"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public IEnumerable<TReturn> Read<TFirst, TSecond, TThird, TReturn>(Func<TFirst, TSecond, TThird, TReturn> func, string splitOn = "id", bool buffered = true)\n')),(0,i.kt)("h5",{id:"returns-31"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<<TReturn>>")),(0,i.kt)("h5",{id:"parameters-15"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<TFirst>,<TSecond>,<TThird>,<TReturn>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"func")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The mapping function from the read types to the return type.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"splitOn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The field(s) we should split and read the second object from (defaults to ",'"',"id",'"',")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer results in memory.")))),(0,i.kt)("h5",{id:"type-parameters-11"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The first type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The second type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TThird")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The third type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to return from the record set.")))),(0,i.kt)("h3",{id:"readtfirst-tsecond-tthird-tfourth-treturnfunctfirst-tsecond-tthird-tfourth-treturn-string-boolean"},"Read","<","TFirst, TSecond, TThird, TFourth, TReturn",">","(Func","<","TFirst, TSecond, TThird, TFourth, TReturn",">",", String, Boolean)"),(0,i.kt)("p",null,"Read multiple objects from a single record set on the grid"),(0,i.kt)("h6",{id:"view-source-35"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L282"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public IEnumerable<TReturn> Read<TFirst, TSecond, TThird, TFourth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TReturn> func, string splitOn = "id", bool buffered = true)\n')),(0,i.kt)("h5",{id:"returns-32"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<<TReturn>>")),(0,i.kt)("h5",{id:"parameters-16"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TReturn>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"func")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The mapping function from the read types to the return type.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"splitOn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The field(s) we should split and read the second object from (defaults to ",'"',"id",'"',")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer results in memory.")))),(0,i.kt)("h5",{id:"type-parameters-12"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The first type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The second type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TThird")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The third type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to return from the record set.")))),(0,i.kt)("h3",{id:"readtfirst-tsecond-tthird-tfourth-tfifth-treturnfunctfirst-tsecond-tthird-tfourth-tfifth-treturn-string-boolean"},"Read","<","TFirst, TSecond, TThird, TFourth, TFifth, TReturn",">","(Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TReturn",">",", String, Boolean)"),(0,i.kt)("p",null,"Read multiple objects from a single record set on the grid"),(0,i.kt)("h6",{id:"view-source-36"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L300"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public IEnumerable<TReturn> Read<TFirst, TSecond, TThird, TFourth, TFifth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TReturn> func, string splitOn = "id", bool buffered = true)\n')),(0,i.kt)("h5",{id:"returns-33"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<<TReturn>>")),(0,i.kt)("h5",{id:"parameters-17"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TReturn>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"func")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The mapping function from the read types to the return type.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"splitOn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The field(s) we should split and read the second object from (defaults to ",'"',"id",'"',")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer results in memory.")))),(0,i.kt)("h5",{id:"type-parameters-13"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The first type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The second type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TThird")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The third type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to return from the record set.")))),(0,i.kt)("h3",{id:"readtfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturnfunctfirst-tsecond-tthird-tfourth-tfifth-tsixth-treturn-string-boolean"},"Read","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn",">","(Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn",">",", String, Boolean)"),(0,i.kt)("p",null,"Read multiple objects from a single record set on the grid"),(0,i.kt)("h6",{id:"view-source-37"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L319"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public IEnumerable<TReturn> Read<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TReturn> func, string splitOn = "id", bool buffered = true)\n')),(0,i.kt)("h5",{id:"returns-34"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<<TReturn>>")),(0,i.kt)("h5",{id:"parameters-18"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TSixth>,<TReturn>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"func")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The mapping function from the read types to the return type.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"splitOn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The field(s) we should split and read the second object from (defaults to ",'"',"id",'"',")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer results in memory.")))),(0,i.kt)("h5",{id:"type-parameters-14"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The first type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The second type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TThird")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The third type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TSixth")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The sixth type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to return from the record set.")))),(0,i.kt)("h3",{id:"readtfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturnfunctfirst-tsecond-tthird-tfourth-tfifth-tsixth-tseventh-treturn-string-boolean"},"Read","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn",">","(Func","<","TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn",">",", String, Boolean)"),(0,i.kt)("p",null,"Read multiple objects from a single record set on the grid"),(0,i.kt)("h6",{id:"view-source-38"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L339"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public IEnumerable<TReturn> Read<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn>(Func<TFirst, TSecond, TThird, TFourth, TFifth, TSixth, TSeventh, TReturn> func, string splitOn = "id", bool buffered = true)\n')),(0,i.kt)("h5",{id:"returns-35"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<<TReturn>>")),(0,i.kt)("h5",{id:"parameters-19"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<<TFirst>,<TSecond>,<TThird>,<TFourth>,<TFifth>,<TSixth>,<TSeventh>,<TReturn>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"func")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The mapping function from the read types to the return type.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"splitOn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The field(s) we should split and read the second object from (defaults to ",'"',"id",'"',")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer results in memory.")))),(0,i.kt)("h5",{id:"type-parameters-15"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFirst")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The first type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TSecond")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The second type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TThird")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The third type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFourth")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The fourth type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TFifth")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The fifth type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TSixth")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The sixth type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TSeventh")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The seventh type in the record set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to return from the record set.")))),(0,i.kt)("h3",{id:"readtreturntype-funcobject-treturn-string-boolean"},"Read","<","TReturn",">","(Type[], Func","<","Object[], TReturn",">",", String, Boolean)"),(0,i.kt)("p",null,"Read multiple objects from a single record set on the grid"),(0,i.kt)("h6",{id:"view-source-39"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L353"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public IEnumerable<TReturn> Read<TReturn>(Type[] types, Func<object[], TReturn> map, string splitOn = "id", bool buffered = true)\n')),(0,i.kt)("h5",{id:"returns-36"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<<TReturn>>")),(0,i.kt)("h5",{id:"parameters-20"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Type[]")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"types")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The types to read from the result set.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Func<System.Object[],<TReturn>>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"map")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The mapping function from the read types to the return type.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"splitOn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The field(s) we should split and read the second object from (defaults to ",'"',"id",'"',")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"buffered")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Whether to buffer results in memory.")))),(0,i.kt)("h5",{id:"type-parameters-16"},"Type Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TReturn")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The type to return from the record set.")))),(0,i.kt)("h3",{id:"dispose"},"Dispose()"),(0,i.kt)("p",null,"Dispose the grid, closing and disposing both the underlying reader and command."),(0,i.kt)("h6",{id:"view-source-40"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/Dapper/SqlMapper.GridReader.cs#L421"},"View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public void Dispose()\n")),(0,i.kt)("h2",{id:"implements"},"Implements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"System.IDisposable"))))}o.isMDXComponent=!0}}]);