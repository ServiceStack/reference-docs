"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[89795],{41588:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return r},toc:function(){return s}});var i=a(83117),n=(a(67294),a(3905)),o=a(1954);const l={title:"Interface IValidationRule",sidebar_label:"IValidationRule",description:"Defines a rule associated with a property which can have multiple validators."},c='<Icon icon="codicon:symbol-interface" className="symbol-interface" /> IValidationRule',r={unversionedId:"api/ServiceStack.FluentValidation/IValidationRule",id:"api/ServiceStack.FluentValidation/IValidationRule",title:"Interface IValidationRule",description:"Defines a rule associated with a property which can have multiple validators.",source:"@site/docs/api/ServiceStack.FluentValidation/IValidationRule.md",sourceDirName:"api/ServiceStack.FluentValidation",slug:"/api/ServiceStack.FluentValidation/IValidationRule",permalink:"/api/ServiceStack.FluentValidation/IValidationRule",draft:!1,tags:[],version:"current",frontMatter:{title:"Interface IValidationRule",sidebar_label:"IValidationRule",description:"Defines a rule associated with a property which can have multiple validators."},sidebar:"apiSidebar",previous:{title:"IValidationContext",permalink:"/api/ServiceStack.FluentValidation/IValidationContext"},next:{title:"IValidator",permalink:"/api/ServiceStack.FluentValidation/IValidator"}},d={},s=[{value:"<strong>Assembly</strong>: ServiceStack.dll",id:"assembly-servicestackdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Properties",id:"properties",level:2},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> Validators',id:"-validators",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> RuleSets',id:"-rulesets",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Validate(IValidationContext)',id:"-validateivalidationcontext",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ValidateAsync(IValidationContext, CancellationToken)',id:"-validateasyncivalidationcontext-cancellationtoken",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ApplyCondition(Func&lt;PropertyValidatorContext, Boolean&gt;, ApplyConditionTo)',id:"-applyconditionfuncpropertyvalidatorcontext-boolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5",level:6},{value:"Parameters",id:"parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ApplyAsyncCondition(Func&lt;PropertyValidatorContext, CancellationToken, Task&lt;Boolean&gt;&gt;, ApplyConditionTo)',id:"-applyasyncconditionfuncpropertyvalidatorcontext-cancellationtoken-taskboolean-applyconditionto",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6",level:6},{value:"Parameters",id:"parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ApplySharedCondition(Func&lt;IValidationContext, Boolean&gt;)',id:"-applysharedconditionfuncivalidationcontext-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7",level:6},{value:"Parameters",id:"parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ApplySharedAsyncCondition(Func&lt;IValidationContext, CancellationToken, Task&lt;Boolean&gt;&gt;)',id:"-applysharedasyncconditionfuncivalidationcontext-cancellationtoken-taskboolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8",level:6},{value:"Parameters",id:"parameters-5",level:5}],p={toc:s};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,i.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-ivalidationrule"},(0,n.kt)(o.JO,{icon:"codicon:symbol-interface",className:"symbol-interface",mdxType:"Icon"})," IValidationRule"),(0,n.kt)("p",null,"Defines a rule associated with a property which can have multiple validators."),(0,n.kt)("h6",{id:"assembly-servicestackdll"},(0,n.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.dll"),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/IValidationRule.cs#L31"}," ",(0,n.kt)(o.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public interface IValidationRule\n")),(0,n.kt)("h2",{id:"properties"},"Properties"),(0,n.kt)("h3",{id:"-validators"},(0,n.kt)(o.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," Validators"),(0,n.kt)("p",null,"The validators that are grouped under this rule."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/IValidationRule.cs#L35"}," ",(0,n.kt)(o.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"IEnumerable<IPropertyValidator> Validators { get; }\n")),(0,n.kt)("h3",{id:"-rulesets"},(0,n.kt)(o.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," RuleSets"),(0,n.kt)("p",null,"Name of the rule-set to which this rule belongs."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/IValidationRule.cs#L39"}," ",(0,n.kt)(o.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"string[] RuleSets { get; set; }\n")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"-validateivalidationcontext"},(0,n.kt)(o.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Validate(IValidationContext)"),(0,n.kt)("p",null,"Performs validation using a validation context and returns a collection of Validation Failures."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/IValidationRule.cs#L46"}," ",(0,n.kt)(o.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"IEnumerable<ValidationFailure> Validate(IValidationContext context)\n")),(0,n.kt)("h5",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>"),": A collection of validation failures"),(0,n.kt)("h5",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidationContext"},"ServiceStack.FluentValidation.IValidationContext")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"context")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Validation Context")))),(0,n.kt)("p",null," |"),(0,n.kt)("h3",{id:"-validateasyncivalidationcontext-cancellationtoken"},(0,n.kt)(o.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ValidateAsync(IValidationContext, CancellationToken)"),(0,n.kt)("p",null,"Performs validation using a validation context and returns a collection of Validation Failures asynchronously."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/IValidationRule.cs#L54"}," ",(0,n.kt)(o.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"Task<IEnumerable<ValidationFailure>> ValidateAsync(IValidationContext context, CancellationToken cancellation)\n")),(0,n.kt)("h5",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<ServiceStack.FluentValidation.Results.ValidationFailure>>"),": A collection of validation failures"),(0,n.kt)("h5",{id:"parameters-1"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidationContext"},"ServiceStack.FluentValidation.IValidationContext")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"context")),(0,n.kt)("td",{parentName:"tr",align:"left"},"Validation Context")))),(0,n.kt)("p",null," |\n| ",(0,n.kt)("inlineCode",{parentName:"p"},"System.Threading.CancellationToken")," | ",(0,n.kt)("em",{parentName:"p"},"cancellation")," | Cancellation token"),(0,n.kt)("p",null," |"),(0,n.kt)("h3",{id:"-applyconditionfuncpropertyvalidatorcontext-boolean-applyconditionto"},(0,n.kt)(o.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ApplyCondition(Func","<","PropertyValidatorContext, Boolean",">",", ApplyConditionTo)"),(0,n.kt)("p",null,"Applies a condition to either all the validators in the rule, or the most recent validator in the rule chain."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/IValidationRule.cs#L61"}," ",(0,n.kt)(o.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"void ApplyCondition(Func<PropertyValidatorContext, bool> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,n.kt)("h5",{id:"parameters-2"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.Boolean>")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"predicate")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The condition to apply")))),(0,n.kt)("p",null," |\n| ",(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,n.kt)("em",{parentName:"p"},"applyConditionTo")," | Indicates whether the condition should be applied to all validators in the rule, or only the current one"),(0,n.kt)("p",null," |"),(0,n.kt)("h3",{id:"-applyasyncconditionfuncpropertyvalidatorcontext-cancellationtoken-taskboolean-applyconditionto"},(0,n.kt)(o.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ApplyAsyncCondition(Func","<","PropertyValidatorContext, CancellationToken, Task","<","Boolean",">",">",", ApplyConditionTo)"),(0,n.kt)("p",null,"Applies an asynchronous condition to either all the validators in the rule, or the most recent validator in the rule chain."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/IValidationRule.cs#L68"}," ",(0,n.kt)(o.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"void ApplyAsyncCondition(Func<PropertyValidatorContext, CancellationToken, Task<bool>> predicate, ApplyConditionTo applyConditionTo = ApplyConditionTo.AllValidators)\n")),(0,n.kt)("h5",{id:"parameters-3"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.FluentValidation.Validators.PropertyValidatorContext,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"predicate")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The condition to apply")))),(0,n.kt)("p",null," |\n| ",(0,n.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/ApplyConditionTo"},"ServiceStack.FluentValidation.ApplyConditionTo")," | ",(0,n.kt)("em",{parentName:"p"},"applyConditionTo")," | Indicates whether the condition should be applied to all validators in the rule, or only the current one"),(0,n.kt)("p",null," |"),(0,n.kt)("h3",{id:"-applysharedconditionfuncivalidationcontext-boolean"},(0,n.kt)(o.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ApplySharedCondition(Func","<","IValidationContext, Boolean",">",")"),(0,n.kt)("p",null,"Applies a condition that wraps the entire rule."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/IValidationRule.cs#L74"}," ",(0,n.kt)(o.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"void ApplySharedCondition(Func<IValidationContext, bool> condition)\n")),(0,n.kt)("h5",{id:"parameters-4"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.FluentValidation.IValidationContext,System.Boolean>")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"condition")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The condition to apply.")))),(0,n.kt)("p",null," |"),(0,n.kt)("h3",{id:"-applysharedasyncconditionfuncivalidationcontext-cancellationtoken-taskboolean"},(0,n.kt)(o.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ApplySharedAsyncCondition(Func","<","IValidationContext, CancellationToken, Task","<","Boolean",">",">",")"),(0,n.kt)("p",null,"Applies an asynchronous condition that wraps the entire rule."),(0,n.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8"},(0,n.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/IValidationRule.cs#L80"}," ",(0,n.kt)(o.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"void ApplySharedAsyncCondition(Func<IValidationContext, CancellationToken, Task<bool>> condition)\n")),(0,n.kt)("h5",{id:"parameters-5"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"System.Func<ServiceStack.FluentValidation.IValidationContext,System.Threading.CancellationToken,System.Threading.Tasks.Task<System.Boolean>>")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("em",{parentName:"td"},"condition")),(0,n.kt)("td",{parentName:"tr",align:"left"},"The condition to apply.")))),(0,n.kt)("p",null," |"))}m.isMDXComponent=!0}}]);