"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[29685],{70016:function(e,t,a){a.r(t),a.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return r},metadata:function(){return g},toc:function(){return s}});var i=a(83117),o=(a(67294),a(3905)),n=a(1954);const r={title:"Class LogManager",sidebar_label:"LogManager",description:"Logging API for this library. You can inject your own implementation otherwise will use the DebugLogFactory to write to System.Diagnostics.Debug"},c='<Icon icon="codicon:symbol-class" className="symbol-class" /> LogManager',g={unversionedId:"api/ServiceStack.Logging/LogManager",id:"api/ServiceStack.Logging/LogManager",title:"Class LogManager",description:"Logging API for this library. You can inject your own implementation otherwise will use the DebugLogFactory to write to System.Diagnostics.Debug",source:"@site/docs/api/ServiceStack.Logging/LogManager.md",sourceDirName:"api/ServiceStack.Logging",slug:"/api/ServiceStack.Logging/LogManager",permalink:"/api/ServiceStack.Logging/LogManager",draft:!1,tags:[],version:"current",frontMatter:{title:"Class LogManager",sidebar_label:"LogManager",description:"Logging API for this library. You can inject your own implementation otherwise will use the DebugLogFactory to write to System.Diagnostics.Debug"},sidebar:"apiSidebar",previous:{title:"LazyLogger",permalink:"/api/ServiceStack.Logging/LazyLogger"},next:{title:"NullDebugLogger",permalink:"/api/ServiceStack.Logging/NullDebugLogger"}},l={},s=[{value:"<strong>Assembly</strong>: ServiceStack.Interfaces.dll",id:"assembly-servicestackinterfacesdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Properties",id:"properties",level:2},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> LogFactory',id:"-logfactory",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetLogger(Type)',id:"-getloggertype",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetLogger(String)',id:"-getloggerstring",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5}],m={toc:s};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,i.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-logmanager"},(0,o.kt)(n.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," LogManager"),(0,o.kt)("p",null,"Logging API for this library. You can inject your own implementation otherwise\nwill use the DebugLogFactory to write to System.Diagnostics.Debug"),(0,o.kt)("h6",{id:"assembly-servicestackinterfacesdll"},(0,o.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.Interfaces.dll"),(0,o.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,o.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Logging/LogManager.cs#L9"}," ",(0,o.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public class LogManager\n")),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"-logfactory"},(0,o.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," LogFactory"),(0,o.kt)("p",null,"Gets or sets the log factory.\nUse this to override the factory that is used to create loggers"),(0,o.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,o.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Logging/LogManager.cs#L17"}," ",(0,o.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static ILogFactory LogFactory { get; set; }\n")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"-getloggertype"},(0,o.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetLogger(Type)"),(0,o.kt)("p",null,"Gets the logger."),(0,o.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,o.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Logging/LogManager.cs#L26"}," ",(0,o.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static ILog GetLogger(Type type)\n")),(0,o.kt)("h5",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"../ServiceStack.Logging/ILog"},"ServiceStack.Logging.ILog")),(0,o.kt)("h5",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"type"))))),(0,o.kt)("h3",{id:"-getloggerstring"},(0,o.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetLogger(String)"),(0,o.kt)("p",null,"Gets the logger."),(0,o.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,o.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Interfaces/Logging/LogManager.cs#L34"}," ",(0,o.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static ILog GetLogger(string typeName)\n")),(0,o.kt)("h5",{id:"returns-1"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"../ServiceStack.Logging/ILog"},"ServiceStack.Logging.ILog")),(0,o.kt)("h5",{id:"parameters-1"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"System.String")),(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("em",{parentName:"td"},"typeName"))))))}u.isMDXComponent=!0}}]);