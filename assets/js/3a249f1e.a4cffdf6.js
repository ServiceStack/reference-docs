"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[2306],{3905:function(e,r,a){a.d(r,{Zo:function(){return s},kt:function(){return u}});var t=a(7294);function p(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function n(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){p(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function l(e,r){if(null==e)return{};var a,t,p=function(e,r){if(null==e)return{};var a,t,p={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],r.indexOf(a)>=0||(p[a]=e[a]);return p}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(p[a]=e[a])}return p}var c=t.createContext({}),m=function(e){var r=t.useContext(c),a=r;return e&&(a="function"==typeof e?e(r):n(n({},r),e)),a},s=function(e){var r=m(e.components);return t.createElement(c.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},o=t.forwardRef((function(e,r){var a=e.components,p=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),o=m(a),u=p,h=o["".concat(c,".").concat(u)]||o[u]||d[u]||i;return a?t.createElement(h,n(n({ref:r},s),{},{components:a})):t.createElement(h,n({ref:r},s))}));function u(e,r){var a=arguments,p=r&&r.mdxType;if("string"==typeof e||p){var i=a.length,n=new Array(i);n[0]=o;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:p,n[1]=l;for(var m=2;m<i;m++)n[m]=a[m];return t.createElement.apply(null,n)}return t.createElement.apply(null,a)}o.displayName="MDXCreateElement"},5575:function(e,r,a){a.r(r),a.d(r,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return m},toc:function(){return s},default:function(){return o}});var t=a(7462),p=a(3366),i=(a(7294),a(3905)),n=["components"],l={title:"Namespace ServiceStack.OrmLite.Dapper",sidebar_label:"Index",sidebar_position:0},c="Namespace ServiceStack.OrmLite.Dapper",m={unversionedId:"api/ServiceStack.OrmLite.Dapper/ServiceStack.OrmLite.Dapper",id:"api/ServiceStack.OrmLite.Dapper/ServiceStack.OrmLite.Dapper",title:"Namespace ServiceStack.OrmLite.Dapper",description:"Classes",source:"@site/docs/api/ServiceStack.OrmLite.Dapper/ServiceStack.OrmLite.Dapper.md",sourceDirName:"api/ServiceStack.OrmLite.Dapper",slug:"/api/ServiceStack.OrmLite.Dapper/",permalink:"/api/ServiceStack.OrmLite.Dapper/",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Namespace ServiceStack.OrmLite.Dapper",sidebar_label:"Index",sidebar_position:0},sidebar:"apiSidebar",previous:{title:"ValueTypeConverter",permalink:"/api/ServiceStack.OrmLite.Converters/ValueTypeConverter"},next:{title:"CommandDefinition",permalink:"/api/ServiceStack.OrmLite.Dapper/CommandDefinition"}},s=[{value:"Classes",id:"classes",children:[{value:"CustomPropertyTypeMap",id:"custompropertytypemap",children:[],level:3},{value:"DbString",id:"dbstring",children:[],level:3},{value:"DefaultTypeMap",id:"defaulttypemap",children:[],level:3},{value:"DynamicParameters",id:"dynamicparameters",children:[],level:3},{value:"ExplicitConstructorAttribute",id:"explicitconstructorattribute",children:[],level:3},{value:"SqlMapper",id:"sqlmapper",children:[],level:3},{value:"SqlMapper.GridReader",id:"sqlmappergridreader",children:[],level:3},{value:"SqlMapper.Identity",id:"sqlmapperidentity",children:[],level:3},{value:"SqlMapper.Settings",id:"sqlmappersettings",children:[],level:3},{value:"SqlMapper.StringTypeHandler<T>",id:"sqlmapperstringtypehandlert",children:[],level:3},{value:"SqlMapper.TypeHandler<T>",id:"sqlmappertypehandlert",children:[],level:3},{value:"SqlMapper.TypeHandlerCache<T>",id:"sqlmappertypehandlercachet",children:[],level:3},{value:"SqlMapper.UdtTypeHandler",id:"sqlmapperudttypehandler",children:[],level:3}],level:2},{value:"Structs",id:"structs",children:[{value:"CommandDefinition",id:"commanddefinition",children:[],level:3}],level:2},{value:"Interfaces",id:"interfaces",children:[{value:"IWrappedDataReader",id:"iwrappeddatareader",children:[],level:3},{value:"SqlMapper.ICustomQueryParameter",id:"sqlmappericustomqueryparameter",children:[],level:3},{value:"SqlMapper.IDynamicParameters",id:"sqlmapperidynamicparameters",children:[],level:3},{value:"SqlMapper.IMemberMap",id:"sqlmapperimembermap",children:[],level:3},{value:"SqlMapper.IParameterCallbacks",id:"sqlmapperiparametercallbacks",children:[],level:3},{value:"SqlMapper.IParameterLookup",id:"sqlmapperiparameterlookup",children:[],level:3},{value:"SqlMapper.ITypeHandler",id:"sqlmapperitypehandler",children:[],level:3},{value:"SqlMapper.ITypeMap",id:"sqlmapperitypemap",children:[],level:3}],level:2},{value:"Enums",id:"enums",children:[{value:"CommandFlags",id:"commandflags",children:[],level:3}],level:2}],d={toc:s};function o(e){var r=e.components,a=(0,p.Z)(e,n);return(0,i.kt)("wrapper",(0,t.Z)({},d,a,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"namespace-servicestackormlitedapper"},"Namespace ServiceStack.OrmLite.Dapper"),(0,i.kt)("h2",{id:"classes"},"Classes"),(0,i.kt)("h3",{id:"custompropertytypemap"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/CustomPropertyTypeMap"},"CustomPropertyTypeMap")),(0,i.kt)("p",null,"Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)"),(0,i.kt)("h3",{id:"dbstring"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/DbString"},"DbString")),(0,i.kt)("p",null,"This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar"),(0,i.kt)("h3",{id:"defaulttypemap"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/DefaultTypeMap"},"DefaultTypeMap")),(0,i.kt)("p",null,"Represents default type mapping strategy used by Dapper"),(0,i.kt)("h3",{id:"dynamicparameters"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/DynamicParameters"},"DynamicParameters")),(0,i.kt)("p",null,"A bag of parameters that can be passed to the Dapper Query and Execute methods"),(0,i.kt)("h3",{id:"explicitconstructorattribute"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/ExplicitConstructorAttribute"},"ExplicitConstructorAttribute")),(0,i.kt)("p",null,"Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters"),(0,i.kt)("h3",{id:"sqlmapper"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper"},"SqlMapper")),(0,i.kt)("p",null,"Dapper, a light weight object mapper for ADO.NET"),(0,i.kt)("h3",{id:"sqlmappergridreader"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.GridReader"},"SqlMapper.GridReader")),(0,i.kt)("p",null,"The grid reader provides interfaces for reading multiple result sets from a Dapper query"),(0,i.kt)("h3",{id:"sqlmapperidentity"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.Identity"},"SqlMapper.Identity")),(0,i.kt)("p",null,"Identity of a cached query in Dapper, used for extensibility."),(0,i.kt)("h3",{id:"sqlmappersettings"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.Settings"},"SqlMapper.Settings")),(0,i.kt)("p",null,"Permits specifying certain SqlMapper values globally."),(0,i.kt)("h3",{id:"sqlmapperstringtypehandlert"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.StringTypeHandler%60T%60"},"SqlMapper.StringTypeHandler","<","T",">")),(0,i.kt)("p",null,"Base-class for simple type-handlers that are based around strings"),(0,i.kt)("h3",{id:"sqlmappertypehandlert"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.TypeHandler%60T%60"},"SqlMapper.TypeHandler","<","T",">")),(0,i.kt)("p",null,"Base-class for simple type-handlers"),(0,i.kt)("h3",{id:"sqlmappertypehandlercachet"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.TypeHandlerCache%60T%60"},"SqlMapper.TypeHandlerCache","<","T",">")),(0,i.kt)("p",null,"Not intended for direct usage"),(0,i.kt)("h3",{id:"sqlmapperudttypehandler"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.UdtTypeHandler"},"SqlMapper.UdtTypeHandler")),(0,i.kt)("p",null,"A type handler for data-types that are supported by the underlying provider, but which need\na well-known UdtTypeName to be specified"),(0,i.kt)("h2",{id:"structs"},"Structs"),(0,i.kt)("h3",{id:"commanddefinition"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/CommandDefinition"},"CommandDefinition")),(0,i.kt)("p",null,"Represents the key aspects of a sql operation"),(0,i.kt)("h2",{id:"interfaces"},"Interfaces"),(0,i.kt)("h3",{id:"iwrappeddatareader"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/IWrappedDataReader"},"IWrappedDataReader")),(0,i.kt)("p",null,"Describes a reader that controls the lifetime of both a command and a reader,\nexposing the downstream command/reader as properties."),(0,i.kt)("h3",{id:"sqlmappericustomqueryparameter"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ICustomQueryParameter"},"SqlMapper.ICustomQueryParameter")),(0,i.kt)("p",null,"Implement this interface to pass an arbitrary db specific parameter to Dapper"),(0,i.kt)("h3",{id:"sqlmapperidynamicparameters"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.IDynamicParameters"},"SqlMapper.IDynamicParameters")),(0,i.kt)("p",null,"Implement this interface to pass an arbitrary db specific set of parameters to Dapper"),(0,i.kt)("h3",{id:"sqlmapperimembermap"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.IMemberMap"},"SqlMapper.IMemberMap")),(0,i.kt)("p",null,"Implements this interface to provide custom member mapping"),(0,i.kt)("h3",{id:"sqlmapperiparametercallbacks"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.IParameterCallbacks"},"SqlMapper.IParameterCallbacks")),(0,i.kt)("p",null,"Extends IDynamicParameters with facilities for executing callbacks after commands have completed"),(0,i.kt)("h3",{id:"sqlmapperiparameterlookup"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.IParameterLookup"},"SqlMapper.IParameterLookup")),(0,i.kt)("p",null,"Extends IDynamicParameters providing by-name lookup of parameter values"),(0,i.kt)("h3",{id:"sqlmapperitypehandler"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ITypeHandler"},"SqlMapper.ITypeHandler")),(0,i.kt)("p",null,"Implement this interface to perform custom type-based parameter handling and value parsing"),(0,i.kt)("h3",{id:"sqlmapperitypemap"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/SqlMapper.ITypeMap"},"SqlMapper.ITypeMap")),(0,i.kt)("p",null,"Implement this interface to change default mapping of reader columns to type members"),(0,i.kt)("h2",{id:"enums"},"Enums"),(0,i.kt)("h3",{id:"commandflags"},(0,i.kt)("a",{parentName:"h3",href:"../ServiceStack.OrmLite.Dapper/CommandFlags"},"CommandFlags")),(0,i.kt)("p",null,"Additional state flags that control command behaviour"))}o.isMDXComponent=!0}}]);