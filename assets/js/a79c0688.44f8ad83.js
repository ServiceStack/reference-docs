"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[96842],{91563:function(e,t,a){a.r(t),a.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var i=a(83117),r=(a(67294),a(3905)),n=a(1954);const o={title:"Class RecyclableMemoryStreamManager",sidebar_label:"RecyclableMemoryStreamManager",description:"Manages pools of RecyclableMemoryStream objects.\n\nThere are two pools managed in here. The small pool contains same-sized buffers that are handed to streams as they write more data.\nFor scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all multiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer usage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."},l='<Icon icon="codicon:symbol-class" className="symbol-class" /> RecyclableMemoryStreamManager',c={unversionedId:"api/ServiceStack.Text/RecyclableMemoryStreamManager",id:"api/ServiceStack.Text/RecyclableMemoryStreamManager",title:"Class RecyclableMemoryStreamManager",description:"Manages pools of RecyclableMemoryStream objects.\n\nThere are two pools managed in here. The small pool contains same-sized buffers that are handed to streams as they write more data.\nFor scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all multiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer usage. There should be far fewer 8 MB buffers than 1 MB buffers, for example.",source:"@site/docs/api/ServiceStack.Text/RecyclableMemoryStreamManager.md",sourceDirName:"api/ServiceStack.Text",slug:"/api/ServiceStack.Text/RecyclableMemoryStreamManager",permalink:"/api/ServiceStack.Text/RecyclableMemoryStreamManager",draft:!1,tags:[],version:"current",frontMatter:{title:"Class RecyclableMemoryStreamManager",sidebar_label:"RecyclableMemoryStreamManager",description:"Manages pools of RecyclableMemoryStream objects.\n\nThere are two pools managed in here. The small pool contains same-sized buffers that are handed to streams as they write more data.\nFor scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all multiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer usage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."},sidebar:"apiSidebar",previous:{title:"RecyclableMemoryStreamManager.UsageReportEventHandler",permalink:"/api/ServiceStack.Text/RecyclableMemoryStreamManager.UsageReportEventHandler"},next:{title:"ReflectionOptimizer",permalink:"/api/ServiceStack.Text/ReflectionOptimizer"}},s={},u=[{value:"<strong>Assembly</strong>: ServiceStack.Text.dll",id:"assembly-servicestacktextdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Properties",id:"properties",level:2},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> BlockSize',id:"-blocksize",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> LargeBufferMultiple',id:"-largebuffermultiple",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> UseMultipleLargeBuffer',id:"-usemultiplelargebuffer",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> UseExponentialLargeBuffer',id:"-useexponentiallargebuffer",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> MaximumBufferSize',id:"-maximumbuffersize",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> SmallPoolFreeSize',id:"-smallpoolfreesize",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> SmallPoolInUseSize',id:"-smallpoolinusesize",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> LargePoolFreeSize',id:"-largepoolfreesize",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> LargePoolInUseSize',id:"-largepoolinusesize",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> SmallBlocksFree',id:"-smallblocksfree",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> LargeBuffersFree',id:"-largebuffersfree",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> MaximumFreeSmallPoolBytes',id:"-maximumfreesmallpoolbytes",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> MaximumFreeLargePoolBytes',id:"-maximumfreelargepoolbytes",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> MaximumStreamCapacity',id:"-maximumstreamcapacity",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> GenerateCallStacks',id:"-generatecallstacks",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> AggressiveBufferReturn',id:"-aggressivebufferreturn",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> ThrowExceptionOnToArray',id:"-throwexceptionontoarray",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17",level:6},{value:"Fields",id:"fields",level:2},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> DefaultBlockSize',id:"-defaultblocksize",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18",level:6},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> DefaultLargeBufferMultiple',id:"-defaultlargebuffermultiple",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19",level:6},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> DefaultMaximumBufferSize',id:"-defaultmaximumbuffersize",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream()',id:"-getstream",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21",level:6},{value:"Returns",id:"returns",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(Guid)',id:"-getstreamguid",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(String)',id:"-getstreamstring",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(Guid, String)',id:"-getstreamguid-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(String, Int32)',id:"-getstreamstring-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(Guid, String, Int32)',id:"-getstreamguid-string-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(Guid, String, Int32, Boolean)',id:"-getstreamguid-string-int32-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27",level:6},{value:"Returns",id:"returns-6",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(String, Int32, Boolean)',id:"-getstreamstring-int32-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28",level:6},{value:"Returns",id:"returns-7",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(Guid, String, Byte[], Int32, Int32)',id:"-getstreamguid-string-byte-int32-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29",level:6},{value:"Returns",id:"returns-8",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(Byte[])',id:"-getstreambyte",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30",level:6},{value:"Returns",id:"returns-9",level:5},{value:"Parameters",id:"parameters-8",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetStream(String, Byte[], Int32, Int32)',id:"-getstreamstring-byte-int32-int32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31",level:6},{value:"Returns",id:"returns-10",level:5},{value:"Parameters",id:"parameters-9",level:5},{value:"Events",id:"events",level:2},{value:"BlockCreated",id:"blockcreated",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32",level:6},{value:"Event Type",id:"event-type",level:5},{value:"BlockDiscarded",id:"blockdiscarded",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-33",level:6},{value:"Event Type",id:"event-type-1",level:5},{value:"LargeBufferCreated",id:"largebuffercreated",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-34",level:6},{value:"Event Type",id:"event-type-2",level:5},{value:"StreamCreated",id:"streamcreated",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-35",level:6},{value:"Event Type",id:"event-type-3",level:5},{value:"StreamDisposed",id:"streamdisposed",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-36",level:6},{value:"Event Type",id:"event-type-4",level:5},{value:"StreamFinalized",id:"streamfinalized",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-37",level:6},{value:"Event Type",id:"event-type-5",level:5},{value:"StreamLength",id:"streamlength",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-38",level:6},{value:"Event Type",id:"event-type-6",level:5},{value:"StreamConvertedToArray",id:"streamconvertedtoarray",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-39",level:6},{value:"Event Type",id:"event-type-7",level:5},{value:"LargeBufferDiscarded",id:"largebufferdiscarded",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-40",level:6},{value:"Event Type",id:"event-type-8",level:5},{value:"UsageReport",id:"usagereport",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-41",level:6},{value:"Event Type",id:"event-type-9",level:5}],m={toc:u};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,i.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-recyclablememorystreammanager"},(0,r.kt)(n.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," RecyclableMemoryStreamManager"),(0,r.kt)("p",null,"Manages pools of RecyclableMemoryStream objects."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"assembly-servicestacktextdll"},(0,r.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.Text.dll"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L349"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public sealed class RecyclableMemoryStreamManager\n")),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"-blocksize"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," BlockSize"),(0,r.kt)("p",null,"The size of each block. It must be set at creation and cannot be changed."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L482"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public int BlockSize { get; }\n")),(0,r.kt)("h3",{id:"-largebuffermultiple"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," LargeBufferMultiple"),(0,r.kt)("p",null,"All buffers are multiples/exponentials of this number. It must be set at creation and cannot be changed."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L487"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public int LargeBufferMultiple { get; }\n")),(0,r.kt)("h3",{id:"-usemultiplelargebuffer"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," UseMultipleLargeBuffer"),(0,r.kt)("p",null,"Use multiple large buffer allocation strategy. It must be set at creation and cannot be changed."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L492"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public bool UseMultipleLargeBuffer { get; }\n")),(0,r.kt)("h3",{id:"-useexponentiallargebuffer"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," UseExponentialLargeBuffer"),(0,r.kt)("p",null,"Use exponential large buffer allocation strategy. It must be set at creation and cannot be changed."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L497"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public bool UseExponentialLargeBuffer { get; }\n")),(0,r.kt)("h3",{id:"-maximumbuffersize"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," MaximumBufferSize"),(0,r.kt)("p",null,"Gets the maximum buffer size."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L504"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public int MaximumBufferSize { get; }\n")),(0,r.kt)("h3",{id:"-smallpoolfreesize"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," SmallPoolFreeSize"),(0,r.kt)("p",null,"Number of bytes in small pool not currently in use"),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L509"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public long SmallPoolFreeSize { get; }\n")),(0,r.kt)("h3",{id:"-smallpoolinusesize"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," SmallPoolInUseSize"),(0,r.kt)("p",null,"Number of bytes currently in use by stream from the small pool"),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L514"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public long SmallPoolInUseSize { get; }\n")),(0,r.kt)("h3",{id:"-largepoolfreesize"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," LargePoolFreeSize"),(0,r.kt)("p",null,"Number of bytes in large pool not currently in use"),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L519"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public long LargePoolFreeSize { get; }\n")),(0,r.kt)("h3",{id:"-largepoolinusesize"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," LargePoolInUseSize"),(0,r.kt)("p",null,"Number of bytes currently in use by streams from the large pool"),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L536"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public long LargePoolInUseSize { get; }\n")),(0,r.kt)("h3",{id:"-smallblocksfree"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," SmallBlocksFree"),(0,r.kt)("p",null,"How many blocks are in the small pool"),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L553"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public long SmallBlocksFree { get; }\n")),(0,r.kt)("h3",{id:"-largebuffersfree"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," LargeBuffersFree"),(0,r.kt)("p",null,"How many buffers are in the large pool"),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L558"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public long LargeBuffersFree { get; }\n")),(0,r.kt)("h3",{id:"-maximumfreesmallpoolbytes"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," MaximumFreeSmallPoolBytes"),(0,r.kt)("p",null,"How many bytes of small free blocks to allow before we start dropping\nthose returned to us."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L575"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public long MaximumFreeSmallPoolBytes { get; set; }\n")),(0,r.kt)("h3",{id:"-maximumfreelargepoolbytes"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," MaximumFreeLargePoolBytes"),(0,r.kt)("p",null,"How many bytes of large free buffers to allow before we start dropping\nthose returned to us."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L581"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public long MaximumFreeLargePoolBytes { get; set; }\n")),(0,r.kt)("h3",{id:"-maximumstreamcapacity"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," MaximumStreamCapacity"),(0,r.kt)("p",null,"Maximum stream capacity in bytes. Attempts to set a larger capacity will\nresult in an exception."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L588"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public long MaximumStreamCapacity { get; set; }\n")),(0,r.kt)("h3",{id:"-generatecallstacks"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," GenerateCallStacks"),(0,r.kt)("p",null,"Whether to save callstacks for stream allocations. This can help in debugging.\nIt should NEVER be turned on generally in production."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L594"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public bool GenerateCallStacks { get; set; }\n")),(0,r.kt)("h3",{id:"-aggressivebufferreturn"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," AggressiveBufferReturn"),(0,r.kt)("p",null,"Whether dirty buffers can be immediately returned to the buffer pool. E.g. when GetBuffer() is called on\na stream and creates a single large buffer, if this setting is enabled, the other blocks will be returned\nto the buffer pool immediately.\nNote when enabling this setting that the user is responsible for ensuring that any buffer previously\nretrieved from a stream which is subsequently modified is not used after modification (as it may no longer\nbe valid)."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L604"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public bool AggressiveBufferReturn { get; set; }\n")),(0,r.kt)("h3",{id:"-throwexceptionontoarray"},(0,r.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," ThrowExceptionOnToArray"),(0,r.kt)("p",null,"Causes an exception to be thrown if ToArray is ever called."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L611"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public bool ThrowExceptionOnToArray { get; set; }\n")),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("h3",{id:"-defaultblocksize"},(0,r.kt)(n.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," DefaultBlockSize"),(0,r.kt)("p",null,"Default block size, in bytes"),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L381"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public const int DefaultBlockSize = 131072\n")),(0,r.kt)("h3",{id:"-defaultlargebuffermultiple"},(0,r.kt)(n.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," DefaultLargeBufferMultiple"),(0,r.kt)("p",null,"Default large buffer multiple, in bytes"),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L385"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public const int DefaultLargeBufferMultiple = 1048576\n")),(0,r.kt)("h3",{id:"-defaultmaximumbuffersize"},(0,r.kt)(n.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," DefaultMaximumBufferSize"),(0,r.kt)("p",null,"Default maximum buffer size, in bytes"),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L389"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public const int DefaultMaximumBufferSize = 134217728\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"-getstream"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream()"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with no tag and a default initial capacity."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L887"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream()\n")),(0,r.kt)("h5",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream."),(0,r.kt)("h3",{id:"-getstreamguid"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(Guid)"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with no tag and a default initial capacity."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L897"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(Guid id)\n")),(0,r.kt)("h5",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream."),(0,r.kt)("h5",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Guid")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A unique identifier which can be used to trace usages of the stream.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-getstreamstring"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(String)"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with the given tag and a default initial capacity."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-23"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L907"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(string tag)\n")),(0,r.kt)("h5",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream."),(0,r.kt)("h5",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tag")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A tag which can be used to track the source of the stream.")))),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-getstreamguid-string"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(Guid, String)"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with the given tag and a default initial capacity."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-24"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L918"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(Guid id, string tag)\n")),(0,r.kt)("h5",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream."),(0,r.kt)("h5",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Guid")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A unique identifier which can be used to trace usages of the stream.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"tag")," | A tag which can be used to track the source of the stream."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-getstreamstring-int32"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(String, Int32)"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with the given tag and at least the given capacity."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-25"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L929"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(string tag, int requiredSize)\n")),(0,r.kt)("h5",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream."),(0,r.kt)("h5",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tag")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A tag which can be used to track the source of the stream.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"requiredSize")," | The minimum desired capacity for the stream."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-getstreamguid-string-int32"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(Guid, String, Int32)"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with the given tag and at least the given capacity."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-26"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L941"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(Guid id, string tag, int requiredSize)\n")),(0,r.kt)("h5",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream."),(0,r.kt)("h5",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Guid")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A unique identifier which can be used to trace usages of the stream.")))),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"tag")," | A tag which can be used to track the source of the stream."),(0,r.kt)("p",null," |\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"requiredSize")," | The minimum desired capacity for the stream."),(0,r.kt)("p",null," |"),(0,r.kt)("h3",{id:"-getstreamguid-string-int32-boolean"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(Guid, String, Int32, Boolean)"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using\na single contiguous underlying buffer."),(0,r.kt)("p",null,"Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-27"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L959"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(Guid id, string tag, int requiredSize, bool asContiguousBuffer)\n")),(0,r.kt)("h5",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream.\nRetrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream."),(0,r.kt)("h5",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Guid")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A unique identifier which can be used to trace usages of the stream.")))),(0,r.kt)("p",null,"Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"tag")," | A tag which can be used to track the source of the stream.\nRetrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"requiredSize")," | The minimum desired capacity for the stream.\nRetrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"asContiguousBuffer")," | Whether to attempt to use a single contiguous buffer.\nRetrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream.\n|"),(0,r.kt)("h3",{id:"-getstreamstring-int32-boolean"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(String, Int32, Boolean)"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with the given tag and at least the given capacity, possibly using\na single contiguous underlying buffer."),(0,r.kt)("p",null,"Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-28"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L981"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(string tag, int requiredSize, bool asContiguousBuffer)\n")),(0,r.kt)("h5",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream.\nRetrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream."),(0,r.kt)("h5",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tag")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A tag which can be used to track the source of the stream.")))),(0,r.kt)("p",null,"Retrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"requiredSize")," | The minimum desired capacity for the stream.\nRetrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Boolean")," | ",(0,r.kt)("em",{parentName:"p"},"asContiguousBuffer")," | Whether to attempt to use a single contiguous buffer.\nRetrieving a MemoryStream which provides a single contiguous buffer can be useful in situations\nwhere the initial size is known and it is desirable to avoid copying data between the smaller underlying\nbuffers to a single large one. This is most helpful when you know that you will always call GetBuffer\non the underlying stream.\n|"),(0,r.kt)("h3",{id:"-getstreamguid-string-byte-int32-int32"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(Guid, String, Byte[], Int32, Int32)"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with the given tag and with contents copied from the provided\nbuffer. The provided buffer is not wrapped or used after construction."),(0,r.kt)("p",null,"The new stream","'","s position is set to the beginning of the stream when returned."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-29"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L997"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(Guid id, string tag, byte[] buffer, int offset, int count)\n")),(0,r.kt)("h5",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream.\nThe new stream","'","s position is set to the beginning of the stream when returned."),(0,r.kt)("h5",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Guid")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A unique identifier which can be used to trace usages of the stream.")))),(0,r.kt)("p",null,"The new stream","'","s position is set to the beginning of the stream when returned.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.String")," | ",(0,r.kt)("em",{parentName:"p"},"tag")," | A tag which can be used to track the source of the stream.\nThe new stream","'","s position is set to the beginning of the stream when returned.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Byte[]")," | ",(0,r.kt)("em",{parentName:"p"},"buffer")," | The byte buffer to copy data from.\nThe new stream","'","s position is set to the beginning of the stream when returned.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"offset")," | The offset from the start of the buffer to copy from.\nThe new stream","'","s position is set to the beginning of the stream when returned.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"count")," | The number of bytes to copy from the buffer.\nThe new stream","'","s position is set to the beginning of the stream when returned.\n|"),(0,r.kt)("h3",{id:"-getstreambyte"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(Byte[])"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with the contents copied from the provided\nbuffer. The provided buffer is not wrapped or used after construction."),(0,r.kt)("p",null,"The new stream","'","s position is set to the beginning of the stream when returned."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-30"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1021"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(byte[] buffer)\n")),(0,r.kt)("h5",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream.\nThe new stream","'","s position is set to the beginning of the stream when returned."),(0,r.kt)("h5",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Byte[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"buffer")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The byte buffer to copy data from.")))),(0,r.kt)("p",null,"The new stream","'","s position is set to the beginning of the stream when returned.\n|"),(0,r.kt)("h3",{id:"-getstreamstring-byte-int32-int32"},(0,r.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetStream(String, Byte[], Int32, Int32)"),(0,r.kt)("p",null,"Retrieve a new MemoryStream object with the given tag and with contents copied from the provided\nbuffer. The provided buffer is not wrapped or used after construction."),(0,r.kt)("p",null,"The new stream","'","s position is set to the beginning of the stream when returned."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-31"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1037"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public MemoryStream GetStream(string tag, byte[] buffer, int offset, int count)\n")),(0,r.kt)("h5",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.IO.MemoryStream"),": A MemoryStream.\nThe new stream","'","s position is set to the beginning of the stream when returned."),(0,r.kt)("h5",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"tag")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A tag which can be used to track the source of the stream.")))),(0,r.kt)("p",null,"The new stream","'","s position is set to the beginning of the stream when returned.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Byte[]")," | ",(0,r.kt)("em",{parentName:"p"},"buffer")," | The byte buffer to copy data from.\nThe new stream","'","s position is set to the beginning of the stream when returned.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"offset")," | The offset from the start of the buffer to copy from.\nThe new stream","'","s position is set to the beginning of the stream when returned.\n|\n| ",(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")," | ",(0,r.kt)("em",{parentName:"p"},"count")," | The number of bytes to copy from the buffer.\nThe new stream","'","s position is set to the beginning of the stream when returned.\n|"),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("h3",{id:"blockcreated"},"BlockCreated"),(0,r.kt)("p",null,"Triggered when a new block is created."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-32"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1097"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.EventHandler BlockCreated\n")),(0,r.kt)("h5",{id:"event-type"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.EventHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.EventHandler")),(0,r.kt)("h3",{id:"blockdiscarded"},"BlockDiscarded"),(0,r.kt)("p",null,"Triggered when a new block is created."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-33"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1102"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.EventHandler BlockDiscarded\n")),(0,r.kt)("h5",{id:"event-type-1"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.EventHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.EventHandler")),(0,r.kt)("h3",{id:"largebuffercreated"},"LargeBufferCreated"),(0,r.kt)("p",null,"Triggered when a new large buffer is created."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-34"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1107"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.EventHandler LargeBufferCreated\n")),(0,r.kt)("h5",{id:"event-type-2"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.EventHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.EventHandler")),(0,r.kt)("h3",{id:"streamcreated"},"StreamCreated"),(0,r.kt)("p",null,"Triggered when a new stream is created."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-35"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1112"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.EventHandler StreamCreated\n")),(0,r.kt)("h5",{id:"event-type-3"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.EventHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.EventHandler")),(0,r.kt)("h3",{id:"streamdisposed"},"StreamDisposed"),(0,r.kt)("p",null,"Triggered when a stream is disposed."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-36"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1117"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.EventHandler StreamDisposed\n")),(0,r.kt)("h5",{id:"event-type-4"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.EventHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.EventHandler")),(0,r.kt)("h3",{id:"streamfinalized"},"StreamFinalized"),(0,r.kt)("p",null,"Triggered when a stream is finalized."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-37"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1122"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.EventHandler StreamFinalized\n")),(0,r.kt)("h5",{id:"event-type-5"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.EventHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.EventHandler")),(0,r.kt)("h3",{id:"streamlength"},"StreamLength"),(0,r.kt)("p",null,"Triggered when a stream is finalized."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-38"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1127"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.StreamLengthReportHandler StreamLength\n")),(0,r.kt)("h5",{id:"event-type-6"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.StreamLengthReportHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.StreamLengthReportHandler")),(0,r.kt)("h3",{id:"streamconvertedtoarray"},"StreamConvertedToArray"),(0,r.kt)("p",null,"Triggered when a user converts a stream to array."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-39"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1132"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.EventHandler StreamConvertedToArray\n")),(0,r.kt)("h5",{id:"event-type-7"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.EventHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.EventHandler")),(0,r.kt)("h3",{id:"largebufferdiscarded"},"LargeBufferDiscarded"),(0,r.kt)("p",null,"Triggered when a large buffer is discarded, along with the reason for the discard."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-40"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1137"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler LargeBufferDiscarded\n")),(0,r.kt)("h5",{id:"event-type-8"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.LargeBufferDiscardedEventHandler")),(0,r.kt)("h3",{id:"usagereport"},"UsageReport"),(0,r.kt)("p",null,"Periodically triggered to report usage statistics."),(0,r.kt)("p",null,"There are two pools managed in here. The small pool contains same-sized buffers that are handed to streams\nas they write more data."),(0,r.kt)("p",null,"For scenarios that need to call GetBuffer(), the large pool contains buffers of various sizes, all\nmultiples/exponentials of LargeBufferMultiple (1 MB by default). They are split by size to avoid overly-wasteful buffer\nusage. There should be far fewer 8 MB buffers than 1 MB buffers, for example."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-41"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/src/ServiceStack.Text/RecyclableMemoryStream.cs#L1142"}," ",(0,r.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public event RecyclableMemoryStreamManager.UsageReportEventHandler UsageReport\n")),(0,r.kt)("h5",{id:"event-type-9"},"Event Type"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.Text/RecyclableMemoryStreamManager.UsageReportEventHandler"},"ServiceStack.Text.RecyclableMemoryStreamManager.UsageReportEventHandler")))}d.isMDXComponent=!0}}]);