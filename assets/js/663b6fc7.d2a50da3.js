"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[7638],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return k}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),c=s(a),k=r,u=c["".concat(o,".").concat(k)]||c[k]||d[k]||i;return a?n.createElement(u,l(l({ref:t},p),{},{components:a})):n.createElement(u,l({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var m={};for(var o in t)hasOwnProperty.call(t,o)&&(m[o]=t[o]);m.originalType=e,m.mdxType="string"==typeof e?e:r,l[1]=m;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},78991:function(e,t,a){a.r(t),a.d(t,{assets:function(){return o},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return s}});var n=a(83117),r=(a(67294),a(3905));const i={title:"Class OrmLiteWriteExpressionsApi",sidebar_label:"OrmLiteWriteExpressionsApi"},l="Class OrmLiteWriteExpressionsApi",m={unversionedId:"api/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi",id:"api/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi",title:"Class OrmLiteWriteExpressionsApi",description:"Assembly: ServiceStack.OrmLite.dll",source:"@site/docs/api/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.md",sourceDirName:"api/ServiceStack.OrmLite",slug:"/api/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi",permalink:"/api/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi",draft:!1,tags:[],version:"current",frontMatter:{title:"Class OrmLiteWriteExpressionsApi",sidebar_label:"OrmLiteWriteExpressionsApi"},sidebar:"apiSidebar",previous:{title:"OrmLiteWriteCommandExtensions",permalink:"/api/ServiceStack.OrmLite/OrmLiteWriteCommandExtensions"},next:{title:"OrmLiteWriteExpressionsApiAsync",permalink:"/api/ServiceStack.OrmLite/OrmLiteWriteExpressionsApiAsync"}},o={},s=[{value:"<strong>Assembly</strong>: ServiceStack.OrmLite.dll",id:"assembly-servicestackormlitedll",level:6},{value:"View Source",id:"view-source",level:6},{value:"Methods",id:"methods",level:2},{value:"UpdateOnlyFields&lt;T&gt;(IDbConnection, T, SqlExpression&lt;T&gt;, Action&lt;IDbCommand&gt;)",id:"updateonlyfieldstidbconnection-t-sqlexpressiont-actionidbcommand",level:3},{value:"View Source",id:"view-source-1",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:"Type Parameters",id:"type-parameters",level:5},{value:"UpdateOnlyFields&lt;T&gt;(IDbConnection, T, String[], Expression&lt;Func&lt;T, Boolean&gt;&gt;, Action&lt;IDbCommand&gt;)",id:"updateonlyfieldstidbconnection-t-string-expressionfunct-boolean-actionidbcommand",level:3},{value:"View Source",id:"view-source-2",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"Type Parameters",id:"type-parameters-1",level:5},{value:"UpdateOnlyFields&lt;T&gt;(IDbConnection, T, Expression&lt;Func&lt;T, Object&gt;&gt;, Expression&lt;Func&lt;T, Boolean&gt;&gt;, Action&lt;IDbCommand&gt;)",id:"updateonlyfieldstidbconnection-t-expressionfunct-object-expressionfunct-boolean-actionidbcommand",level:3},{value:"View Source",id:"view-source-3",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:"Type Parameters",id:"type-parameters-2",level:5},{value:"UpdateOnly&lt;T&gt;(IDbConnection, Expression&lt;Func&lt;T&gt;&gt;, Expression&lt;Func&lt;T, Boolean&gt;&gt;, Action&lt;IDbCommand&gt;)",id:"updateonlytidbconnection-expressionfunct-expressionfunct-boolean-actionidbcommand",level:3},{value:"View Source",id:"view-source-4",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:"Type Parameters",id:"type-parameters-3",level:5},{value:"UpdateOnly&lt;T&gt;(IDbConnection, Expression&lt;Func&lt;T&gt;&gt;, SqlExpression&lt;T&gt;, Action&lt;IDbCommand&gt;)",id:"updateonlytidbconnection-expressionfunct-sqlexpressiont-actionidbcommand",level:3},{value:"View Source",id:"view-source-5",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:"Type Parameters",id:"type-parameters-4",level:5},{value:"UpdateOnly&lt;T&gt;(IDbConnection, Expression&lt;Func&lt;T&gt;&gt;, String, IEnumerable&lt;IDbDataParameter&gt;, Action&lt;IDbCommand&gt;)",id:"updateonlytidbconnection-expressionfunct-string-ienumerableidbdataparameter-actionidbcommand",level:3},{value:"View Source",id:"view-source-6",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:"Type Parameters",id:"type-parameters-5",level:5},{value:"UpdateOnly&lt;T&gt;(IDbConnection, Dictionary&lt;String, Object&gt;, Expression&lt;Func&lt;T, Boolean&gt;&gt;)",id:"updateonlytidbconnection-dictionarystring-object-expressionfunct-boolean",level:3},{value:"View Source",id:"view-source-7",level:6},{value:"Returns",id:"returns-6",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:"Type Parameters",id:"type-parameters-6",level:5},{value:"UpdateOnly&lt;T&gt;(IDbConnection, Dictionary&lt;String, Object&gt;, Action&lt;IDbCommand&gt;)",id:"updateonlytidbconnection-dictionarystring-object-actionidbcommand",level:3},{value:"View Source",id:"view-source-8",level:6},{value:"Returns",id:"returns-7",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:"Type Parameters",id:"type-parameters-7",level:5},{value:"UpdateOnly&lt;T&gt;(IDbConnection, Dictionary&lt;String, Object&gt;, String, Object[], Action&lt;IDbCommand&gt;)",id:"updateonlytidbconnection-dictionarystring-object-string-object-actionidbcommand",level:3},{value:"View Source",id:"view-source-9",level:6},{value:"Returns",id:"returns-8",level:5},{value:"Parameters",id:"parameters-8",level:5},{value:"Type Parameters",id:"type-parameters-8",level:5},{value:"UpdateAdd&lt;T&gt;(IDbConnection, Expression&lt;Func&lt;T&gt;&gt;, Expression&lt;Func&lt;T, Boolean&gt;&gt;, Action&lt;IDbCommand&gt;)",id:"updateaddtidbconnection-expressionfunct-expressionfunct-boolean-actionidbcommand",level:3},{value:"View Source",id:"view-source-10",level:6},{value:"Returns",id:"returns-9",level:5},{value:"Parameters",id:"parameters-9",level:5},{value:"Type Parameters",id:"type-parameters-9",level:5},{value:"UpdateAdd&lt;T&gt;(IDbConnection, Expression&lt;Func&lt;T&gt;&gt;, SqlExpression&lt;T&gt;, Action&lt;IDbCommand&gt;)",id:"updateaddtidbconnection-expressionfunct-sqlexpressiont-actionidbcommand",level:3},{value:"View Source",id:"view-source-11",level:6},{value:"Returns",id:"returns-10",level:5},{value:"Parameters",id:"parameters-10",level:5},{value:"Type Parameters",id:"type-parameters-10",level:5},{value:"UpdateNonDefaults&lt;T&gt;(IDbConnection, T, Expression&lt;Func&lt;T, Boolean&gt;&gt;)",id:"updatenondefaultstidbconnection-t-expressionfunct-boolean",level:3},{value:"View Source",id:"view-source-12",level:6},{value:"Returns",id:"returns-11",level:5},{value:"Parameters",id:"parameters-11",level:5},{value:"Type Parameters",id:"type-parameters-11",level:5},{value:"Update&lt;T&gt;(IDbConnection, T, Expression&lt;Func&lt;T, Boolean&gt;&gt;, Action&lt;IDbCommand&gt;)",id:"updatetidbconnection-t-expressionfunct-boolean-actionidbcommand",level:3},{value:"View Source",id:"view-source-13",level:6},{value:"Returns",id:"returns-12",level:5},{value:"Parameters",id:"parameters-12",level:5},{value:"Type Parameters",id:"type-parameters-12",level:5},{value:"Update&lt;T&gt;(IDbConnection, Object, Expression&lt;Func&lt;T, Boolean&gt;&gt;, Action&lt;IDbCommand&gt;)",id:"updatetidbconnection-object-expressionfunct-boolean-actionidbcommand",level:3},{value:"View Source",id:"view-source-14",level:6},{value:"Returns",id:"returns-13",level:5},{value:"Parameters",id:"parameters-13",level:5},{value:"Type Parameters",id:"type-parameters-13",level:5},{value:"InsertOnly&lt;T&gt;(IDbConnection, T, Expression&lt;Func&lt;T, Object&gt;&gt;, Boolean)",id:"insertonlytidbconnection-t-expressionfunct-object-boolean",level:3},{value:"View Source",id:"view-source-15",level:6},{value:"Returns",id:"returns-14",level:5},{value:"Parameters",id:"parameters-14",level:5},{value:"Type Parameters",id:"type-parameters-14",level:5},{value:"InsertOnly&lt;T&gt;(IDbConnection, T, String[], Boolean)",id:"insertonlytidbconnection-t-string-boolean",level:3},{value:"View Source",id:"view-source-16",level:6},{value:"Returns",id:"returns-15",level:5},{value:"Parameters",id:"parameters-15",level:5},{value:"Type Parameters",id:"type-parameters-15",level:5},{value:"InsertOnly&lt;T&gt;(IDbConnection, Expression&lt;Func&lt;T&gt;&gt;, Boolean)",id:"insertonlytidbconnection-expressionfunct-boolean",level:3},{value:"View Source",id:"view-source-17",level:6},{value:"Returns",id:"returns-16",level:5},{value:"Parameters",id:"parameters-16",level:5},{value:"Type Parameters",id:"type-parameters-16",level:5},{value:"Delete&lt;T&gt;(IDbConnection, Expression&lt;Func&lt;T, Boolean&gt;&gt;, Action&lt;IDbCommand&gt;)",id:"deletetidbconnection-expressionfunct-boolean-actionidbcommand",level:3},{value:"View Source",id:"view-source-18",level:6},{value:"Returns",id:"returns-17",level:5},{value:"Parameters",id:"parameters-17",level:5},{value:"Type Parameters",id:"type-parameters-17",level:5},{value:"Delete&lt;T&gt;(IDbConnection, SqlExpression&lt;T&gt;, Action&lt;IDbCommand&gt;)",id:"deletetidbconnection-sqlexpressiont-actionidbcommand",level:3},{value:"View Source",id:"view-source-19",level:6},{value:"Returns",id:"returns-18",level:5},{value:"Parameters",id:"parameters-18",level:5},{value:"Type Parameters",id:"type-parameters-18",level:5},{value:"DeleteWhere&lt;T&gt;(IDbConnection, String, Object[])",id:"deletewheretidbconnection-string-object",level:3},{value:"View Source",id:"view-source-20",level:6},{value:"Returns",id:"returns-19",level:5},{value:"Parameters",id:"parameters-19",level:5},{value:"Type Parameters",id:"type-parameters-19",level:5}],p={toc:s};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"class-ormlitewriteexpressionsapi"},"Class OrmLiteWriteExpressionsApi"),(0,r.kt)("h6",{id:"assembly-servicestackormlitedll"},(0,r.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.OrmLite.dll"),(0,r.kt)("h6",{id:"view-source"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L8"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static class OrmLiteWriteExpressionsApi\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"updateonlyfieldstidbconnection-t-sqlexpressiont-actionidbcommand"},"UpdateOnlyFields","<","T",">","(IDbConnection, T, SqlExpression","<","T",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Use an SqlExpression to select which fields to update and construct the where expression, E.g: "),(0,r.kt)("p",null,"var q = db.From",">","Person","<","());\ndb.UpdateOnlyFields(new Person { FirstName = ",'"',"JJ",'"'," }, q.Update(p =",">"," p.FirstName).Where(x =",">"," x.FirstName == ",'"',"Jimi",'"',"));\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"FirstName",'"'," = ","'","Jimi","'",")"),(0,r.kt)("p",null,"What","'","s not in the update expression doesn","'","t get updated. No where expression updates all rows. E.g:"),(0,r.kt)("p",null,"db.UpdateOnlyFields(new Person { FirstName = ",'"',"JJ",'"',", LastName = ",'"',"Hendo",'"'," }, ev.Update(p =",">"," p.FirstName));\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"),(0,r.kt)("h6",{id:"view-source-1"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L22"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateOnlyFields<T>(this IDbConnection dbConn, T model, SqlExpression<T> onlyFields, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"<T>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"model"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.OrmLite/SqlExpression%60T%60"},"ServiceStack.OrmLite.SqlExpression","<","T",">")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onlyFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateonlyfieldstidbconnection-t-string-expressionfunct-boolean-actionidbcommand"},"UpdateOnlyFields","<","T",">","(IDbConnection, T, String[], Expression","<","Func","<","T, Boolean",">",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:"),(0,r.kt)("p",null,"db.UpdateOnly(new Person { FirstName = ",'"',"JJ",'"'," }, new[]{ ",'"',"FirstName",'"'," }, p =",">"," p.LastName == ",'"',"Hendrix",'"',");\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"LastName",'"'," = ","'","Hendrix","'",")"),(0,r.kt)("h6",{id:"view-source-2"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L35"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateOnlyFields<T>(this IDbConnection dbConn, T obj, string[] onlyFields, Expression<Func<T, bool>> where = null, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"<T>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"obj"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onlyFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Boolean>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"where"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateonlyfieldstidbconnection-t-expressionfunct-object-expressionfunct-boolean-actionidbcommand"},"UpdateOnlyFields","<","T",">","(IDbConnection, T, Expression","<","Func","<","T, Object",">",">",", Expression","<","Func","<","T, Boolean",">",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:"),(0,r.kt)("p",null,"db.UpdateOnly(new Person { FirstName = ",'"',"JJ",'"'," }, p =",">"," p.FirstName, p =",">"," p.LastName == ",'"',"Hendrix",'"',");\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"LastName",'"'," = ","'","Hendrix","'",")"),(0,r.kt)("p",null,"db.UpdateOnly(new Person { FirstName = ",'"',"JJ",'"'," }, p =",">"," p.FirstName);\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"),(0,r.kt)("p",null,"db.UpdateOnly(new Person { FirstName = ",'"',"JJ",'"',", Age = 27 }, p =",">"," new { p.FirstName, p.Age );\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'",", ",'"',"Age",'"'," = 27"),(0,r.kt)("h6",{id:"view-source-3"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L56"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateOnlyFields<T>(this IDbConnection dbConn, T obj, Expression<Func<T, object>> onlyFields = null, Expression<Func<T, bool>> where = null, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"<T>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"obj"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Object>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onlyFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Boolean>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"where"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateonlytidbconnection-expressionfunct-expressionfunct-boolean-actionidbcommand"},"UpdateOnly","<","T",">","(IDbConnection, Expression","<","Func","<","T",">",">",", Expression","<","Func","<","T, Boolean",">",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Update only fields in the specified expression that matches the where condition (if any), E.g:"),(0,r.kt)("p",null,"db.UpdateOnly(() =",">"," new Person { FirstName = ",'"',"JJ",'"'," }, where: p =",">"," p.LastName == ",'"',"Hendrix",'"',");\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"LastName",'"'," = ","'","Hendrix","'",")"),(0,r.kt)("p",null,"db.UpdateOnly(() =",">"," new Person { FirstName = ",'"',"JJ",'"'," });\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"),(0,r.kt)("h6",{id:"view-source-4"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L74"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateOnly<T>(this IDbConnection dbConn, Expression<Func<T>> updateFields, Expression<Func<T, bool>> where = null, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"updateFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Boolean>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"where"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-3"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateonlytidbconnection-expressionfunct-sqlexpressiont-actionidbcommand"},"UpdateOnly","<","T",">","(IDbConnection, Expression","<","Func","<","T",">",">",", SqlExpression","<","T",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Update only fields in the specified expression that matches the where condition (if any), E.g:"),(0,r.kt)("p",null,"db.UpdateOnly(() =",">"," new Person { FirstName = ",'"',"JJ",'"'," }, db.From",">","Person","<","().Where(p =",">"," p.LastName == ",'"',"Hendrix",'"',"));\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"LastName",'"'," = ","'","Hendrix","'",")"),(0,r.kt)("h6",{id:"view-source-5"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L88"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateOnly<T>(this IDbConnection dbConn, Expression<Func<T>> updateFields, SqlExpression<T> q, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"updateFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.OrmLite/SqlExpression%60T%60"},"ServiceStack.OrmLite.SqlExpression","<","T",">")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"q"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-4"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateonlytidbconnection-expressionfunct-string-ienumerableidbdataparameter-actionidbcommand"},"UpdateOnly","<","T",">","(IDbConnection, Expression","<","Func","<","T",">",">",", String, IEnumerable","<","IDbDataParameter",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Update only fields in the specified expression that matches the where condition (if any), E.g:"),(0,r.kt)("p",null,"var q = db.From",">","Person","<","().Where(p =",">"," p.LastName == ",'"',"Hendrix",'"',");\ndb.UpdateOnly(() =",">"," new Person { FirstName = ",'"',"JJ",'"'," }, q.WhereExpression, q.Params);\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"LastName",'"'," = ","'","Hendrix","'",")"),(0,r.kt)("h6",{id:"view-source-6"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L103"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateOnly<T>(this IDbConnection dbConn, Expression<Func<T>> updateFields, string whereExpression, IEnumerable<IDbDataParameter> sqlParams, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"updateFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"whereExpression"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Collections.Generic.IEnumerable<System.Data.IDbDataParameter>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"sqlParams"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-5"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateonlytidbconnection-dictionarystring-object-expressionfunct-boolean"},"UpdateOnly","<","T",">","(IDbConnection, Dictionary","<","String, Object",">",", Expression","<","Func","<","T, Boolean",">",">",")"),(0,r.kt)("p",null,"Updates all values from Object Dictionary matching the where condition. E.g"),(0,r.kt)("p",null,"db.UpdateOnly","<","Person",">","(new Dictionary","<","string,object","<"," { {",'"',"FirstName",'"',", ",'"',"JJ",'"',"} }, where:p =",">"," p.FirstName == ",'"',"Jimi",'"',");\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"FirstName",'"'," = ","'","Jimi","'",")"),(0,r.kt)("h6",{id:"view-source-7"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L118"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateOnly<T>(this IDbConnection dbConn, Dictionary<string, object> updateFields, Expression<Func<T, bool>> obj)\n")),(0,r.kt)("h5",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-6"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Collections.Generic.Dictionary<System.String,System.Object>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"updateFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Boolean>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"obj"))))),(0,r.kt)("h5",{id:"type-parameters-6"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateonlytidbconnection-dictionarystring-object-actionidbcommand"},"UpdateOnly","<","T",">","(IDbConnection, Dictionary","<","String, Object",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Updates all values from Object Dictionary, Requires Id which is used as a Primary Key Filter. E.g"),(0,r.kt)("p",null,"db.UpdateOnly","<","Person",">","(new Dictionary","<","string,object","<"," { {",'"',"Id",'"',", 1}, {",'"',"FirstName",'"',", ",'"',"JJ",'"',"} });\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"Id",'"'," = 1)"),(0,r.kt)("h6",{id:"view-source-8"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L129"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateOnly<T>(this IDbConnection dbConn, Dictionary<string, object> updateFields, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-7"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Collections.Generic.Dictionary<System.String,System.Object>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"updateFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-7"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateonlytidbconnection-dictionarystring-object-string-object-actionidbcommand"},"UpdateOnly","<","T",">","(IDbConnection, Dictionary","<","String, Object",">",", String, Object[], Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Updates all values from Object Dictionary matching the where condition. E.g"),(0,r.kt)("p",null,"db.UpdateOnly","<","Person",">","(new Dictionary","<","string,object","<"," { {",'"',"FirstName",'"',", ",'"',"JJ",'"',"} }, ",'"',"FirstName == {0}",'"',", new[] { ",'"',"Jimi",'"'," });\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"FirstName",'"'," = ","'","Jimi","'",")"),(0,r.kt)("h6",{id:"view-source-9"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L141"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateOnly<T>(this IDbConnection dbConn, Dictionary<string, object> updateFields, string whereExpression, object[] whereParams, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-8"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Collections.Generic.Dictionary<System.String,System.Object>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"updateFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"whereExpression"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Object[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"whereParams"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-8"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateaddtidbconnection-expressionfunct-expressionfunct-boolean-actionidbcommand"},"UpdateAdd","<","T",">","(IDbConnection, Expression","<","Func","<","T",">",">",", Expression","<","Func","<","T, Boolean",">",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:\nNumeric fields generates an increment sql which is useful to increment counters, etc...\navoiding concurrency conflicts"),(0,r.kt)("p",null,"db.UpdateAdd(() =",">"," new Person { Age = 5 }, where: p =",">"," p.LastName == ",'"',"Hendrix",'"',");\nUPDATE ",'"',"Person",'"'," SET ",'"',"Age",'"'," = ",'"',"Age",'"'," + 5 WHERE (",'"',"LastName",'"'," = ","'","Hendrix","'",")"),(0,r.kt)("p",null,"db.UpdateAdd(() =",">"," new Person { Age = 5 });\nUPDATE ",'"',"Person",'"'," SET ",'"',"Age",'"'," = ",'"',"Age",'"'," + 5"),(0,r.kt)("h6",{id:"view-source-10"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L159"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateAdd<T>(this IDbConnection dbConn, Expression<Func<T>> updateFields, Expression<Func<T, bool>> where = null, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-9"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-9"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"updateFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Boolean>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"where"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-9"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updateaddtidbconnection-expressionfunct-sqlexpressiont-actionidbcommand"},"UpdateAdd","<","T",">","(IDbConnection, Expression","<","Func","<","T",">",">",", SqlExpression","<","T",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Update record, updating only fields specified in updateOnly that matches the where condition (if any), E.g:\nNumeric fields generates an increment sql which is useful to increment counters, etc...\navoiding concurrency conflicts"),(0,r.kt)("p",null,"db.UpdateAdd(() =",">"," new Person { Age = 5 }, db.From","<","Person",">","().Where(p =",">"," p.LastName == ",'"',"Hendrix",'"',"));\nUPDATE ",'"',"Person",'"'," SET ",'"',"Age",'"'," = ",'"',"Age",'"'," + 5 WHERE (",'"',"LastName",'"'," = ","'","Hendrix","'",")"),(0,r.kt)("h6",{id:"view-source-11"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L175"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateAdd<T>(this IDbConnection dbConn, Expression<Func<T>> updateFields, SqlExpression<T> q, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-10"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-10"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"updateFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.OrmLite/SqlExpression%60T%60"},"ServiceStack.OrmLite.SqlExpression","<","T",">")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"q"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-10"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updatenondefaultstidbconnection-t-expressionfunct-boolean"},"UpdateNonDefaults","<","T",">","(IDbConnection, T, Expression","<","Func","<","T, Boolean",">",">",")"),(0,r.kt)("p",null,"Updates all non-default values set on item matching the where condition (if any). E.g"),(0,r.kt)("p",null,"db.UpdateNonDefaults(new Person { FirstName = ",'"',"JJ",'"'," }, p =",">"," p.FirstName == ",'"',"Jimi",'"',");\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"FirstName",'"'," = ","'","Jimi","'",")"),(0,r.kt)("h6",{id:"view-source-12"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L189"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int UpdateNonDefaults<T>(this IDbConnection dbConn, T item, Expression<Func<T, bool>> obj)\n")),(0,r.kt)("h5",{id:"returns-11"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-11"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"<T>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"item"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Boolean>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"obj"))))),(0,r.kt)("h5",{id:"type-parameters-11"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updatetidbconnection-t-expressionfunct-boolean-actionidbcommand"},"Update","<","T",">","(IDbConnection, T, Expression","<","Func","<","T, Boolean",">",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Updates all values set on item matching the where condition (if any). E.g"),(0,r.kt)("p",null,"db.Update(new Person { Id = 1, FirstName = ",'"',"JJ",'"'," }, p =",">"," p.LastName == ",'"',"Hendrix",'"',");\nUPDATE ",'"',"Person",'"'," SET ",'"',"Id",'"'," = 1,",'"',"FirstName",'"'," = ","'","JJ","'",",",'"',"LastName",'"'," = NULL,",'"',"Age",'"'," = 0 WHERE (",'"',"LastName",'"'," = ","'","Hendrix","'",")"),(0,r.kt)("h6",{id:"view-source-13"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L200"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int Update<T>(this IDbConnection dbConn, T item, Expression<Func<T, bool>> where, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-12"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-12"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"<T>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"item"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Boolean>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"where"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-12"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"updatetidbconnection-object-expressionfunct-boolean-actionidbcommand"},"Update","<","T",">","(IDbConnection, Object, Expression","<","Func","<","T, Boolean",">",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Updates all matching fields populated on anonymousType that matches where condition (if any). E.g:"),(0,r.kt)("p",null,"db.Update","<","Person",">","(new { FirstName = ",'"',"JJ",'"'," }, p =",">"," p.LastName == ",'"',"Hendrix",'"',");\nUPDATE ",'"',"Person",'"'," SET ",'"',"FirstName",'"'," = ","'","JJ","'"," WHERE (",'"',"LastName",'"'," = ","'","Hendrix","'",")"),(0,r.kt)("h6",{id:"view-source-14"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L211"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int Update<T>(this IDbConnection dbConn, object updateOnly, Expression<Func<T, bool>> where, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-13"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-13"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"updateOnly"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Boolean>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"where"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-13"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"insertonlytidbconnection-t-expressionfunct-object-boolean"},"InsertOnly","<","T",">","(IDbConnection, T, Expression","<","Func","<","T, Object",">",">",", Boolean)"),(0,r.kt)("p",null,"Using an SqlExpression to only Insert the fields specified, e.g:"),(0,r.kt)("p",null,"db.InsertOnly(new Person { FirstName = ",'"',"Amy",'"'," }, p =",">"," p.FirstName));\nINSERT INTO ",'"',"Person",'"'," (",'"',"FirstName",'"',") VALUES (","'","Amy","'",");"),(0,r.kt)("p",null,"db.InsertOnly(new Person { Id =1 , FirstName=",'"',"Amy",'"'," }, p =",">"," new { p.Id, p.FirstName }));\nINSERT INTO ",'"',"Person",'"'," (",'"',"Id",'"',", ",'"',"FirstName",'"',") VALUES (1, ","'","Amy","'",");"),(0,r.kt)("h6",{id:"view-source-15"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L225"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static long InsertOnly<T>(this IDbConnection dbConn, T obj, Expression<Func<T, object>> onlyFields, bool selectIdentity = false)\n")),(0,r.kt)("h5",{id:"returns-14"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int64")),(0,r.kt)("h5",{id:"parameters-14"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"<T>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"obj"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Object>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onlyFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"selectIdentity"))))),(0,r.kt)("h5",{id:"type-parameters-14"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"insertonlytidbconnection-t-string-boolean"},"InsertOnly","<","T",">","(IDbConnection, T, String[], Boolean)"),(0,r.kt)("p",null,"Using an SqlExpression to only Insert the fields specified, e.g:"),(0,r.kt)("p",null,"db.InsertOnly(new Person { FirstName = ",'"',"Amy",'"'," }, new[]{ ",'"',"FirstName",'"'," }));\nINSERT INTO ",'"',"Person",'"'," (",'"',"FirstName",'"',") VALUES (","'","Amy","'",");"),(0,r.kt)("h6",{id:"view-source-16"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L236"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static long InsertOnly<T>(this IDbConnection dbConn, T obj, string[] onlyFields, bool selectIdentity = false)\n")),(0,r.kt)("h5",{id:"returns-15"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int64")),(0,r.kt)("h5",{id:"parameters-15"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"<T>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"obj"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"onlyFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"selectIdentity"))))),(0,r.kt)("h5",{id:"type-parameters-15"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"insertonlytidbconnection-expressionfunct-boolean"},"InsertOnly","<","T",">","(IDbConnection, Expression","<","Func","<","T",">",">",", Boolean)"),(0,r.kt)("p",null,"Using an SqlExpression to only Insert the fields specified, e.g:"),(0,r.kt)("p",null,"db.InsertOnly(() =",">"," new Person { FirstName = ",'"',"Amy",'"'," }));\nINSERT INTO ",'"',"Person",'"'," (",'"',"FirstName",'"',") VALUES (@FirstName);"),(0,r.kt)("h6",{id:"view-source-17"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L247"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static long InsertOnly<T>(this IDbConnection dbConn, Expression<Func<T>> insertFields, bool selectIdentity = false)\n")),(0,r.kt)("h5",{id:"returns-16"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int64")),(0,r.kt)("h5",{id:"parameters-16"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"insertFields"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"selectIdentity"))))),(0,r.kt)("h5",{id:"type-parameters-16"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"deletetidbconnection-expressionfunct-boolean-actionidbcommand"},"Delete","<","T",">","(IDbConnection, Expression","<","Func","<","T, Boolean",">",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Delete the rows that matches the where expression, e.g:"),(0,r.kt)("p",null,"db.Delete","<","Person",">","(p =",">"," p.Age == 27);\nDELETE FROM ",'"',"Person",'"'," WHERE (",'"',"Age",'"'," = 27)"),(0,r.kt)("h6",{id:"view-source-18"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L258"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int Delete<T>(this IDbConnection dbConn, Expression<Func<T, bool>> where, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-17"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-17"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Linq.Expressions.Expression<System.Func<<T>,System.Boolean>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"where"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-17"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"deletetidbconnection-sqlexpressiont-actionidbcommand"},"Delete","<","T",">","(IDbConnection, SqlExpression","<","T",">",", Action","<","IDbCommand",">",")"),(0,r.kt)("p",null,"Delete the rows that matches the where expression, e.g:"),(0,r.kt)("p",null,"var q = db.From","<","Person",">","());\ndb.Delete","<","Person",">","(q.Where(p =",">"," p.Age == 27));\nDELETE FROM ",'"',"Person",'"'," WHERE (",'"',"Age",'"'," = 27)"),(0,r.kt)("h6",{id:"view-source-19"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L270"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int Delete<T>(this IDbConnection dbConn, SqlExpression<T> where, Action<IDbCommand> commandFilter = null)\n")),(0,r.kt)("h5",{id:"returns-18"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-18"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.OrmLite/SqlExpression%60T%60"},"ServiceStack.OrmLite.SqlExpression","<","T",">")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"where"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Action<System.Data.IDbCommand>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"commandFilter"))))),(0,r.kt)("h5",{id:"type-parameters-18"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))),(0,r.kt)("h3",{id:"deletewheretidbconnection-string-object"},"DeleteWhere","<","T",">","(IDbConnection, String, Object[])"),(0,r.kt)("p",null,"Delete the rows that matches the where filter, e.g:"),(0,r.kt)("p",null,"db.DeleteWhere","<","Person",">","(",'"',"Age = {0}",'"',", new object[] { 27 });\nDELETE FROM ",'"',"Person",'"'," WHERE (",'"',"Age",'"'," = 27)"),(0,r.kt)("h6",{id:"view-source-20"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite/OrmLiteWriteExpressionsApi.cs#L281"},"View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static int DeleteWhere<T>(this IDbConnection dbConn, string whereFilter, object[] whereParams)\n")),(0,r.kt)("h5",{id:"returns-19"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"System.Int32")),(0,r.kt)("h5",{id:"parameters-19"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Data.IDbConnection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"dbConn"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"whereFilter"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Object[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"whereParams"))))),(0,r.kt)("h5",{id:"type-parameters-19"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"T"))))}d.isMDXComponent=!0}}]);