"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[36400],{48852:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return s}});var i=r(83117),a=(r(67294),r(3905)),n=r(1954);const o={title:"Interface IOrderedDictionary<TKey, TValue>",sidebar_label:"IOrderedDictionary<TKey, TValue>",description:"Represents a generic collection of key/value pairs that are ordered independently of the key and value."},c='<Icon icon="codicon:symbol-interface" className="symbol-interface" /> IOrderedDictionary&lt;TKey, TValue&gt;',d={unversionedId:"api/ServiceStack.Redis.Support/IOrderedDictionary`TKey, TValue`",id:"api/ServiceStack.Redis.Support/IOrderedDictionary`TKey, TValue`",title:"Interface IOrderedDictionary<TKey, TValue>",description:"Represents a generic collection of key/value pairs that are ordered independently of the key and value.",source:"@site/docs/api/ServiceStack.Redis.Support/IOrderedDictionary`TKey, TValue`.md",sourceDirName:"api/ServiceStack.Redis.Support",slug:"/api/ServiceStack.Redis.Support/IOrderedDictionary`TKey, TValue`",permalink:"/api/ServiceStack.Redis.Support/IOrderedDictionary`TKey, TValue`",draft:!1,tags:[],version:"current",frontMatter:{title:"Interface IOrderedDictionary<TKey, TValue>",sidebar_label:"IOrderedDictionary<TKey, TValue>",description:"Represents a generic collection of key/value pairs that are ordered independently of the key and value."},sidebar:"apiSidebar",previous:{title:"ConsistentHash<T>",permalink:"/api/ServiceStack.Redis.Support/ConsistentHash`T`"},next:{title:"ISerializer",permalink:"/api/ServiceStack.Redis.Support/ISerializer"}},l={},s=[{value:"<strong>Assembly</strong>: ServiceStack.Redis.dll",id:"assembly-servicestackredisdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Properties",id:"properties",level:2},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> ItemInt32',id:"-itemint32",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add(TKey, TValue)',id:"-addtkey-tvalue",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Insert(Int32, TKey, TValue)',id:"-insertint32-tkey-tvalue",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:"Parameters",id:"parameters-1",level:5}],p={toc:s};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-iordereddictionarytkey-tvalue"},(0,a.kt)(n.JO,{icon:"codicon:symbol-interface",className:"symbol-interface",mdxType:"Icon"})," IOrderedDictionary","<","TKey, TValue",">"),(0,a.kt)("p",null,"Represents a generic collection of key/value pairs that are ordered independently of the key and value."),(0,a.kt)("h6",{id:"assembly-servicestackredisdll"},(0,a.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.Redis.dll"),(0,a.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,a.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Redis/src/ServiceStack.Redis/Support/IOrderedDictionary.cs#L12"}," ",(0,a.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public interface IOrderedDictionary<TKey, TValue> : IOrderedDictionary, IDictionary, ICollection, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable\n")),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"-itemint32"},(0,a.kt)(n.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," Item","[Int32]"),(0,a.kt)("p",null,"Gets or sets the value at the specified index."),(0,a.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,a.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Redis/src/ServiceStack.Redis/Support/IOrderedDictionary.cs#L52"}," ",(0,a.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"TValue this[int index] { get; set; }\n")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"-addtkey-tvalue"},(0,a.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add(TKey, TValue)"),(0,a.kt)("p",null,"Adds an entry with the specified key and value into the ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e")," collection with the lowest available index."),(0,a.kt)("p",null,"<","p",">","You can also use the ","<",'xref href="System.Collections.Generic.IDictionary%7bTKey%2cTValue%7d.Item(TKey)" data-throw-if-not-resolved="false"',">","<","/xref",">"," property to add new elements by setting the value of a key that does not exist in the ","<",'xref href="ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e" data-throw-if-not-resolved="false"',">","<","/xref",">"," collection; however, if the specified key already exists in the ","<",'xref href="ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e" data-throw-if-not-resolved="false"',">","<","/xref",">",", setting the ","<",'xref href="Item(TKey)" data-throw-if-not-resolved="false"',">","<","/xref",">"," property overwrites the old value. In contrast, the ","<",'xref href="Add" data-throw-if-not-resolved="false"',">","<","/xref",">"," method does not modify existing elements.","<","/p",">"),(0,a.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,a.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Redis/src/ServiceStack.Redis/Support/IOrderedDictionary.cs#L27"}," ",(0,a.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"int Add(TKey key, TValue value)\n")),(0,a.kt)("h5",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"System.Int32"),": The index of the newly added entry"),(0,a.kt)("p",null,"<","p",">","You can also use the ","<",'xref href="System.Collections.Generic.IDictionary%7bTKey%2cTValue%7d.Item(TKey)" data-throw-if-not-resolved="false"',">","<","/xref",">"," property to add new elements by setting the value of a key that does not exist in the ","<",'xref href="ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e" data-throw-if-not-resolved="false"',">","<","/xref",">"," collection; however, if the specified key already exists in the ","<",'xref href="ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e" data-throw-if-not-resolved="false"',">","<","/xref",">",", setting the ","<",'xref href="Item(TKey)" data-throw-if-not-resolved="false"',">","<","/xref",">"," property overwrites the old value. In contrast, the ","<",'xref href="Add" data-throw-if-not-resolved="false"',">","<","/xref",">"," method does not modify existing elements.","<","/p",">"),(0,a.kt)("h5",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"<TKey>")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("em",{parentName:"td"},"key")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The key of the entry to add.")))),(0,a.kt)("p",null,"<","p",">","You can also use the ","<",'xref href="System.Collections.Generic.IDictionary%7bTKey%2cTValue%7d.Item(TKey)" data-throw-if-not-resolved="false"',">","<","/xref",">"," property to add new elements by setting the value of a key that does not exist in the ","<",'xref href="ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e" data-throw-if-not-resolved="false"',">","<","/xref",">"," collection; however, if the specified key already exists in the ","<",'xref href="ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e" data-throw-if-not-resolved="false"',">","<","/xref",">",", setting the ","<",'xref href="Item(TKey)" data-throw-if-not-resolved="false"',">","<","/xref",">"," property overwrites the old value. In contrast, the ","<",'xref href="Add" data-throw-if-not-resolved="false"',">","<","/xref",">"," method does not modify existing elements.","<","/p",">","\n|\n| ",(0,a.kt)("inlineCode",{parentName:"p"},"<TValue>")," | ",(0,a.kt)("em",{parentName:"p"},"value")," | The value of the entry to add."),(0,a.kt)("p",null,"<","p",">","You can also use the ","<",'xref href="System.Collections.Generic.IDictionary%7bTKey%2cTValue%7d.Item(TKey)" data-throw-if-not-resolved="false"',">","<","/xref",">"," property to add new elements by setting the value of a key that does not exist in the ","<",'xref href="ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e" data-throw-if-not-resolved="false"',">","<","/xref",">"," collection; however, if the specified key already exists in the ","<",'xref href="ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e" data-throw-if-not-resolved="false"',">","<","/xref",">",", setting the ","<",'xref href="Item(TKey)" data-throw-if-not-resolved="false"',">","<","/xref",">"," property overwrites the old value. In contrast, the ","<",'xref href="Add" data-throw-if-not-resolved="false"',">","<","/xref",">"," method does not modify existing elements.","<","/p",">","\n|"),(0,a.kt)("h3",{id:"-insertint32-tkey-tvalue"},(0,a.kt)(n.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Insert(Int32, TKey, TValue)"),(0,a.kt)("p",null,"Inserts a new entry into the ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceStack.Redis.Support.IOrderedDictionary%602?text=IOrderedDictionary%3cTKey%2cTValue%3e")," collection with the specified key and value at the specified index."),(0,a.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,a.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Redis/src/ServiceStack.Redis/Support/IOrderedDictionary.cs#L42"}," ",(0,a.kt)(n.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"void Insert(int index, TKey key, TValue value)\n")),(0,a.kt)("h5",{id:"parameters-1"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"System.Int32")),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("em",{parentName:"td"},"index")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The zero-based index at which the element should be inserted.")))),(0,a.kt)("p",null," |\n| ",(0,a.kt)("inlineCode",{parentName:"p"},"<TKey>")," | ",(0,a.kt)("em",{parentName:"p"},"key")," | The key of the entry to add."),(0,a.kt)("p",null," |\n| ",(0,a.kt)("inlineCode",{parentName:"p"},"<TValue>")," | ",(0,a.kt)("em",{parentName:"p"},"value")," | The value of the entry to add. The value can be ","<","null",">","<","/null",">"," if the type of the values in the dictionary is a reference type."),(0,a.kt)("p",null," |"))}u.isMDXComponent=!0}}]);