"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[20678],{47239:function(t,e,a){a.r(e),a.d(e,{assets:function(){return c},contentTitle:function(){return n},default:function(){return p},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return s}});var i=a(83117),r=(a(67294),a(3905)),l=a(1954);const o={title:"Class PolymorphicValidator<T, TProperty>",sidebar_label:"PolymorphicValidator<T, TProperty>",description:"Performs runtime checking of the value being validated, and passes validation off to a subclass validator."},n='<Icon icon="codicon:symbol-class" className="symbol-class" /> PolymorphicValidator&lt;T, TProperty&gt;',d={unversionedId:"api/ServiceStack.FluentValidation.Validators/PolymorphicValidator`T, TProperty`",id:"api/ServiceStack.FluentValidation.Validators/PolymorphicValidator`T, TProperty`",title:"Class PolymorphicValidator<T, TProperty>",description:"Performs runtime checking of the value being validated, and passes validation off to a subclass validator.",source:"@site/docs/api/ServiceStack.FluentValidation.Validators/PolymorphicValidator`T, TProperty`.md",sourceDirName:"api/ServiceStack.FluentValidation.Validators",slug:"/api/ServiceStack.FluentValidation.Validators/PolymorphicValidator`T, TProperty`",permalink:"/api/ServiceStack.FluentValidation.Validators/PolymorphicValidator`T, TProperty`",draft:!1,tags:[],version:"current",frontMatter:{title:"Class PolymorphicValidator<T, TProperty>",sidebar_label:"PolymorphicValidator<T, TProperty>",description:"Performs runtime checking of the value being validated, and passes validation off to a subclass validator."},sidebar:"apiSidebar",previous:{title:"OnFailureValidator<T>",permalink:"/api/ServiceStack.FluentValidation.Validators/OnFailureValidator`T`"},next:{title:"PredicateValidator.Predicate",permalink:"/api/ServiceStack.FluentValidation.Validators/PredicateValidator.Predicate"}},c={},s=[{value:"<strong>Assembly</strong>: ServiceStack.dll",id:"assembly-servicestackdll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add&lt;TDerived&gt;(IValidator&lt;TDerived&gt;, String[])',id:"-addtderivedivalidatortderived-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:"Returns",id:"returns",level:5},{value:"Parameters",id:"parameters",level:5},{value:"Type Parameters",id:"type-parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add&lt;TDerived&gt;(Func&lt;T, IValidator&lt;TDerived&gt;&gt;, String[])',id:"-addtderivedfunct-ivalidatortderived-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-1",level:5},{value:"Type Parameters",id:"type-parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add&lt;TDerived&gt;(Func&lt;T, TDerived, IValidator&lt;TDerived&gt;&gt;, String[])',id:"-addtderivedfunct-tderived-ivalidatortderived-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-2",level:5},{value:"Type Parameters",id:"type-parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Add(Type, IValidator, String[])',id:"-addtype-ivalidator-string",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> GetValidator(PropertyValidatorContext)',id:"-getvalidatorpropertyvalidatorcontext",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> CreateNewValidationContextForChildValidator(PropertyValidatorContext, IValidator&lt;TProperty&gt;)',id:"-createnewvalidationcontextforchildvalidatorpropertyvalidatorcontext-ivalidatortproperty",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:"Implements",id:"implements",level:2}],m={toc:s};function p(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,i.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-polymorphicvalidatort-tproperty"},(0,r.kt)(l.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," PolymorphicValidator","<","T, TProperty",">"),(0,r.kt)("p",null,"Performs runtime checking of the value being validated, and passes validation off to a subclass validator."),(0,r.kt)("h6",{id:"assembly-servicestackdll"},(0,r.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.dll"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/Validators/PolymorphicValidator.cs#L34"}," ",(0,r.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public class PolymorphicValidator<T, TProperty> : ChildValidatorAdaptor<T, TProperty>, IPropertyValidator, IChildValidatorAdaptor\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"-addtderivedivalidatortderived-string"},(0,r.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add","<","TDerived",">","(IValidator","<","TDerived",">",", String[])"),(0,r.kt)("p",null,"Adds a validator to handle a specific subclass."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/Validators/PolymorphicValidator.cs#L48"}," ",(0,r.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public PolymorphicValidator<T, TProperty> Add<TDerived>(IValidator<TDerived> derivedValidator, params string[] ruleSets)\n    where TDerived : TProperty\n")),(0,r.kt)("h5",{id:"returns"},"Returns"),(0,r.kt)("p",null,"[ServiceStack.FluentValidation.Validators.PolymorphicValidator","<","T, TProperty",">]","(../ServiceStack.FluentValidation.Validators/PolymorphicValidator",(0,r.kt)("inlineCode",{parentName:"p"},"T, TProperty"),")"),(0,r.kt)("h5",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"derivedValidator")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The derived validator")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"ruleSets")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Optionally specify rulesets to execute. If set, rules not in these rulesets will not be run")))),(0,r.kt)("h5",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TDerived"))),(0,r.kt)("h3",{id:"-addtderivedfunct-ivalidatortderived-string"},(0,r.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add","<","TDerived",">","(Func","<","T, IValidator","<","TDerived",">",">",", String[])"),(0,r.kt)("p",null,"Adds a validator to handle a specific subclass."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/Validators/PolymorphicValidator.cs#L61"}," ",(0,r.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public PolymorphicValidator<T, TProperty> Add<TDerived>(Func<T, IValidator<TDerived>> validatorFactory, params string[] ruleSets)\n    where TDerived : TProperty\n")),(0,r.kt)("h5",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"[ServiceStack.FluentValidation.Validators.PolymorphicValidator","<","T, TProperty",">]","(../ServiceStack.FluentValidation.Validators/PolymorphicValidator",(0,r.kt)("inlineCode",{parentName:"p"},"T, TProperty"),")"),(0,r.kt)("h5",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,ServiceStack.FluentValidation.IValidator<<TDerived>>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"validatorFactory")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The derived validator")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"ruleSets")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Optionally specify rulesets to execute. If set, rules not in these rulesets will not be run")))),(0,r.kt)("h5",{id:"type-parameters-1"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TDerived"))),(0,r.kt)("h3",{id:"-addtderivedfunct-tderived-ivalidatortderived-string"},(0,r.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add","<","TDerived",">","(Func","<","T, TDerived, IValidator","<","TDerived",">",">",", String[])"),(0,r.kt)("p",null,"Adds a validator to handle a specific subclass."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/Validators/PolymorphicValidator.cs#L74"}," ",(0,r.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public PolymorphicValidator<T, TProperty> Add<TDerived>(Func<T, TDerived, IValidator<TDerived>> validatorFactory, params string[] ruleSets)\n    where TDerived : TProperty\n")),(0,r.kt)("h5",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"[ServiceStack.FluentValidation.Validators.PolymorphicValidator","<","T, TProperty",">]","(../ServiceStack.FluentValidation.Validators/PolymorphicValidator",(0,r.kt)("inlineCode",{parentName:"p"},"T, TProperty"),")"),(0,r.kt)("h5",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Func<<T>,<TDerived>,ServiceStack.FluentValidation.IValidator<<TDerived>>>")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"validatorFactory")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The derived validator")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"ruleSets")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Optionally specify rulesets to execute. If set, rules not in these rulesets will not be run")))),(0,r.kt)("h5",{id:"type-parameters-2"},"Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TDerived"))),(0,r.kt)("h3",{id:"-addtype-ivalidator-string"},(0,r.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Add(Type, IValidator, String[])"),(0,r.kt)("p",null,"Adds a validator to handle a specific subclass. This method is not publicly exposed as it\ntakes a non-generic IValidator instance which could result in a type-unsafe validation operation.\nIt allows derived validaors more flexibility in handling type conversion. If you make use of this method, you\nshould ensure that the validator can correctly handle the type being validated."),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/Validators/PolymorphicValidator.cs#L90"}," ",(0,r.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"protected PolymorphicValidator<T, TProperty> Add(Type subclassType, IValidator validator, params string[] ruleSets)\n")),(0,r.kt)("h5",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,"[ServiceStack.FluentValidation.Validators.PolymorphicValidator","<","T, TProperty",">]","(../ServiceStack.FluentValidation.Validators/PolymorphicValidator",(0,r.kt)("inlineCode",{parentName:"p"},"T, TProperty"),")"),(0,r.kt)("h5",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.Type")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"subclassType")),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator"},"ServiceStack.FluentValidation.IValidator")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"validator")),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"System.String[]")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"ruleSets")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Optionally specify rulesets to execute. If set, rules not in these rulesets will not be run")))),(0,r.kt)("h3",{id:"-getvalidatorpropertyvalidatorcontext"},(0,r.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," GetValidator(PropertyValidatorContext)"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/Validators/PolymorphicValidator.cs#L101"}," ",(0,r.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public override IValidator<TProperty> GetValidator(PropertyValidatorContext context)\n")),(0,r.kt)("h5",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,r.kt)("h5",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation.Validators/PropertyValidatorContext"},"ServiceStack.FluentValidation.Validators.PropertyValidatorContext")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"context"))))),(0,r.kt)("h3",{id:"-createnewvalidationcontextforchildvalidatorpropertyvalidatorcontext-ivalidatortproperty"},(0,r.kt)(l.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," CreateNewValidationContextForChildValidator(PropertyValidatorContext, IValidator","<","TProperty",">",")"),(0,r.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6"},(0,r.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack/FluentValidation/Validators/PolymorphicValidator.cs#L112"}," ",(0,r.kt)(l.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"protected override IValidationContext CreateNewValidationContextForChildValidator(PropertyValidatorContext context, IValidator<TProperty> validator)\n")),(0,r.kt)("h5",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"../ServiceStack.FluentValidation/IValidationContext"},"ServiceStack.FluentValidation.IValidationContext")),(0,r.kt)("h5",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation.Validators/PropertyValidatorContext"},"ServiceStack.FluentValidation.Validators.PropertyValidatorContext")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"context"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"td",href:"../ServiceStack.FluentValidation/IValidator%60T%60"},"ServiceStack.FluentValidation.IValidator","<","T",">")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"validator"))))),(0,r.kt)("h2",{id:"implements"},"Implements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../ServiceStack.FluentValidation.Validators/IPropertyValidator"},"ServiceStack.FluentValidation.Validators.IPropertyValidator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../ServiceStack.FluentValidation.Validators/IChildValidatorAdaptor"},"ServiceStack.FluentValidation.Validators.IChildValidatorAdaptor"))))}p.isMDXComponent=!0}}]);