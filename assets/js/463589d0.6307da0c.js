"use strict";(self.webpackChunkdfmg_template=self.webpackChunkdfmg_template||[]).push([[22367],{55036:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var r=n(83117),i=(n(67294),n(3905)),a=n(1954);const c={title:"Class Lisp",sidebar_label:"Lisp",description:"A Lisp interpreter written in C# 7"},o='<Icon icon="codicon:symbol-class" className="symbol-class" /> Lisp',l={unversionedId:"api/ServiceStack.Script/Lisp",id:"api/ServiceStack.Script/Lisp",title:"Class Lisp",description:"A Lisp interpreter written in C# 7",source:"@site/docs/api/ServiceStack.Script/Lisp.md",sourceDirName:"api/ServiceStack.Script",slug:"/api/ServiceStack.Script/Lisp",permalink:"/api/ServiceStack.Script/Lisp",draft:!1,tags:[],version:"current",frontMatter:{title:"Class Lisp",sidebar_label:"Lisp",description:"A Lisp interpreter written in C# 7"},sidebar:"apiSidebar",previous:{title:"Lisp.Sym",permalink:"/api/ServiceStack.Script/Lisp.Sym"},next:{title:"LispEvalException",permalink:"/api/ServiceStack.Script/LispEvalException"}},s={},d=[{value:"<strong>Assembly</strong>: ServiceStack.Common.dll",id:"assembly-servicestackcommondll",level:6},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source",level:6},{value:"Properties",id:"properties",level:2},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> AllowLoadingRemoteScripts',id:"-allowloadingremotescripts",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1",level:6},{value:'<Icon icon="codicon:symbol-property" className="symbol-property" /> IndexGistId',id:"-indexgistid",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2",level:6},{value:"Fields",id:"fields",level:2},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> TRUE',id:"-true",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3",level:6},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> BOOL_TRUE',id:"-bool_true",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4",level:6},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> BOOL_FALSE',id:"-bool_false",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5",level:6},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> InitScript',id:"-initscript",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6",level:6},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> Prelude',id:"-prelude",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7",level:6},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> LispCore',id:"-lispcore",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8",level:6},{value:'<Icon icon="codicon:symbol-field" className="symbol-field" /> Extensions',id:"-extensions",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9",level:6},{value:"Methods",id:"methods",level:2},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Reset()',id:"-reset",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10",level:6},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Import(String)',id:"-importstring",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11",level:6},{value:"Parameters",id:"parameters",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Import(ReadOnlyMemory&lt;Char&gt;)',id:"-importreadonlymemorychar",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12",level:6},{value:"Parameters",id:"parameters-1",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Set(String, Object)',id:"-setstring-object",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13",level:6},{value:"Parameters",id:"parameters-2",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Init()',id:"-init",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14",level:6},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> CreateInterpreter()',id:"-createinterpreter",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15",level:6},{value:"Returns",id:"returns",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> ToCons(IEnumerable)',id:"-toconsienumerable",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16",level:6},{value:"Returns",id:"returns-1",level:5},{value:"Parameters",id:"parameters-3",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QqExpand(Object)',id:"-qqexpandobject",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17",level:6},{value:"Returns",id:"returns-2",level:5},{value:"Parameters",id:"parameters-4",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> QqQuote(Object)',id:"-qqquoteobject",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18",level:6},{value:"Returns",id:"returns-3",level:5},{value:"Parameters",id:"parameters-5",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Parse(String)',id:"-parsestring",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19",level:6},{value:"Returns",id:"returns-4",level:5},{value:"Parameters",id:"parameters-6",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Parse(ReadOnlyMemory&lt;Char&gt;)',id:"-parsereadonlymemorychar",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20",level:6},{value:"Returns",id:"returns-5",level:5},{value:"Parameters",id:"parameters-7",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> Str(Object, Boolean)',id:"-strobject-boolean",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21",level:6},{value:"Returns",id:"returns-6",level:5},{value:"Parameters",id:"parameters-8",level:5},{value:'<Icon icon="codicon:symbol-method" className="symbol-method" /> RunRepl(ScriptContext)',id:"-runreplscriptcontext",level:3},{value:' <Icon icon="codicon:github-inverted" className="github-icon" /> View Source',id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22",level:6},{value:"Parameters",id:"parameters-9",level:5}],m={toc:d};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"-lisp"},(0,i.kt)(a.JO,{icon:"codicon:symbol-class",className:"symbol-class",mdxType:"Icon"})," Lisp"),(0,i.kt)("p",null,"A Lisp interpreter written in C# 7"),(0,i.kt)("h6",{id:"assembly-servicestackcommondll"},(0,i.kt)("strong",{parentName:"h6"},"Assembly"),": ServiceStack.Common.dll"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L400"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static class Lisp\n")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"-allowloadingremotescripts"},(0,i.kt)(a.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," AllowLoadingRemoteScripts"),(0,i.kt)("p",null,"Allow loading of remote scripts"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://example.org/lib.l"},"https://example.org/lib.l")),(0,i.kt)("li",{parentName:"ul"},"gist:{gist-id}"),(0,i.kt)("li",{parentName:"ul"},"gist:{gist-id}/file.l"),(0,i.kt)("li",{parentName:"ul"},"index:{name}"),(0,i.kt)("li",{parentName:"ul"},"index:{name}/file.l")),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-1"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L410"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static bool AllowLoadingRemoteScripts { get; set; }\n")),(0,i.kt)("h3",{id:"-indexgistid"},(0,i.kt)(a.JO,{icon:"codicon:symbol-property",className:"symbol-property",mdxType:"Icon"})," IndexGistId"),(0,i.kt)("p",null,"Gist where to resolve ",(0,i.kt)("inlineCode",{parentName:"p"},"index:{name}")," references from"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-2"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L415"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static string IndexGistId { get; set; }\n")),(0,i.kt)("h2",{id:"fields"},"Fields"),(0,i.kt)("h3",{id:"-true"},(0,i.kt)(a.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," TRUE"),(0,i.kt)("p",null,"The symbol of ",(0,i.kt)("inlineCode",{parentName:"p"},"t")),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-3"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L586"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static readonly Lisp.Sym TRUE\n")),(0,i.kt)("h3",{id:"-bool_true"},(0,i.kt)(a.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," BOOL_TRUE"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-4"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L587"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static readonly Lisp.Sym BOOL_TRUE\n")),(0,i.kt)("h3",{id:"-bool_false"},(0,i.kt)(a.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," BOOL_FALSE"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-5"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L588"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static readonly Lisp.Sym BOOL_FALSE\n")),(0,i.kt)("h3",{id:"-initscript"},(0,i.kt)(a.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," InitScript"),(0,i.kt)("p",null,"Lisp initialization script"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-6"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L3135"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static string InitScript\n")),(0,i.kt)("h3",{id:"-prelude"},(0,i.kt)(a.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," Prelude"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-7"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L3137"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public const string Prelude = \"\\r\\n(setq defmacro\\r\\n      (macro (name args &rest body)\\r\\n             `(progn (setq ,name (macro ,args ,@body))\\r\\n                     ',name)))\\r\\n\\r\\n(defmacro defun (name args &rest body)\\r\\n  `(progn (setq ,name (lambda ,args ,@body))\\r\\n          ',name))\\r\\n\\r\\n(defun caar (x) (car (car x)))\\r\\n(defun cadr (x) (car (cdr x)))\\r\\n(defun cdar (x) (cdr (car x)))\\r\\n(defun cddr (x) (cdr (cdr x)))\\r\\n(defun caaar (x) (car (car (car x))))\\r\\n(defun caadr (x) (car (car (cdr x))))\\r\\n(defun cadar (x) (car (cdr (car x))))\\r\\n(defun caddr (x) (car (cdr (cdr x))))\\r\\n(defun cdaar (x) (cdr (car (car x))))\\r\\n(defun cdadr (x) (cdr (car (cdr x))))\\r\\n(defun cddar (x) (cdr (cdr (car x))))\\r\\n(defun cdddr (x) (cdr (cdr (cdr x))))\\r\\n;(defun not (x) (eq x nil)) ; replaced with native: null || false\\r\\n(defun cons? (x) (not (atom x)))\\r\\n(defun identity (x) x)\\r\\n\\r\\n(setq\\r\\n=      eql\\r\\nnull   not\\r\\nsetcar rplaca\\r\\nsetcdr rplacd)\\r\\n\\r\\n(defun > (x y) (< y x))\\r\\n(defun >= (x y) (not (< x y)))\\r\\n(defun <= (x y) (not (< y x)))\\r\\n(defun /= (x y) (not (= x y)))\\r\\n(defun not= (x y) (not (= x y)))\\r\\n\\r\\n(defun equal (x y)\\r\\n  (cond ((atom x) (eql x y))\\r\\n        ((atom y) nil)\\r\\n        ((equal (car x) (car y)) (equal (cdr x) (cdr y)))))\\r\\n\\r\\n(defmacro if (test then &rest else)\\r\\n  `(cond (,test ,then)\\r\\n         ,@(cond (else `((t ,@else))))))\\r\\n\\r\\n(defmacro when (test &rest body)\\r\\n  `(cond (,test ,@body)))\\r\\n\\r\\n(defmacro let (args &rest body)\\r\\n  ((lambda (vars vals)\\r\\n     (defun vars (x)\\r\\n       (cond (x (cons (if (atom (car x))\\r\\n                          (car x)\\r\\n                        (caar x))\\r\\n                      (vars (cdr x))))))\\r\\n     (defun vals (x)\\r\\n       (cond (x (cons (if (atom (car x))\\r\\n                          nil\\r\\n                        (cadar x))\\r\\n                      (vals (cdr x))))))\\r\\n     `((lambda ,(vars args) ,@body) ,@(vals args)))\\r\\n   nil nil))\\r\\n\\r\\n(defmacro letrec (args &rest body)      ; (letrec ((v e) ...) body...)\\r\\n  (let (vars setqs)\\r\\n    (defun vars (x)\\r\\n      (cond (x (cons (caar x)\\r\\n                     (vars (cdr x))))))\\r\\n    (defun sets (x)\\r\\n      (cond (x (cons `(setq ,(caar x) ,(cadar x))\\r\\n                     (sets (cdr x))))))\\r\\n    `(let ,(vars args) ,@(sets args) ,@body)))\\r\\n\\r\\n(defun _append (x y)\\r\\n  (if (null x)\\r\\n      y\\r\\n    (cons (car x) (_append (cdr x) y))))\\r\\n(defmacro append (x &rest y)\\r\\n  (if (null y)\\r\\n      x\\r\\n    `(_append ,x (append ,@y))))\\r\\n\\r\\n(defmacro and (x &rest y)\\r\\n  (if (null y)\\r\\n      x\\r\\n    `(cond (,x (and ,@y)))))\\r\\n\\r\\n(defun mapcar (f x)\\r\\n  (and x (cons (f (car x)) (mapcar f (cdr x)))))\\r\\n\\r\\n(defmacro or (x &rest y)\\r\\n  (if (null y)\\r\\n      x\\r\\n    `(cond (,x)\\r\\n           ((or ,@y)))))\\r\\n\\r\\n(defun listp (x)\\r\\n  (or (null x) (cons? x)))    ; NB (list? (lambda (x) (+ x 1))) => nil\\r\\n\\r\\n(defun memq (key x)\\r\\n  (cond ((null x) nil)\\r\\n        ((eq key (car x)) x)\\r\\n        (t (memq key (cdr x)))))\\r\\n\\r\\n(defun member (key x)\\r\\n  (cond ((null x) nil)\\r\\n        ((equal key (car x)) x)\\r\\n        (t (member key (cdr x)))))\\r\\n\\r\\n(defun assq (key alist)\\r\\n  (cond (alist (let ((e (car alist)))\\r\\n                 (if (and (cons? e) (eq key (car e)))\\r\\n                     e\\r\\n                   (assq key (cdr alist)))))))\\r\\n\\r\\n(defun assoc (key alist)\\r\\n  (cond (alist (let ((e (car alist)))\\r\\n                 (if (and (cons? e) (equal key (car e)))\\r\\n                     e\\r\\n                   (assoc key (cdr alist)))))))\\r\\n\\r\\n(defun _nreverse (x prev)\\r\\n  (let ((next (cdr x)))\\r\\n    (setcdr x prev)\\r\\n    (if (null next)\\r\\n        x\\r\\n      (_nreverse next x))))\\r\\n(defun nreverse (L)            ; (nreverse '(a b c d)) => (d c b a)\\r\\n  (cond (L (_nreverse L nil))))\\r\\n\\r\\n(defun last (L)\\r\\n  (if (atom (cdr L))\\r\\n      L\\r\\n    (last (cdr L))))\\r\\n\\r\\n(defun nconc (&rest lists)\\r\\n  (if (null (cdr lists))\\r\\n      (car lists)\\r\\n    (if (null (car lists))\\r\\n        (apply nconc (cdr lists))\\r\\n      (setcdr (last (car lists))\\r\\n              (apply nconc (cdr lists)))\\r\\n      (car lists))))\\r\\n\\r\\n(defmacro while (test &rest body)\\r\\n  (let ((loop (gensym)))\\r\\n    `(letrec ((,loop (lambda () (cond (,test ,@body (,loop))))))\\r\\n       (,loop))))\\r\\n\\r\\n(defmacro dolist (spec &rest body) ; (dolist (name list [result]) body...)\\r\\n  (let ((name (car spec))\\r\\n        (list (gensym)))\\r\\n    `(let (,name\\r\\n           (,list ,(cadr spec)))\\r\\n       (while ,list\\r\\n         (setq ,name (car ,list))\\r\\n         ,@body\\r\\n         (setq ,list (cdr ,list)))\\r\\n       ,@(if (cddr spec)\\r\\n             `((setq ,name nil)\\r\\n               ,(caddr spec))))))\\r\\n\\r\\n(defmacro dotimes (spec &rest body) ; (dotimes (name count [result]) body...)\\r\\n  (let ((name (car spec))\\r\\n        (count (gensym)))\\r\\n    `(let ((,name 0)\\r\\n           (,count ,(cadr spec)))\\r\\n       (while (< ,name ,count)\\r\\n         ,@body\\r\\n         (setq ,name (+ ,name 1)))\\r\\n       ,@(if (cddr spec)\\r\\n             `(,(caddr spec))))))\\r\\n    \"\n")),(0,i.kt)("h3",{id:"-lispcore"},(0,i.kt)(a.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," LispCore"),(0,i.kt)("p",null,"Lisp Common Utils"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-8"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L3316"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public const string LispCore = \"\\r\\n(defmacro def (k v) \\r\\n    (list 'progn (list 'setq k v) nil ))\\r\\n\\r\\n(defmacro incf (elem &rest num)\\r\\n  (cond\\r\\n    ((not num) \\r\\n        `(setq ,elem (+ 1 ,elem)) )\\r\\n    (t `(setq ,elem (+ ,@num ,elem))) ))\\r\\n\\r\\n(defmacro decf (elem &rest num)\\r\\n  (cond\\r\\n    ((not num) \\r\\n        `(setq ,elem (- ,elem 1)) )\\r\\n    (t `(setq ,elem (- ,elem ,@num))) ))\\r\\n\\r\\n(defun 1+ (n) (+ n 1))\\r\\n(defun 1- (n) (- n 1))\\r\\n\\r\\n(defun mapcan (f L)\\r\\n  (apply nconc (mapcar f L)))\\r\\n\\r\\n(defun mapc (f L)\\r\\n  (mapcar f L) L)\\r\\n\\r\\n(defmacro when (condition &rest body)\\r\\n  `(if ,condition (progn ,@body)))\\r\\n(defmacro unless (condition &rest body)\\r\\n  `(if (not ,condition) (progn ,@body)))\\r\\n\\r\\n(defmacro push-end (e L)              ; JS [].push\\r\\n  `(setq ,L (append ,L (list ,e))) )\\r\\n(defmacro push (e L)                  ; JS [].unshift\\r\\n  `(setq ,L (cons ,e ,L)))\\r\\n(defmacro pop (L)                     ; JS [].shift\\r\\n  `(let ( (v (first ,L)) )\\r\\n      (setq ,L (rest ,L)) \\r\\n    v))\\r\\n\\r\\n(defun nthcdr (n L)\\r\\n  (if (zero? n)\\r\\n      L\\r\\n      (nthcdr (- n 1) (cdr L))))\\r\\n\\r\\n(defun butlast (L)\\r\\n    (reverse (nthcdr 1 (reverse L))))\\r\\n(defun nbutlast (L)\\r\\n    (nreverse (nthcdr 1 (nreverse L))))\\r\\n\\r\\n(defun remove-if (f L)\\r\\n  (mapcan (fn (e) (if (f e) (list e) nil)) L) )\\r\\n\\r\\n(defun some (f L)\\r\\n    (let ((to nil))\\r\\n      (while (and L (not (setq to (f (pop L))))))\\r\\n      to))\\r\\n\\r\\n(defun every (f L)\\r\\n    (let ((to nil))\\r\\n      (while (and L (setq to (f (pop L)))))\\r\\n      to))\\r\\n\\r\\n(defun reverse (L)\\r\\n  (let ((to '()))\\r\\n    (doseq (e L to)\\r\\n      (push e to))\\r\\n    to))\\r\\n\\r\\n(defun elt (L n)\\r\\n    (if (>= n (length L)) (error \\\"index out of range\\\"))\\r\\n    (let ((l L))\\r\\n        (dotimes (i n)\\r\\n            (setq l (rest l))\\r\\n        )\\r\\n    (first l)))\\r\\n\\r\\n(defun range (&rest args)\\r\\n    (let ( (to '()) )\\r\\n        (cond \\r\\n            ((= (length args) 1) (dotimes (i (car args))\\r\\n                (push i to)))\\r\\n            ((= (length args) 2) (dotimes (i (- (cadr args) (car args)))\\r\\n                (push (+ i (car args)) to))))\\r\\n    (nreverse to)))\\r\\n\\r\\n(defun set-difference (L1 L2)\\r\\n  (if L2\\r\\n        (let ((res nil))\\r\\n          (doseq (e L1)\\r\\n            (unless (member e L2)\\r\\n              (push e res)))\\r\\n          res)\\r\\n      L1))\\r\\n\\r\\n(defun union (L1 L2)\\r\\n  (if L2\\r\\n        (let ((res nil))\\r\\n          (doseq (e L1)\\r\\n            (unless (member e res)\\r\\n              (push e res)))\\r\\n          (doseq (e L2)\\r\\n            (unless (member e res)\\r\\n              (push e res)))\\r\\n          res)\\r\\n      L1))\\r\\n\"\n")),(0,i.kt)("h3",{id:"-extensions"},(0,i.kt)(a.JO,{icon:"codicon:symbol-field",className:"symbol-field",mdxType:"Icon"})," Extensions"),(0,i.kt)("p",null,"Popular Clojure + nicer UX Utils"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-9"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L3426"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},'public const string Extensions = "\\r\\n\\r\\n(defmacro defn (name args &rest body)\\r\\n  `(progn (setq ,name (lambda ,args ,@body))\\r\\n          \',name))\\r\\n\\r\\n(defmacro doseq (spec &rest body) ; (doseq (name seq [result]) body...)\\r\\n  (let ( (name (first spec)) \\r\\n         (seq (second spec)) \\r\\n         (enum (gensym))  )\\r\\n    `(let ( (,name) (,enum (enumerator ,seq)) )\\r\\n       (while (enumeratorNext ,enum)\\r\\n         (setq ,name (enumeratorCurrent ,enum))\\r\\n         ,@body)\\r\\n       (dispose ,enum)\\r\\n  )))\\r\\n\\r\\n(defmacro doseq-while (spec f &rest body) ; (doseq (name seq [result]) body...)\\r\\n  (let ( (name (first spec)) \\r\\n         (seq (second spec)) \\r\\n         (enum (gensym))  )\\r\\n    `(let ( (,name) (,enum (enumerator ,seq)) )\\r\\n       (while (and (enumeratorNext ,enum) (,f (enumeratorCurrent ,enum)))\\r\\n         (setq ,name (enumeratorCurrent ,enum))\\r\\n         ,@body)\\r\\n       (dispose ,enum)\\r\\n  )))\\r\\n\\r\\n(defmacro f++ (elem)\\r\\n  `(1- (setq ,elem (+ 1 ,elem))))\\r\\n\\r\\n(defun zip (f L1 L2)\\r\\n  (let ( (to) ) \\r\\n    (doseq (a L1) \\r\\n      (doseq (b L2)\\r\\n        (push (f a b) to)))\\r\\n    (nreverse to)\\r\\n  ))\\r\\n\\r\\n(defun zip-where (fpred fmap L1 L2)\\r\\n  (let ( (to) ) \\r\\n    (doseq (a L1) \\r\\n      (doseq (b L2)\\r\\n        (if (fpred a b) \\r\\n            (push (fmap a b) to)) ))\\r\\n    (nreverse to)\\r\\n  ))\\r\\n\\r\\n(defun skip-while (f L)\\r\\n  (let ( (to) (go) ) \\r\\n    (doseq (e L)\\r\\n      (if (not (f e)) (setq go t)) \\r\\n      (if go (push e to))\\r\\n    )\\r\\n    (nreverse to)\\r\\n  ))\\r\\n\\r\\n(defun take-while (f L)\\r\\n  (let ( (to) ) \\r\\n    (doseq-while (e L) #(f %)\\r\\n      (push e to))\\r\\n    (nreverse to)\\r\\n  ))\\r\\n\\r\\n(defun assoc-key (k L) (first (assoc k L)))\\r\\n(defun assoc-value (k L) (second (assoc k L)))\\r\\n\\r\\n(defn even?  [n] (= (% n 2) 0))\\r\\n(defn odd?   [n] (= (% n 2) 1))\\r\\n(defn empty? [x] (not (and x (seq? x) (> (count x) 0) )))\\r\\n\\r\\n(defun flatmap (f L)\\r\\n  (flatten (map f L)))\\r\\n\\r\\n(defun map-index (f L)\\r\\n  (let ( (i -1) )\\r\\n    (map (fn [x] (f x (incf i) )) L) ))\\r\\n\\r\\n(defun filter-index (f L)\\r\\n  (let ( (i -1) )\\r\\n    (filter (fn [x] (f x (incf i) )) L) ))\\r\\n\\r\\n(defun where-index (f L)\\r\\n  (let ( (i -1) )\\r\\n    (where (fn [x] (f x (incf i) )) L) ))\\r\\n\\r\\n(defn globln [a L] (/joinln (glob a L)))\\r\\n\\r\\n(setq\\r\\n    1st     first\\r\\n    2nd     second\\r\\n    3rd     third\\r\\n    next    rest\\r\\n    inc     1+\\r\\n    dec     1-\\r\\n    it      identity\\r\\n    atom?   atom\\r\\n    cons?   consp\\r\\n    list?   listp\\r\\n    end?    endp\\r\\n    zero?   zerop\\r\\n    every?  every\\r\\n    some?   some\\r\\n    all?    every\\r\\n    any?    some\\r\\n    prs     printlns\\r\\n    lower-case string-downcase \\r\\n    upper-case string-upcase\\r\\n\\r\\n    ; clojure\\r\\n    defn   defun\\r\\n    filter remove-if\\r\\n)\\r\\n"\n')),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"-reset"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Reset()"),(0,i.kt)("p",null,"Reset Global Symbols back to default"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-10"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L427"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void Reset()\n")),(0,i.kt)("h3",{id:"-importstring"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Import(String)"),(0,i.kt)("p",null,"Load Lisp into Global Symbols, a new CreateInterpreter() starts with a copy of global symbols"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-11"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L437"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void Import(string lisp)\n")),(0,i.kt)("h5",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"lisp"))))),(0,i.kt)("h3",{id:"-importreadonlymemorychar"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Import(ReadOnlyMemory","<","Char",">",")"),(0,i.kt)("p",null,"Load Lisp into Global Symbols, a new CreateInterpreter() starts with a copy of global symbols"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-12"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L442"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void Import(ReadOnlyMemory<char> lisp)\n")),(0,i.kt)("h5",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ReadOnlyMemory<System.Char>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"lisp"))))),(0,i.kt)("h3",{id:"-setstring-object"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Set(String, Object)"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-13"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L447"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void Set(string symbolName, object value)\n")),(0,i.kt)("h5",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"symbolName"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"value"))))),(0,i.kt)("h3",{id:"-init"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Init()"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-14"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L452"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void Init()\n")),(0,i.kt)("h3",{id:"-createinterpreter"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," CreateInterpreter()"),(0,i.kt)("p",null,"Create a Lisp interpreter initialized pre-configured with Global Symbols."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-15"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L455"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Lisp.Interpreter CreateInterpreter()\n")),(0,i.kt)("h5",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.Script/Lisp.Interpreter"},"ServiceStack.Script.Lisp.Interpreter")),(0,i.kt)("h3",{id:"-toconsienumerable"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," ToCons(IEnumerable)"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-16"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L857"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static Lisp.Cell ToCons(IEnumerable seq)\n")),(0,i.kt)("h5",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"../ServiceStack.Script/Lisp.Cell"},"ServiceStack.Script.Lisp.Cell")),(0,i.kt)("h5",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Collections.IEnumerable")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"seq"))))),(0,i.kt)("h3",{id:"-qqexpandobject"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QqExpand(Object)"),(0,i.kt)("p",null,"Expand ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," of any quqsi-quotation `",(0,i.kt)("inlineCode",{parentName:"p"},"x")," into\nthe equivalent S-expression."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-17"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L2530"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static object QqExpand(object x)\n")),(0,i.kt)("h5",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h5",{id:"parameters-4"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"x"))))),(0,i.kt)("h3",{id:"-qqquoteobject"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," QqQuote(Object)"),(0,i.kt)("p",null,"Quote ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," so that the result evaluates to ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-18"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L2535"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static object QqQuote(object x)\n")),(0,i.kt)("h5",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Object")),(0,i.kt)("h5",{id:"parameters-5"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"x"))))),(0,i.kt)("h3",{id:"-parsestring"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Parse(String)"),(0,i.kt)("p",null,"Returns List of SExpression","'","s"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-19"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L2626"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static List<object> Parse(string lisp)\n")),(0,i.kt)("h5",{id:"returns-4"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.List<System.Object>")),(0,i.kt)("h5",{id:"parameters-6"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.String")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"lisp"))))),(0,i.kt)("h3",{id:"-parsereadonlymemorychar"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Parse(ReadOnlyMemory","<","Char",">",")"),(0,i.kt)("p",null,"Returns List of SExpression","'","s"),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-20"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L2631"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static List<object> Parse(ReadOnlyMemory<char> lisp)\n")),(0,i.kt)("h5",{id:"returns-5"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.Collections.Generic.List<System.Object>")),(0,i.kt)("h5",{id:"parameters-7"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"ReadOnlyMemory<System.Char>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"lisp"))))),(0,i.kt)("h3",{id:"-strobject-boolean"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," Str(Object, Boolean)"),(0,i.kt)("p",null,"Make a string representation of Lisp expression."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-21"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L2998"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static string Str(object x, bool quoteString = true)\n")),(0,i.kt)("h5",{id:"returns-6"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"System.String")),(0,i.kt)("h5",{id:"parameters-8"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Object")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"x")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Lisp expression")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"System.Boolean")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"quoteString")),(0,i.kt)("td",{parentName:"tr",align:"left"},"flag whether to quote string")))),(0,i.kt)("h3",{id:"-runreplscriptcontext"},(0,i.kt)(a.JO,{icon:"codicon:symbol-method",className:"symbol-method",mdxType:"Icon"})," RunRepl(ScriptContext)"),(0,i.kt)("p",null,"Run Read-Eval-Print Loop."),(0,i.kt)("h6",{id:"-icon-iconcodicongithub-inverted-classnamegithub-icon--view-source-22"},(0,i.kt)("a",{parentName:"h6",href:"https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Common/Script/ScriptLanguage.Lisp.cs#L3082"}," ",(0,i.kt)(a.JO,{icon:"codicon:github-inverted",className:"github-icon",mdxType:"Icon"})," View Source")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Declaration"',title:'"Declaration"'},"public static void RunRepl(ScriptContext context)\n")),(0,i.kt)("h5",{id:"parameters-9"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"../ServiceStack.Script/ScriptContext"},"ServiceStack.Script.ScriptContext")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("em",{parentName:"td"},"context"))))))}p.isMDXComponent=!0}}]);